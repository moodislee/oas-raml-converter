#%RAML 1.0
title: Google Cloud Datastore
version: v1beta3
baseUri: 'https://datastore.googleapis.com/'
protocols:
  - HTTPS
description: |
  Accesses the schemaless NoSQL database to provide fully managed, robust, scalable storage for your application.
(oas-tags-definition):
  - name: projects
annotationTypes:
  oas-tags-definition:
    type: array
    items:
      properties:
        name: string
        description?: string
        externalDocs?:
          properties:
            url: string
            description?: string
    allowedTargets: API
  oas-x-apiClientRegistration: any
  oas-x-logo: any
  oas-x-origin: any
  oas-x-preferred: any
  oas-x-providerName: any
  oas-x-serviceName: any
  oas-tags:
    type: 'string[]'
    allowedTargets: Method
  oas-externalDocs:
    properties:
      description?: string
      url: string
    allowedTargets:
      - API
      - Method
      - TypeDeclaration
  oas-info:
    properties:
      termsOfService?: string
      contact?:
        properties:
          name?: string
          url?: string
          email?: string
      license?:
        properties:
          name?: string
          url?: string
    allowedTargets: API
  oas-body-name:
    type: string
    allowedTargets: TypeDeclaration
(oas-info):
  (oas-x-apiClientRegistration):
    url: 'https://console.developers.google.com'
  (oas-x-logo):
    url: 'https://api.apis.guru/v2/cache/logo/https_cloud.google.com__static_images_new-gcp-logo.png'
  (oas-x-origin):
    format: google
    url: 'https://datastore.googleapis.com/$discovery/rest?version=v1beta3'
    version: v1
  (oas-x-preferred): false
  (oas-x-providerName): googleapis.com
  (oas-x-serviceName): datastore
  contact:
    name: Google
    url: 'https://google.com'
(oas-externalDocs):
  url: 'https://cloud.google.com/datastore/'
securitySchemes:
  Oauth2:
    type: OAuth 2.0
    settings:
      authorizationUri: 'https://accounts.google.com/o/oauth2/auth'
      accessTokenUri: ''
      authorizationGrants:
        - implicit
      scopes:
        - 'https://www.googleapis.com/auth/cloud-platform'
        - 'https://www.googleapis.com/auth/datastore'
    description: Oauth 2.0 authentication
/v1beta3:
  displayName: v1beta3
  /projects:
    displayName: projects
    '/{projectId}:runQuery':
      displayName: '{projectId}:runQuery'
      uriParameters:
        projectId:
          description: The ID of the project against which to make the request.
          required: true
          type: string
      post:
        displayName: datastore.projects.runQuery
        description: Queries for entities.
        body:
          application/json:
            type: RunQueryRequest
            (oas-body-name): body
        responses:
          '200':
            body:
              application/json:
                type: RunQueryResponse
            description: Successful response
        securedBy:
          - Oauth2:
              scopes:
                - 'https://www.googleapis.com/auth/datastore'
        (oas-tags):
          - projects
      is:
        - accessToken
        - prettyPrint
        - key
        - quotaUser
        - pp
        - fields
        - alt
        - xgafv
        - callback
        - oauthToken
        - uploadType
        - bearerToken
        - uploadProtocol
    '/{projectId}:rollback':
      displayName: '{projectId}:rollback'
      uriParameters:
        projectId:
          description: The ID of the project against which to make the request.
          required: true
          type: string
      post:
        displayName: datastore.projects.rollback
        description: Rolls back a transaction.
        body:
          application/json:
            type: RollbackRequest
            (oas-body-name): body
        responses:
          '200':
            body:
              application/json:
                type: RollbackResponse
            description: Successful response
        securedBy:
          - Oauth2:
              scopes:
                - 'https://www.googleapis.com/auth/datastore'
        (oas-tags):
          - projects
      is:
        - accessToken
        - prettyPrint
        - key
        - quotaUser
        - pp
        - fields
        - alt
        - xgafv
        - callback
        - oauthToken
        - uploadType
        - bearerToken
        - uploadProtocol
    '/{projectId}:lookup':
      displayName: '{projectId}:lookup'
      uriParameters:
        projectId:
          description: The ID of the project against which to make the request.
          required: true
          type: string
      post:
        displayName: datastore.projects.lookup
        description: Looks up entities by key.
        body:
          application/json:
            type: LookupRequest
            (oas-body-name): body
        responses:
          '200':
            body:
              application/json:
                type: LookupResponse
            description: Successful response
        securedBy:
          - Oauth2:
              scopes:
                - 'https://www.googleapis.com/auth/datastore'
        (oas-tags):
          - projects
      is:
        - accessToken
        - prettyPrint
        - key
        - quotaUser
        - pp
        - fields
        - alt
        - xgafv
        - callback
        - oauthToken
        - uploadType
        - bearerToken
        - uploadProtocol
    '/{projectId}:commit':
      displayName: '{projectId}:commit'
      uriParameters:
        projectId:
          description: The ID of the project against which to make the request.
          required: true
          type: string
      post:
        displayName: datastore.projects.commit
        description: |-
          Commits a transaction, optionally creating, deleting or modifying some
          entities.
        body:
          application/json:
            type: CommitRequest
            (oas-body-name): body
        responses:
          '200':
            body:
              application/json:
                type: CommitResponse
            description: Successful response
        securedBy:
          - Oauth2:
              scopes:
                - 'https://www.googleapis.com/auth/datastore'
        (oas-tags):
          - projects
      is:
        - accessToken
        - prettyPrint
        - key
        - quotaUser
        - pp
        - fields
        - alt
        - xgafv
        - callback
        - oauthToken
        - uploadType
        - bearerToken
        - uploadProtocol
    '/{projectId}:beginTransaction':
      displayName: '{projectId}:beginTransaction'
      uriParameters:
        projectId:
          description: The ID of the project against which to make the request.
          required: true
          type: string
      post:
        displayName: datastore.projects.beginTransaction
        description: Begins a new transaction.
        body:
          application/json:
            type: BeginTransactionRequest
            (oas-body-name): body
        responses:
          '200':
            body:
              application/json:
                type: BeginTransactionResponse
            description: Successful response
        securedBy:
          - Oauth2:
              scopes:
                - 'https://www.googleapis.com/auth/datastore'
        (oas-tags):
          - projects
      is:
        - accessToken
        - prettyPrint
        - key
        - quotaUser
        - pp
        - fields
        - alt
        - xgafv
        - callback
        - oauthToken
        - uploadType
        - bearerToken
        - uploadProtocol
    '/{projectId}:allocateIds':
      displayName: '{projectId}:allocateIds'
      uriParameters:
        projectId:
          description: The ID of the project against which to make the request.
          required: true
          type: string
      post:
        displayName: datastore.projects.allocateIds
        description: |-
          Allocates IDs for the given keys, which is useful for referencing an entity
          before it is inserted.
        body:
          application/json:
            type: AllocateIdsRequest
            (oas-body-name): body
        responses:
          '200':
            body:
              application/json:
                type: AllocateIdsResponse
            description: Successful response
        securedBy:
          - Oauth2:
              scopes:
                - 'https://www.googleapis.com/auth/datastore'
        (oas-tags):
          - projects
      is:
        - accessToken
        - prettyPrint
        - key
        - quotaUser
        - pp
        - fields
        - alt
        - xgafv
        - callback
        - oauthToken
        - uploadType
        - bearerToken
        - uploadProtocol
types:
  AllocateIdsRequest:
    description: The request for Datastore.AllocateIds.
    properties:
      keys:
        description: |-
          A list of keys with incomplete key paths for which to allocate IDs.
          No key may be reserved/read-only.
        items:
          type: Key
        type: array
        required: false
  AllocateIdsResponse:
    description: The response for Datastore.AllocateIds.
    properties:
      keys:
        description: |-
          The keys specified in the request (in the same order), each with
          its key path completed with a newly allocated ID.
        items:
          type: Key
        type: array
        required: false
  ArrayValue:
    description: An array value.
    properties:
      values:
        description: |-
          Values in the array.
          The order of this array may not be preserved if it contains a mix of
          indexed and unindexed values.
        items:
          type: Value
        type: array
        required: false
  BeginTransactionRequest:
    description: The request for Datastore.BeginTransaction.
    properties: {}
  BeginTransactionResponse:
    description: The response for Datastore.BeginTransaction.
    properties:
      transaction:
        description: The transaction identifier (always present).
        format: byte
        type: string
        facets:
          format: string
        required: false
  CommitRequest:
    description: The request for Datastore.Commit.
    properties:
      mode:
        description: The type of commit to perform. Defaults to `TRANSACTIONAL`.
        enum:
          - MODE_UNSPECIFIED
          - TRANSACTIONAL
          - NON_TRANSACTIONAL
        type: string
        required: false
      mutations:
        description: |-
          The mutations to perform.

          When mode is `TRANSACTIONAL`, mutations affecting a single entity are
          applied in order. The following sequences of mutations affecting a single
          entity are not permitted in a single `Commit` request:

          - `insert` followed by `insert`
          - `update` followed by `insert`
          - `upsert` followed by `insert`
          - `delete` followed by `update`

          When mode is `NON_TRANSACTIONAL`, no two mutations may affect a single
          entity.
        items:
          type: Mutation
        type: array
        required: false
      transaction:
        description: |-
          The identifier of the transaction associated with the commit. A
          transaction identifier is returned by a call to
          Datastore.BeginTransaction.
        format: byte
        type: string
        facets:
          format: string
        required: false
  CommitResponse:
    description: The response for Datastore.Commit.
    properties:
      indexUpdates:
        description: |-
          The number of index entries updated during the commit, or zero if none were
          updated.
        format: int32
        type: integer
        required: false
      mutationResults:
        description: |-
          The result of performing the mutations.
          The i-th mutation result corresponds to the i-th mutation in the request.
        items:
          type: MutationResult
        type: array
        required: false
  CompositeFilter:
    description: A filter that merges multiple other filters using the given operator.
    properties:
      filters:
        description: |-
          The list of filters to combine.
          Must contain at least one filter.
        items:
          type: Filter
        type: array
        required: false
      op:
        description: The operator for combining multiple filters.
        enum:
          - OPERATOR_UNSPECIFIED
          - AND
        type: string
        required: false
  Entity:
    description: |-
      A Datastore data object.

      An entity is limited to 1 megabyte when stored. That _roughly_
      corresponds to a limit of 1 megabyte for the serialized form of this
      message.
    properties:
      key:
        description: |-
          The entity's key.

          An entity must have a key, unless otherwise documented (for example,
          an entity in `Value.entity_value` may have no key).
          An entity's kind is its key path's last element's kind,
          or null if it has no key.
        type: Key
        required: false
      properties:
        additionalProperties:
          type: Value
        description: |-
          The entity's properties.
          The map's keys are property names.
          A property name matching regex `__.*__` is reserved.
          A reserved property name is forbidden in certain documented contexts.
          The name must not contain more than 500 characters.
          The name cannot be `""`.
        type: object
        required: false
  EntityResult:
    description: The result of fetching an entity from Datastore.
    properties:
      cursor:
        description: |-
          A cursor that points to the position after the result entity.
          Set only when the `EntityResult` is part of a `QueryResultBatch` message.
        format: byte
        type: string
        facets:
          format: string
        required: false
      entity:
        description: The resulting entity.
        type: Entity
        required: false
      version:
        description: |-
          The version of the entity, a strictly positive number that monotonically
          increases with changes to the entity.

          This field is set for `FULL` entity
          results.

          For missing entities in `LookupResponse`, this
          is the version of the snapshot that was used to look up the entity, and it
          is always set except for eventually consistent reads.
        format: int64
        type: string
        facets:
          format: string
        required: false
  Filter:
    description: A holder for any type of filter.
    properties:
      compositeFilter:
        description: A composite filter.
        type: CompositeFilter
        required: false
      propertyFilter:
        description: A filter on a property.
        type: PropertyFilter
        required: false
  GqlQuery:
    description: 'A [GQL query](https://cloud.google.com/datastore/docs/apis/gql/gql_reference).'
    properties:
      allowLiterals:
        description: |-
          When false, the query string must not contain any literals and instead must
          bind all values. For example,
          `SELECT * FROM Kind WHERE a = 'string literal'` is not allowed, while
          `SELECT * FROM Kind WHERE a = @value` is.
        type: boolean
        required: false
      namedBindings:
        additionalProperties:
          type: GqlQueryParameter
        description: |-
          For each non-reserved named binding site in the query string, there must be
          a named parameter with that name, but not necessarily the inverse.

          Key must match regex `A-Za-z_$*`, must not match regex
          `__.*__`, and must not be `""`.
        type: object
        required: false
      positionalBindings:
        description: |-
          Numbered binding site @1 references the first numbered parameter,
          effectively using 1-based indexing, rather than the usual 0.

          For each binding site numbered i in `query_string`, there must be an i-th
          numbered parameter. The inverse must also be true.
        items:
          type: GqlQueryParameter
        type: array
        required: false
      queryString:
        description: |-
          A string of the format described
          [here](https://cloud.google.com/datastore/docs/apis/gql/gql_reference).
        type: string
        required: false
  GqlQueryParameter:
    description: A binding parameter for a GQL query.
    properties:
      cursor:
        description: |-
          A query cursor. Query cursors are returned in query
          result batches.
        format: byte
        type: string
        facets:
          format: string
        required: false
      value:
        description: A value parameter.
        type: Value
        required: false
  Key:
    description: |-
      A unique identifier for an entity.
      If a key's partition ID or any of its path kinds or names are
      reserved/read-only, the key is reserved/read-only.
      A reserved/read-only key is forbidden in certain documented contexts.
    properties:
      partitionId:
        description: |-
          Entities are partitioned into subsets, currently identified by a project
          ID and namespace ID.
          Queries are scoped to a single partition.
        type: PartitionId
        required: false
      path:
        description: |-
          The entity path.
          An entity path consists of one or more elements composed of a kind and a
          string or numerical identifier, which identify entities. The first
          element identifies a _root entity_, the second element identifies
          a _child_ of the root entity, the third element identifies a child of the
          second entity, and so forth. The entities identified by all prefixes of
          the path are called the element's _ancestors_.

          An entity path is always fully complete: *all* of the entity's ancestors
          are required to be in the path along with the entity identifier itself.
          The only exception is that in some documented cases, the identifier in the
          last path element (for the entity) itself may be omitted. For example,
          the last path element of the key of `Mutation.insert` may have no
          identifier.

          A path can never be empty, and a path can have at most 100 elements.
        items:
          type: PathElement
        type: array
        required: false
  KindExpression:
    description: A representation of a kind.
    properties:
      name:
        description: The name of the kind.
        type: string
        required: false
  LatLng:
    description: |-
      An object representing a latitude/longitude pair. This is expressed as a pair
      of doubles representing degrees latitude and degrees longitude. Unless
      specified otherwise, this must conform to the
      <a href="http://www.unoosa.org/pdf/icg/2012/template/WGS_84.pdf">WGS84
      standard</a>. Values must be within normalized ranges.

      Example of normalization code in Python:

          def NormalizeLongitude(longitude):
            """Wraps decimal degrees longitude to [-180.0, 180.0]."""
            q, r = divmod(longitude, 360.0)
            if r > 180.0 or (r == 180.0 and q <= -1.0):
              return r - 360.0
            return r

          def NormalizeLatLng(latitude, longitude):
            """Wraps decimal degrees latitude and longitude to
            [-90.0, 90.0] and [-180.0, 180.0], respectively."""
            r = latitude % 360.0
            if r <= 90.0:
              return r, NormalizeLongitude(longitude)
            elif r >= 270.0:
              return r - 360, NormalizeLongitude(longitude)
            else:
              return 180 - r, NormalizeLongitude(longitude + 180.0)

          assert 180.0 == NormalizeLongitude(180.0)
          assert -180.0 == NormalizeLongitude(-180.0)
          assert -179.0 == NormalizeLongitude(181.0)
          assert (0.0, 0.0) == NormalizeLatLng(360.0, 0.0)
          assert (0.0, 0.0) == NormalizeLatLng(-360.0, 0.0)
          assert (85.0, 180.0) == NormalizeLatLng(95.0, 0.0)
          assert (-85.0, -170.0) == NormalizeLatLng(-95.0, 10.0)
          assert (90.0, 10.0) == NormalizeLatLng(90.0, 10.0)
          assert (-90.0, -10.0) == NormalizeLatLng(-90.0, -10.0)
          assert (0.0, -170.0) == NormalizeLatLng(-180.0, 10.0)
          assert (0.0, -170.0) == NormalizeLatLng(180.0, 10.0)
          assert (-90.0, 10.0) == NormalizeLatLng(270.0, 10.0)
          assert (90.0, 10.0) == NormalizeLatLng(-270.0, 10.0)
    properties:
      latitude:
        description: 'The latitude in degrees. It must be in the range [-90.0, +90.0].'
        format: double
        type: number
        required: false
      longitude:
        description: 'The longitude in degrees. It must be in the range [-180.0, +180.0].'
        format: double
        type: number
        required: false
  LookupRequest:
    description: The request for Datastore.Lookup.
    properties:
      keys:
        description: Keys of entities to look up.
        items:
          type: Key
        type: array
        required: false
      readOptions:
        description: The options for this lookup request.
        type: ReadOptions
        required: false
  LookupResponse:
    description: The response for Datastore.Lookup.
    properties:
      deferred:
        description: |-
          A list of keys that were not looked up due to resource constraints. The
          order of results in this field is undefined and has no relation to the
          order of the keys in the input.
        items:
          type: Key
        type: array
        required: false
      found:
        description: |-
          Entities found as `ResultType.FULL` entities. The order of results in this
          field is undefined and has no relation to the order of the keys in the
          input.
        items:
          type: EntityResult
        type: array
        required: false
      missing:
        description: |-
          Entities not found as `ResultType.KEY_ONLY` entities. The order of results
          in this field is undefined and has no relation to the order of the keys
          in the input.
        items:
          type: EntityResult
        type: array
        required: false
  Mutation:
    description: A mutation to apply to an entity.
    properties:
      baseVersion:
        description: |-
          The version of the entity that this mutation is being applied to. If this
          does not match the current version on the server, the mutation conflicts.
        format: int64
        type: string
        facets:
          format: string
        required: false
      delete:
        description: |-
          The key of the entity to delete. The entity may or may not already exist.
          Must have a complete key path and must not be reserved/read-only.
        type: Key
        required: false
      insert:
        description: |-
          The entity to insert. The entity must not already exist.
          The entity key's final path element may be incomplete.
        type: Entity
        required: false
      update:
        description: |-
          The entity to update. The entity must already exist.
          Must have a complete key path.
        type: Entity
        required: false
      upsert:
        description: |-
          The entity to upsert. The entity may or may not already exist.
          The entity key's final path element may be incomplete.
        type: Entity
        required: false
  MutationResult:
    description: The result of applying a mutation.
    properties:
      conflictDetected:
        description: |-
          Whether a conflict was detected for this mutation. Always false when a
          conflict detection strategy field is not set in the mutation.
        type: boolean
        required: false
      key:
        description: |-
          The automatically allocated key.
          Set only when the mutation allocated a key.
        type: Key
        required: false
      version:
        description: |-
          The version of the entity on the server after processing the mutation. If
          the mutation doesn't change anything on the server, then the version will
          be the version of the current entity or, if no entity is present, a version
          that is strictly greater than the version of any previous entity and less
          than the version of any possible future entity.
        format: int64
        type: string
        facets:
          format: string
        required: false
  PartitionId:
    description: |-
      A partition ID identifies a grouping of entities. The grouping is always
      by project and namespace, however the namespace ID may be empty.

      A partition ID contains several dimensions:
      project ID and namespace ID.

      Partition dimensions:

      - May be `""`.
      - Must be valid UTF-8 bytes.
      - Must have values that match regex `[A-Za-z\d\.\-_]{1,100}`
      If the value of any dimension matches regex `__.*__`, the partition is
      reserved/read-only.
      A reserved/read-only partition ID is forbidden in certain documented
      contexts.

      Foreign partition IDs (in which the project ID does
      not match the context project ID ) are discouraged.
      Reads and writes of foreign partition IDs may fail if the project is not in an active state.
    properties:
      namespaceId:
        description: 'If not empty, the ID of the namespace to which the entities belong.'
        type: string
        required: false
      projectId:
        description: The ID of the project to which the entities belong.
        type: string
        required: false
  PathElement:
    description: |-
      A (kind, ID/name) pair used to construct a key path.

      If either name or ID is set, the element is complete.
      If neither is set, the element is incomplete.
    properties:
      id:
        description: |-
          The auto-allocated ID of the entity.
          Never equal to zero. Values less than zero are discouraged and may not
          be supported in the future.
        format: int64
        type: string
        facets:
          format: string
        required: false
      kind:
        description: |-
          The kind of the entity.
          A kind matching regex `__.*__` is reserved/read-only.
          A kind must not contain more than 1500 bytes when UTF-8 encoded.
          Cannot be `""`.
        type: string
        required: false
      name:
        description: |-
          The name of the entity.
          A name matching regex `__.*__` is reserved/read-only.
          A name must not be more than 1500 bytes when UTF-8 encoded.
          Cannot be `""`.
        type: string
        required: false
  Projection:
    description: A representation of a property in a projection.
    properties:
      property:
        description: The property to project.
        type: PropertyReference
        required: false
  PropertyFilter:
    description: A filter on a specific property.
    properties:
      op:
        description: The operator to filter by.
        enum:
          - OPERATOR_UNSPECIFIED
          - LESS_THAN
          - LESS_THAN_OR_EQUAL
          - GREATER_THAN
          - GREATER_THAN_OR_EQUAL
          - EQUAL
          - HAS_ANCESTOR
        type: string
        required: false
      property:
        description: The property to filter by.
        type: PropertyReference
        required: false
      value:
        description: The value to compare the property to.
        type: Value
        required: false
  PropertyOrder:
    description: The desired order for a specific property.
    properties:
      direction:
        description: The direction to order by. Defaults to `ASCENDING`.
        enum:
          - DIRECTION_UNSPECIFIED
          - ASCENDING
          - DESCENDING
        type: string
        required: false
      property:
        description: The property to order by.
        type: PropertyReference
        required: false
  PropertyReference:
    description: A reference to a property relative to the kind expressions.
    properties:
      name:
        description: |-
          The name of the property.
          If name includes "."s, it may be interpreted as a property name path.
        type: string
        required: false
  Query:
    description: A query for entities.
    properties:
      distinctOn:
        description: |-
          The properties to make distinct. The query results will contain the first
          result for each distinct combination of values for the given properties
          (if empty, all results are returned).
        items:
          type: PropertyReference
        type: array
        required: false
      endCursor:
        description: |-
          An ending point for the query results. Query cursors are
          returned in query result batches and
          [can only be used to limit the same query](https://cloud.google.com/datastore/docs/concepts/queries#cursors_limits_and_offsets).
        format: byte
        type: string
        facets:
          format: string
        required: false
      filter:
        description: The filter to apply.
        type: Filter
        required: false
      kind:
        description: |-
          The kinds to query (if empty, returns entities of all kinds).
          Currently at most 1 kind may be specified.
        items:
          type: KindExpression
        type: array
        required: false
      limit:
        description: |-
          The maximum number of results to return. Applies after all other
          constraints. Optional.
          Unspecified is interpreted as no limit.
          Must be >= 0 if specified.
        format: int32
        type: integer
        required: false
      offset:
        description: |-
          The number of results to skip. Applies before limit, but after all other
          constraints. Optional. Must be >= 0 if specified.
        format: int32
        type: integer
        required: false
      order:
        description: 'The order to apply to the query results (if empty, order is unspecified).'
        items:
          type: PropertyOrder
        type: array
        required: false
      projection:
        description: The projection to return. Defaults to returning all properties.
        items:
          type: Projection
        type: array
        required: false
      startCursor:
        description: |-
          A starting point for the query results. Query cursors are
          returned in query result batches and
          [can only be used to continue the same query](https://cloud.google.com/datastore/docs/concepts/queries#cursors_limits_and_offsets).
        format: byte
        type: string
        facets:
          format: string
        required: false
  QueryResultBatch:
    description: A batch of results produced by a query.
    properties:
      endCursor:
        description: A cursor that points to the position after the last result in the batch.
        format: byte
        type: string
        facets:
          format: string
        required: false
      entityResultType:
        description: The result type for every entity in `entity_results`.
        enum:
          - RESULT_TYPE_UNSPECIFIED
          - FULL
          - PROJECTION
          - KEY_ONLY
        type: string
        required: false
      entityResults:
        description: The results for this batch.
        items:
          type: EntityResult
        type: array
        required: false
      moreResults:
        description: The state of the query after the current batch.
        enum:
          - MORE_RESULTS_TYPE_UNSPECIFIED
          - NOT_FINISHED
          - MORE_RESULTS_AFTER_LIMIT
          - MORE_RESULTS_AFTER_CURSOR
          - NO_MORE_RESULTS
        type: string
        required: false
      skippedCursor:
        description: |-
          A cursor that points to the position after the last skipped result.
          Will be set when `skipped_results` != 0.
        format: byte
        type: string
        facets:
          format: string
        required: false
      skippedResults:
        description: 'The number of results skipped, typically because of an offset.'
        format: int32
        type: integer
        required: false
      snapshotVersion:
        description: |-
          The version number of the snapshot this batch was returned from.
          This applies to the range of results from the query's `start_cursor` (or
          the beginning of the query if no cursor was given) to this batch's
          `end_cursor` (not the query's `end_cursor`).

          In a single transaction, subsequent query result batches for the same query
          can have a greater snapshot version number. Each batch's snapshot version
          is valid for all preceding batches.
          The value will be zero for eventually consistent queries.
        format: int64
        type: string
        facets:
          format: string
        required: false
  ReadOptions:
    description: The options shared by read requests.
    properties:
      readConsistency:
        description: |-
          The non-transactional read consistency to use.
          Cannot be set to `STRONG` for global queries.
        enum:
          - READ_CONSISTENCY_UNSPECIFIED
          - STRONG
          - EVENTUAL
        type: string
        required: false
      transaction:
        description: |-
          The identifier of the transaction in which to read. A
          transaction identifier is returned by a call to
          Datastore.BeginTransaction.
        format: byte
        type: string
        facets:
          format: string
        required: false
  RollbackRequest:
    description: The request for Datastore.Rollback.
    properties:
      transaction:
        description: |-
          The transaction identifier, returned by a call to
          Datastore.BeginTransaction.
        format: byte
        type: string
        facets:
          format: string
        required: false
  RollbackResponse:
    description: |-
      The response for Datastore.Rollback.
      (an empty message).
    properties: {}
  RunQueryRequest:
    description: The request for Datastore.RunQuery.
    properties:
      gqlQuery:
        description: The GQL query to run.
        type: GqlQuery
        required: false
      partitionId:
        description: |-
          Entities are partitioned into subsets, identified by a partition ID.
          Queries are scoped to a single partition.
          This partition ID is normalized with the standard default context
          partition ID.
        type: PartitionId
        required: false
      query:
        description: The query to run.
        type: Query
        required: false
      readOptions:
        description: The options for this query.
        type: ReadOptions
        required: false
  RunQueryResponse:
    description: The response for Datastore.RunQuery.
    properties:
      batch:
        description: A batch of query results (always present).
        type: QueryResultBatch
        required: false
      query:
        description: 'The parsed form of the `GqlQuery` from the request, if it was set.'
        type: Query
        required: false
  Value:
    description: |-
      A message that can hold any of the supported value types and associated
      metadata.
    properties:
      arrayValue:
        description: |-
          An array value.
          Cannot contain another array value.
          A `Value` instance that sets field `array_value` must not set fields
          `meaning` or `exclude_from_indexes`.
        type: ArrayValue
        required: false
      blobValue:
        description: |-
          A blob value.
          May have at most 1,000,000 bytes.
          When `exclude_from_indexes` is false, may have at most 1500 bytes.
          In JSON requests, must be base64-encoded.
        format: byte
        type: string
        facets:
          format: string
        required: false
      booleanValue:
        description: A boolean value.
        type: boolean
        required: false
      doubleValue:
        description: A double value.
        format: double
        type: number
        required: false
      entityValue:
        description: |-
          An entity value.

          - May have no key.
          - May have a key with an incomplete key path.
          - May have a reserved/read-only key.
        type: Entity
        required: false
      excludeFromIndexes:
        description: |-
          If the value should be excluded from all indexes including those defined
          explicitly.
        type: boolean
        required: false
      geoPointValue:
        description: A geo point value representing a point on the surface of Earth.
        type: LatLng
        required: false
      integerValue:
        description: An integer value.
        format: int64
        type: string
        facets:
          format: string
        required: false
      keyValue:
        description: A key value.
        type: Key
        required: false
      meaning:
        description: The `meaning` field should only be populated for backwards compatibility.
        format: int32
        type: integer
        required: false
      nullValue:
        description: A null value.
        enum:
          - NULL_VALUE
        type: string
        required: false
      stringValue:
        description: |-
          A UTF-8 encoded string value.
          When `exclude_from_indexes` is false (it is indexed) , may have at most 1500 bytes.
          Otherwise, may be set to at least 1,000,000 bytes.
        type: string
        required: false
      timestampValue:
        description: |-
          A timestamp value.
          When stored in the Datastore, precise only to microseconds;
          any additional precision is rounded down.
        format: google-datetime
        type: string
        facets:
          format: string
        required: false
traits:
  xgafv:
    queryParameters:
      $.xgafv:
        type: string
        description: V1 error format.
        enum:
          - '1'
          - '2'
  accessToken:
    queryParameters:
      access_token:
        type: string
        description: OAuth access token.
  alt:
    queryParameters:
      alt:
        type: string
        description: Data format for response.
        default: json
        enum:
          - json
          - media
          - proto
  bearerToken:
    queryParameters:
      bearer_token:
        type: string
        description: OAuth bearer token.
  callback:
    queryParameters:
      callback:
        type: string
        description: JSONP
  fields:
    queryParameters:
      fields:
        type: string
        description: Selector specifying which fields to include in a partial response.
  key:
    queryParameters:
      key:
        type: string
        description: 'API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.'
  oauthToken:
    queryParameters:
      oauth_token:
        type: string
        description: OAuth 2.0 token for the current user.
  pp:
    queryParameters:
      pp:
        type: boolean
        description: Pretty-print response.
        default: true
  prettyPrint:
    queryParameters:
      prettyPrint:
        type: boolean
        description: Returns response with indentations and line breaks.
        default: true
  quotaUser:
    queryParameters:
      quotaUser:
        type: string
        description: 'Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.'
  uploadType:
    queryParameters:
      uploadType:
        type: string
        description: 'Legacy upload protocol for media (e.g. "media", "multipart").'
  uploadProtocol:
    queryParameters:
      upload_protocol:
        type: string
        description: 'Upload protocol for media (e.g. "raw", "multipart").'
