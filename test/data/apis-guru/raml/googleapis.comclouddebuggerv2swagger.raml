#%RAML 1.0
title: Stackdriver Debugger
version: v2
baseUri: 'https://clouddebugger.googleapis.com/'
protocols:
  - HTTPS
description: Examines the call stack and variables of a running application without stopping or slowing it down.
(oas-tags-definition):
  - name: controller
  - name: debugger
annotationTypes:
  oas-tags-definition:
    type: array
    items:
      properties:
        name: string
        description?: string
        externalDocs?:
          properties:
            url: string
            description?: string
    allowedTargets: API
  oas-x-apiClientRegistration: any
  oas-x-logo: any
  oas-x-origin: any
  oas-x-preferred: any
  oas-x-providerName: any
  oas-x-serviceName: any
  oas-tags:
    type: 'string[]'
    allowedTargets: Method
  oas-externalDocs:
    properties:
      description?: string
      url: string
    allowedTargets:
      - API
      - Method
      - TypeDeclaration
  oas-info:
    properties:
      termsOfService?: string
      contact?:
        properties:
          name?: string
          url?: string
          email?: string
      license?:
        properties:
          name?: string
          url?: string
    allowedTargets: API
  oas-body-name:
    type: string
    allowedTargets: TypeDeclaration
(oas-info):
  (oas-x-apiClientRegistration):
    url: 'https://console.developers.google.com'
  (oas-x-logo):
    url: 'https://api.apis.guru/v2/cache/logo/https_cloud.google.com__static_images_new-gcp-logo.png'
  (oas-x-origin):
    format: google
    url: 'https://www.googleapis.com/discovery/v1/apis/clouddebugger/v2/rest'
    version: v1
  (oas-x-preferred): true
  (oas-x-providerName): googleapis.com
  (oas-x-serviceName): clouddebugger
  contact:
    name: Google
    url: 'https://google.com'
(oas-externalDocs):
  url: 'http://cloud.google.com/debugger'
securitySchemes:
  Oauth2:
    type: OAuth 2.0
    settings:
      authorizationUri: 'https://accounts.google.com/o/oauth2/auth'
      accessTokenUri: ''
      authorizationGrants:
        - implicit
      scopes:
        - 'https://www.googleapis.com/auth/cloud-platform'
        - 'https://www.googleapis.com/auth/cloud_debugger'
    description: Oauth 2.0 authentication
/v2:
  displayName: v2
  /debugger:
    displayName: debugger
    /debuggees:
      displayName: debuggees
      '/{debuggeeId}':
        displayName: '{debuggeeId}'
        /breakpoints:
          displayName: breakpoints
          '/{breakpointId}':
            displayName: '{breakpointId}'
            uriParameters:
              breakpointId:
                description: ID of the breakpoint to delete.
                required: true
                type: string
            get:
              displayName: clouddebugger.debugger.debuggees.breakpoints.get
              description: Gets breakpoint information.
              responses:
                '200':
                  body:
                    application/json:
                      type: GetBreakpointResponse
                  description: Successful response
              queryParameters:
                clientVersion:
                  description: 'The client version making the call. Following: `domain/type/version` (e.g., `google.com/intellij/v1`).'
                  type: string
              securedBy:
                - Oauth2:
                    scopes:
                      - 'https://www.googleapis.com/auth/cloud_debugger'
              (oas-tags):
                - debugger
            is:
              - accessToken
              - alt
              - bearerToken
              - callback
              - fields
              - key
              - oauthToken
              - pp
              - prettyPrint
              - quotaUser
              - uploadProtocol
              - uploadType
              - xgafv
            delete:
              displayName: clouddebugger.debugger.debuggees.breakpoints.delete
              description: Deletes the breakpoint from the debuggee.
              responses:
                '200':
                  body:
                    application/json:
                      type: Empty
                  description: Successful response
              queryParameters:
                clientVersion:
                  description: 'The client version making the call. Following: `domain/type/version` (e.g., `google.com/intellij/v1`).'
                  type: string
              securedBy:
                - Oauth2:
                    scopes:
                      - 'https://www.googleapis.com/auth/cloud_debugger'
              (oas-tags):
                - debugger
          /set:
            displayName: set
            post:
              displayName: clouddebugger.debugger.debuggees.breakpoints.set
              description: Sets the breakpoint to the debuggee.
              body:
                application/json:
                  type: Breakpoint
                  (oas-body-name): body
              responses:
                '200':
                  body:
                    application/json:
                      type: SetBreakpointResponse
                  description: Successful response
              queryParameters:
                clientVersion:
                  description: 'The client version making the call. Following: `domain/type/version` (e.g., `google.com/intellij/v1`).'
                  type: string
              securedBy:
                - Oauth2:
                    scopes:
                      - 'https://www.googleapis.com/auth/cloud_debugger'
              (oas-tags):
                - debugger
            is:
              - accessToken
              - alt
              - bearerToken
              - callback
              - fields
              - key
              - oauthToken
              - pp
              - prettyPrint
              - quotaUser
              - uploadProtocol
              - uploadType
              - xgafv
          get:
            displayName: clouddebugger.debugger.debuggees.breakpoints.list
            description: Lists all breakpoints for the debuggee.
            responses:
              '200':
                body:
                  application/json:
                    type: ListBreakpointsResponse
                description: Successful response
            queryParameters:
              includeAllUsers:
                description: 'When set to `true`, the response includes the list of breakpoints set by any user. Otherwise, it includes only breakpoints set by the caller.'
                type: boolean
              includeInactive:
                description: 'When set to `true`, the response includes active and inactive breakpoints. Otherwise, it includes only active breakpoints.'
                type: boolean
              action.value:
                description: Only breakpoints with the specified action will pass the filter.
                enum:
                  - CAPTURE
                  - LOG
                type: string
              stripResults:
                description: 'When set to `true`, the response breakpoints are stripped of the results fields: `stack_frames`, `evaluated_expressions` and `variable_table`.'
                type: boolean
              waitToken:
                description: 'A wait token that, if specified, blocks the call until the breakpoints list has changed, or a server selected timeout has expired. The value should be set from the last response. The error code `google.rpc.Code.ABORTED` (RPC) is returned on wait timeout, which should be called again with the same `wait_token`.'
                type: string
              clientVersion:
                description: 'The client version making the call. Following: `domain/type/version` (e.g., `google.com/intellij/v1`).'
                type: string
            securedBy:
              - Oauth2:
                  scopes:
                    - 'https://www.googleapis.com/auth/cloud_debugger'
            (oas-tags):
              - debugger
          is:
            - accessToken
            - alt
            - bearerToken
            - callback
            - fields
            - key
            - oauthToken
            - pp
            - prettyPrint
            - quotaUser
            - uploadProtocol
            - uploadType
            - xgafv
      get:
        displayName: clouddebugger.debugger.debuggees.list
        description: Lists all the debuggees that the user can set breakpoints to.
        responses:
          '200':
            body:
              application/json:
                type: ListDebuggeesResponse
            description: Successful response
        queryParameters:
          project:
            description: Project number of a Google Cloud project whose debuggees to list.
            type: string
          includeInactive:
            description: 'When set to `true`, the result includes all debuggees. Otherwise, the result includes only debuggees that are active.'
            type: boolean
          clientVersion:
            description: 'The client version making the call. Following: `domain/type/version` (e.g., `google.com/intellij/v1`).'
            type: string
        securedBy:
          - Oauth2:
              scopes:
                - 'https://www.googleapis.com/auth/cloud_debugger'
        (oas-tags):
          - debugger
      is:
        - accessToken
        - alt
        - bearerToken
        - callback
        - fields
        - key
        - oauthToken
        - pp
        - prettyPrint
        - quotaUser
        - uploadProtocol
        - uploadType
        - xgafv
  /controller:
    displayName: controller
    /debuggees:
      displayName: debuggees
      '/{debuggeeId}':
        displayName: '{debuggeeId}'
        /breakpoints:
          displayName: breakpoints
          '/{id}':
            displayName: '{id}'
            uriParameters:
              id:
                description: 'Breakpoint identifier, unique in the scope of the debuggee.'
                required: true
                type: string
            put:
              displayName: clouddebugger.controller.debuggees.breakpoints.update
              description: 'Updates the breakpoint state or mutable fields. The entire Breakpoint message must be sent back to the controller service. Updates to active breakpoint fields are only allowed if the new value does not change the breakpoint specification. Updates to the `location`, `condition` and `expression` fields should not alter the breakpoint semantics. These may only make changes such as canonicalizing a value or snapping the location to the correct line of code.'
              body:
                application/json:
                  type: UpdateActiveBreakpointRequest
                  (oas-body-name): body
              responses:
                '200':
                  body:
                    application/json:
                      type: UpdateActiveBreakpointResponse
                  description: Successful response
              securedBy:
                - Oauth2:
                    scopes:
                      - 'https://www.googleapis.com/auth/cloud_debugger'
              (oas-tags):
                - controller
            is:
              - accessToken
              - alt
              - bearerToken
              - callback
              - fields
              - key
              - oauthToken
              - pp
              - prettyPrint
              - quotaUser
              - uploadProtocol
              - uploadType
              - xgafv
          get:
            displayName: clouddebugger.controller.debuggees.breakpoints.list
            description: 'Returns the list of all active breakpoints for the debuggee. The breakpoint specification (location, condition, and expression fields) is semantically immutable, although the field values may change. For example, an agent may update the location line number to reflect the actual line where the breakpoint was set, but this doesn''t change the breakpoint semantics. This means that an agent does not need to check if a breakpoint has changed when it encounters the same breakpoint on a successive call. Moreover, an agent should remember the breakpoints that are completed until the controller removes them from the active list to avoid setting those breakpoints again.'
            responses:
              '200':
                body:
                  application/json:
                    type: ListActiveBreakpointsResponse
                description: Successful response
            queryParameters:
              waitToken:
                description: 'A wait token that, if specified, blocks the method call until the list of active breakpoints has changed, or a server selected timeout has expired. The value should be set from the last returned response.'
                type: string
              successOnTimeout:
                description: 'If set to `true`, returns `google.rpc.Code.OK` status and sets the `wait_expired` response field to `true` when the server-selected timeout has expired (recommended). If set to `false`, returns `google.rpc.Code.ABORTED` status when the server-selected timeout has expired (deprecated).'
                type: boolean
            securedBy:
              - Oauth2:
                  scopes:
                    - 'https://www.googleapis.com/auth/cloud_debugger'
            (oas-tags):
              - controller
          is:
            - accessToken
            - alt
            - bearerToken
            - callback
            - fields
            - key
            - oauthToken
            - pp
            - prettyPrint
            - quotaUser
            - uploadProtocol
            - uploadType
            - xgafv
      /register:
        displayName: register
        post:
          displayName: clouddebugger.controller.debuggees.register
          description: 'Registers the debuggee with the controller service. All agents attached to the same application should call this method with the same request content to get back the same stable `debuggee_id`. Agents should call this method again whenever `google.rpc.Code.NOT_FOUND` is returned from any controller method. This allows the controller service to disable the agent or recover from any data loss. If the debuggee is disabled by the server, the response will have `is_disabled` set to `true`.'
          body:
            application/json:
              type: RegisterDebuggeeRequest
              (oas-body-name): body
          responses:
            '200':
              body:
                application/json:
                  type: RegisterDebuggeeResponse
              description: Successful response
          securedBy:
            - Oauth2:
                scopes:
                  - 'https://www.googleapis.com/auth/cloud_debugger'
          (oas-tags):
            - controller
        is:
          - accessToken
          - alt
          - bearerToken
          - callback
          - fields
          - key
          - oauthToken
          - pp
          - prettyPrint
          - quotaUser
          - uploadProtocol
          - uploadType
          - xgafv
types:
  AliasContext:
    description: An alias to a repo revision.
    properties:
      kind:
        description: The alias kind.
        enum:
          - ANY
          - FIXED
          - MOVABLE
          - OTHER
        type: string
        required: false
      name:
        description: The alias name.
        type: string
        required: false
  Breakpoint:
    description: 'Represents the breakpoint specification, status and results.'
    properties:
      action:
        description: Action that the agent should perform when the code at the breakpoint location is hit.
        enum:
          - CAPTURE
          - LOG
        type: string
        required: false
      condition:
        description: Condition that triggers the breakpoint. The condition is a compound boolean expression composed using expressions in a programming language at the source location.
        type: string
        required: false
      createTime:
        description: Time this breakpoint was created by the server in seconds resolution.
        type: string
        required: false
      evaluatedExpressions:
        description: 'Values of evaluated expressions at breakpoint time. The evaluated expressions appear in exactly the same order they are listed in the `expressions` field. The `name` field holds the original expression text, the `value` or `members` field holds the result of the evaluated expression. If the expression cannot be evaluated, the `status` inside the `Variable` will indicate an error and contain the error text.'
        items:
          type: Variable
        type: array
        required: false
      expressions:
        description: 'List of read-only expressions to evaluate at the breakpoint location. The expressions are composed using expressions in the programming language at the source location. If the breakpoint action is `LOG`, the evaluated expressions are included in log statements.'
        items:
          type: string
        type: array
        required: false
      finalTime:
        description: Time this breakpoint was finalized as seen by the server in seconds resolution.
        type: string
        required: false
      id:
        description: 'Breakpoint identifier, unique in the scope of the debuggee.'
        type: string
        required: false
      isFinalState:
        description: 'When true, indicates that this is a final result and the breakpoint state will not change from here on.'
        type: boolean
        required: false
      labels:
        additionalProperties:
          type: string
        description: 'A set of custom breakpoint properties, populated by the agent, to be displayed to the user.'
        type: object
        required: false
      location:
        description: Breakpoint source location.
        type: SourceLocation
        required: false
      logLevel:
        description: Indicates the severity of the log. Only relevant when action is `LOG`.
        enum:
          - INFO
          - WARNING
          - ERROR
        type: string
        required: false
      logMessageFormat:
        description: 'Only relevant when action is `LOG`. Defines the message to log when the breakpoint hits. The message may include parameter placeholders `$0`, `$1`, etc. These placeholders are replaced with the evaluated value of the appropriate expression. Expressions not referenced in `log_message_format` are not logged. Example: `Message received, id = $0, count = $1` with `expressions` = `[ message.id, message.count ]`.'
        type: string
        required: false
      stackFrames:
        description: The stack at breakpoint time.
        items:
          type: StackFrame
        type: array
        required: false
      status:
        description: 'Breakpoint status. The status includes an error flag and a human readable message. This field is usually unset. The message can be either informational or an error message. Regardless, clients should always display the text message back to the user. Error status indicates complete failure of the breakpoint. Example (non-final state): `Still loading symbols...` Examples (final state): * `Invalid line number` referring to location * `Field f not found in class C` referring to condition'
        type: StatusMessage
        required: false
      userEmail:
        description: E-mail address of the user that created this breakpoint
        type: string
        required: false
      variableTable:
        description: 'The `variable_table` exists to aid with computation, memory and network traffic optimization. It enables storing a variable once and reference it from multiple variables, including variables stored in the `variable_table` itself. For example, the same `this` object, which may appear at many levels of the stack, can have all of its data stored once in this table. The stack frame variables then would hold only a reference to it. The variable `var_table_index` field is an index into this repeated field. The stored objects are nameless and get their name from the referencing variable. The effective variable is a merge of the referencing variable and the referenced variable.'
        items:
          type: Variable
        type: array
        required: false
  CloudRepoSourceContext:
    description: A CloudRepoSourceContext denotes a particular revision in a cloud repo (a repo hosted by the Google Cloud Platform).
    properties:
      aliasContext:
        description: 'An alias, which may be a branch or tag.'
        type: AliasContext
        required: false
      aliasName:
        description: 'The name of an alias (branch, tag, etc.).'
        type: string
        required: false
      repoId:
        description: The ID of the repo.
        type: RepoId
        required: false
      revisionId:
        description: A revision ID.
        type: string
        required: false
  CloudWorkspaceId:
    description: A CloudWorkspaceId is a unique identifier for a cloud workspace. A cloud workspace is a place associated with a repo where modified files can be stored before they are committed.
    properties:
      name:
        description: The unique name of the workspace within the repo. This is the name chosen by the client in the Source API's CreateWorkspace method.
        type: string
        required: false
      repoId:
        description: The ID of the repo containing the workspace.
        type: RepoId
        required: false
  CloudWorkspaceSourceContext:
    description: A CloudWorkspaceSourceContext denotes a workspace at a particular snapshot.
    properties:
      snapshotId:
        description: The ID of the snapshot. An empty snapshot_id refers to the most recent snapshot.
        type: string
        required: false
      workspaceId:
        description: The ID of the workspace.
        type: CloudWorkspaceId
        required: false
  Debuggee:
    description: 'Represents the application to debug. The application may include one or more replicated processes executing the same code. Each of these processes is attached with a debugger agent, carrying out the debugging commands. The agents attached to the same debuggee are identified by using exactly the same field values when registering.'
    properties:
      agentVersion:
        description: 'Version ID of the agent release. The version ID is structured as following: `domain/type/vmajor.minor` (for example `google.com/gcp-java/v1.1`).'
        type: string
        required: false
      description:
        description: 'Human readable description of the debuggee. Including a human-readable project name, environment name and version information is recommended.'
        type: string
        required: false
      extSourceContexts:
        description: References to the locations and revisions of the source code used in the deployed application. Contexts describing a remote repo related to the source code have a `category` label of `remote_repo`. Source snapshot source contexts have a `category` of `snapshot`.
        items:
          type: ExtendedSourceContext
        type: array
        required: false
      id:
        description: Unique identifier for the debuggee generated by the controller service.
        type: string
        required: false
      isDisabled:
        description: 'If set to `true`, indicates that the agent should disable itself and detach from the debuggee.'
        type: boolean
        required: false
      isInactive:
        description: 'If set to `true`, indicates that the debuggee is considered as inactive by the Controller service.'
        type: boolean
        required: false
      labels:
        additionalProperties:
          type: string
        description: 'A set of custom debuggee properties, populated by the agent, to be displayed to the user.'
        type: object
        required: false
      project:
        description: Project the debuggee is associated with. Use the project number when registering a Google Cloud Platform project.
        type: string
        required: false
      sourceContexts:
        description: 'References to the locations and revisions of the source code used in the deployed application. NOTE: This field is deprecated. Consumers should use `ext_source_contexts` if it is not empty. Debug agents should populate both this field and `ext_source_contexts`.'
        items:
          type: SourceContext
        type: array
        required: false
      status:
        description: Human readable message to be displayed to the user about this debuggee. Absence of this field indicates no status. The message can be either informational or an error status.
        type: StatusMessage
        required: false
      uniquifier:
        description: Debuggee uniquifier within the project. Any string that identifies the application within the project can be used. Including environment and version or build IDs is recommended.
        type: string
        required: false
  Empty:
    description: 'A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs. A typical example is to use it as the request or the response type of an API method. For instance: service Foo { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty); } The JSON representation for `Empty` is empty JSON object `{}`.'
    type: object
  ExtendedSourceContext:
    description: An ExtendedSourceContext is a SourceContext combined with additional details describing the context.
    properties:
      context:
        description: Any source context.
        type: SourceContext
        required: false
      labels:
        additionalProperties:
          type: string
        description: Labels with user defined metadata.
        type: object
        required: false
  FormatMessage:
    description: Represents a message with parameters.
    properties:
      format:
        description: 'Format template for the message. The `format` uses placeholders `$0`, `$1`, etc. to reference parameters. `$$` can be used to denote the `$` character. Examples: * `Failed to load ''$0'' which helps debug $1 the first time it is loaded. Again, $0 is very important.` * `Please pay $$10 to use $0 instead of $1.`'
        type: string
        required: false
      parameters:
        description: Optional parameters to be embedded into the message.
        items:
          type: string
        type: array
        required: false
  GerritSourceContext:
    description: A SourceContext referring to a Gerrit project.
    properties:
      aliasContext:
        description: 'An alias, which may be a branch or tag.'
        type: AliasContext
        required: false
      aliasName:
        description: 'The name of an alias (branch, tag, etc.).'
        type: string
        required: false
      gerritProject:
        description: 'The full project name within the host. Projects may be nested, so "project/subproject" is a valid project name. The "repo name" is hostURI/project.'
        type: string
        required: false
      hostUri:
        description: The URI of a running Gerrit instance.
        type: string
        required: false
      revisionId:
        description: A revision (commit) ID.
        type: string
        required: false
  GetBreakpointResponse:
    description: Response for getting breakpoint information.
    properties:
      breakpoint:
        description: Complete breakpoint state. The fields `id` and `location` are guaranteed to be set.
        type: Breakpoint
        required: false
  GitSourceContext:
    description: A GitSourceContext denotes a particular revision in a third party Git repository (e.g. GitHub).
    properties:
      revisionId:
        description: Git commit hash. required.
        type: string
        required: false
      url:
        description: Git repository URL.
        type: string
        required: false
  ListActiveBreakpointsResponse:
    description: Response for listing active breakpoints.
    properties:
      breakpoints:
        description: List of all active breakpoints. The fields `id` and `location` are guaranteed to be set on each breakpoint.
        items:
          type: Breakpoint
        type: array
        required: false
      nextWaitToken:
        description: A wait token that can be used in the next method call to block until the list of breakpoints changes.
        type: string
        required: false
      waitExpired:
        description: The `wait_expired` field is set to true by the server when the request times out and the field `success_on_timeout` is set to true.
        type: boolean
        required: false
  ListBreakpointsResponse:
    description: Response for listing breakpoints.
    properties:
      breakpoints:
        description: List of all breakpoints with complete state. The fields `id` and `location` are guaranteed to be set on each breakpoint.
        items:
          type: Breakpoint
        type: array
        required: false
      nextWaitToken:
        description: A wait token that can be used in the next call to `list` (REST) or `ListBreakpoints` (RPC) to block until the list of breakpoints has changes.
        type: string
        required: false
  ListDebuggeesResponse:
    description: Response for listing debuggees.
    properties:
      debuggees:
        description: List of debuggees accessible to the calling user. Note that the `description` field is the only human readable field that should be displayed to the user. The fields `debuggee.id` and `description` fields are guaranteed to be set on each debuggee.
        items:
          type: Debuggee
        type: array
        required: false
  ProjectRepoId:
    description: Selects a repo using a Google Cloud Platform project ID (e.g. winged-cargo-31) and a repo name within that project.
    properties:
      projectId:
        description: The ID of the project.
        type: string
        required: false
      repoName:
        description: The name of the repo. Leave empty for the default repo.
        type: string
        required: false
  RegisterDebuggeeRequest:
    description: Request to register a debuggee.
    properties:
      debuggee:
        description: 'Debuggee information to register. The fields `project`, `uniquifier`, `description` and `agent_version` of the debuggee must be set.'
        type: Debuggee
        required: false
  RegisterDebuggeeResponse:
    description: Response for registering a debuggee.
    properties:
      debuggee:
        description: Debuggee resource. The field `id` is guranteed to be set (in addition to the echoed fields).
        type: Debuggee
        required: false
  RepoId:
    description: A unique identifier for a cloud repo.
    properties:
      projectRepoId:
        description: A combination of a project ID and a repo name.
        type: ProjectRepoId
        required: false
      uid:
        description: 'A server-assigned, globally unique identifier.'
        type: string
        required: false
  SetBreakpointResponse:
    description: Response for setting a breakpoint.
    properties:
      breakpoint:
        description: Breakpoint resource. The field `id` is guaranteed to be set (in addition to the echoed fileds).
        type: Breakpoint
        required: false
  SourceContext:
    description: A SourceContext is a reference to a tree of files. A SourceContext together with a path point to a unique revision of a single file or directory.
    properties:
      cloudRepo:
        description: A SourceContext referring to a revision in a cloud repo.
        type: CloudRepoSourceContext
        required: false
      cloudWorkspace:
        description: A SourceContext referring to a snapshot in a cloud workspace.
        type: CloudWorkspaceSourceContext
        required: false
      gerrit:
        description: A SourceContext referring to a Gerrit project.
        type: GerritSourceContext
        required: false
      git:
        description: A SourceContext referring to any third party Git repo (e.g. GitHub).
        type: GitSourceContext
        required: false
  SourceLocation:
    description: Represents a location in the source code.
    properties:
      line:
        description: Line inside the file. The first line in the file has the value `1`.
        format: int32
        type: integer
        required: false
      path:
        description: Path to the source file within the source context of the target binary.
        type: string
        required: false
  StackFrame:
    description: Represents a stack frame context.
    properties:
      arguments:
        description: Set of arguments passed to this function. Note that this might not be populated for all stack frames.
        items:
          type: Variable
        type: array
        required: false
      function:
        description: Demangled function name at the call site.
        type: string
        required: false
      locals:
        description: Set of local variables at the stack frame location. Note that this might not be populated for all stack frames.
        items:
          type: Variable
        type: array
        required: false
      location:
        description: Source location of the call site.
        type: SourceLocation
        required: false
  StatusMessage:
    description: 'Represents a contextual status message. The message can indicate an error or informational status, and refer to specific parts of the containing object. For example, the `Breakpoint.status` field can indicate an error referring to the `BREAKPOINT_SOURCE_LOCATION` with the message `Location not found`.'
    properties:
      description:
        description: Status message text.
        type: FormatMessage
        required: false
      isError:
        description: Distinguishes errors from informational messages.
        type: boolean
        required: false
      refersTo:
        description: Reference to which the message applies.
        enum:
          - UNSPECIFIED
          - BREAKPOINT_SOURCE_LOCATION
          - BREAKPOINT_CONDITION
          - BREAKPOINT_EXPRESSION
          - VARIABLE_NAME
          - VARIABLE_VALUE
        type: string
        required: false
  UpdateActiveBreakpointRequest:
    description: Request to update an active breakpoint.
    properties:
      breakpoint:
        description: Updated breakpoint information. The field 'id' must be set.
        type: Breakpoint
        required: false
  UpdateActiveBreakpointResponse:
    description: Response for updating an active breakpoint. The message is defined to allow future extensions.
    type: object
  Variable:
    description: |-
      Represents a variable or an argument possibly of a compound object type. Note how the following variables are represented: 1) A simple variable: int x = 5 { name: "x", value: "5", type: "int" } // Captured variable 2) A compound object: struct T { int m1; int m2; }; T x = { 3, 7 }; { // Captured variable name: "x", type: "T", members { name: "m1", value: "3", type: "int" }, members { name: "m2", value: "7", type: "int" } } 3) A pointer where the pointee was captured: T x = { 3, 7 }; T* p = &x; { // Captured variable name: "p", type: "T*", value: "0x00500500", members { name: "m1", value: "3", type: "int" }, members { name: "m2", value: "7", type: "int" } } 4) A pointer where the pointee was not captured: T* p = new T; { // Captured variable name: "p", type: "T*", value: "0x00400400" status { is_error: true, description { format: "unavailable" } } } The status should describe the reason for the missing value, such as ``, ``, `
      `. Note that a null pointer should not have members. 5) An unnamed value: int* p = new int(7); { // Captured variable name: "p", value: "0x00500500", type: "int*", members { value: "7", type: "int" } } 6) An unnamed pointer where the pointee was not captured: int* p = new int(7); int** pp = &p; { // Captured variable name: "pp", value: "0x00500500", type: "int**", members { value: "0x00400400", type: "int*" status { is_error: true, description: { format: "unavailable" } } } } } To optimize computation, memory and network traffic, variables that repeat in the output multiple times can be stored once in a shared variable table and be referenced using the `var_table_index` field. The variables stored in the shared table are nameless and are essentially a partition of the complete variable. To reconstruct the complete variable, merge the referencing variable with the referenced variable. When using the shared variable table, the following variables: T x = { 3, 7 }; T* p = &x; T& r = x; { name: "x", var_table_index: 3, type: "T" } // Captured variables { name: "p", value "0x00500500", type="T*", var_table_index: 3 } { name: "r", type="T&", var_table_index: 3 } { // Shared variable table entry #3: members { name: "m1", value: "3", type: "int" }, members { name: "m2", value: "7", type: "int" } } Note that the pointer address is stored with the referencing variable and not with the referenced variable. This allows the referenced variable to be shared between pointers and references. The type field is optional. The debugger agent may or may not support it.
    properties:
      members:
        description: Members contained or pointed to by the variable.
        items:
          type: Variable
        type: array
        required: false
      name:
        description: 'Name of the variable, if any.'
        type: string
        required: false
      status:
        description: 'Status associated with the variable. This field will usually stay unset. A status of a single variable only applies to that variable or expression. The rest of breakpoint data still remains valid. Variables might be reported in error state even when breakpoint is not in final state. The message may refer to variable name with `refers_to` set to `VARIABLE_NAME`. Alternatively `refers_to` will be set to `VARIABLE_VALUE`. In either case variable value and members will be unset. Example of error message applied to name: `Invalid expression syntax`. Example of information message applied to value: `Not captured`. Examples of error message applied to value: * `Malformed string`, * `Field f not found in class C` * `Null pointer dereference`'
        type: StatusMessage
        required: false
      type:
        description: 'Variable type (e.g. `MyClass`). If the variable is split with `var_table_index`, `type` goes next to `value`. The interpretation of a type is agent specific. It is recommended to include the dynamic type rather than a static type of an object.'
        type: string
        required: false
      value:
        description: Simple value of the variable.
        type: string
        required: false
      varTableIndex:
        description: Reference to a variable in the shared variable table. More than one variable can reference the same variable in the table. The `var_table_index` field is an index into `variable_table` in Breakpoint.
        format: int32
        type: integer
        required: false
traits:
  xgafv:
    queryParameters:
      $.xgafv:
        type: string
        description: V1 error format.
  accessToken:
    queryParameters:
      access_token:
        type: string
        description: OAuth access token.
  alt:
    queryParameters:
      alt:
        type: string
        description: Data format for response.
        default: json
  bearerToken:
    queryParameters:
      bearer_token:
        type: string
        description: OAuth bearer token.
  callback:
    queryParameters:
      callback:
        type: string
        description: JSONP
  fields:
    queryParameters:
      fields:
        type: string
        description: Selector specifying which fields to include in a partial response.
  key:
    queryParameters:
      key:
        type: string
        description: 'API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.'
  oauthToken:
    queryParameters:
      oauth_token:
        type: string
        description: OAuth 2.0 token for the current user.
  pp:
    queryParameters:
      pp:
        type: boolean
        description: Pretty-print response.
        default: true
  prettyPrint:
    queryParameters:
      prettyPrint:
        type: boolean
        description: Returns response with indentations and line breaks.
        default: true
  quotaUser:
    queryParameters:
      quotaUser:
        type: string
        description: 'Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.'
  uploadType:
    queryParameters:
      uploadType:
        type: string
        description: 'Legacy upload protocol for media (e.g. "media", "multipart").'
  uploadProtocol:
    queryParameters:
      upload_protocol:
        type: string
        description: 'Upload protocol for media (e.g. "raw", "multipart").'
