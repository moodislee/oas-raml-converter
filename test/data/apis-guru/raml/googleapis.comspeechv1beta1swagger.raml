#%RAML 1.0
title: Google Cloud Speech
version: v1beta1
baseUri: 'https://speech.googleapis.com/'
protocols:
  - HTTPS
description: Google Cloud Speech API.
(oas-tags-definition):
  - name: operations
  - name: speech
annotationTypes:
  oas-tags-definition:
    type: array
    items:
      properties:
        name: string
        description?: string
        externalDocs?:
          properties:
            url: string
            description?: string
    allowedTargets: API
  oas-x-apiClientRegistration: any
  oas-x-logo: any
  oas-x-origin: any
  oas-x-preferred: any
  oas-x-providerName: any
  oas-x-serviceName: any
  oas-tags:
    type: 'string[]'
    allowedTargets: Method
  oas-externalDocs:
    properties:
      description?: string
      url: string
    allowedTargets:
      - API
      - Method
      - TypeDeclaration
  oas-info:
    properties:
      termsOfService?: string
      contact?:
        properties:
          name?: string
          url?: string
          email?: string
      license?:
        properties:
          name?: string
          url?: string
    allowedTargets: API
  oas-body-name:
    type: string
    allowedTargets: TypeDeclaration
(oas-info):
  (oas-x-apiClientRegistration):
    url: 'https://console.developers.google.com'
  (oas-x-logo):
    url: 'https://api.apis.guru/v2/cache/logo/https_www.google.com_images_branding_googlelogo_2x_googlelogo_color_272x92dp.png'
  (oas-x-origin):
    format: google
    url: 'https://speech.googleapis.com/$discovery/rest?version=v1beta1'
    version: v1
  (oas-x-preferred): true
  (oas-x-providerName): googleapis.com
  (oas-x-serviceName): speech
  contact:
    name: Google
    url: 'https://google.com'
(oas-externalDocs):
  url: 'https://cloud.google.com/speech/'
securitySchemes:
  Oauth2:
    type: OAuth 2.0
    settings:
      authorizationUri: 'https://accounts.google.com/o/oauth2/auth'
      accessTokenUri: ''
      authorizationGrants:
        - implicit
      scopes:
        - 'https://www.googleapis.com/auth/cloud-platform'
    description: Oauth 2.0 authentication
/v1beta1:
  displayName: v1beta1
  '/speech:syncrecognize':
    displayName: 'speech:syncrecognize'
    post:
      displayName: speech.speech.syncrecognize
      description: |-
        Performs synchronous speech recognition: receive results after all audio
        has been sent and processed.
      body:
        application/json:
          type: SyncRecognizeRequest
          (oas-body-name): body
      responses:
        '200':
          body:
            application/json:
              type: SyncRecognizeResponse
          description: Successful response
      securedBy:
        - Oauth2:
            scopes:
              - 'https://www.googleapis.com/auth/cloud-platform'
      (oas-tags):
        - speech
    is:
      - accessToken
      - prettyPrint
      - key
      - quotaUser
      - pp
      - fields
      - alt
      - xgafv
      - callback
      - oauthToken
      - uploadType
      - bearerToken
      - uploadProtocol
  '/speech:asyncrecognize':
    displayName: 'speech:asyncrecognize'
    post:
      displayName: speech.speech.asyncrecognize
      description: |-
        Performs asynchronous speech recognition: receive results via the
        google.longrunning.Operations interface. Returns either an
        `Operation.error` or an `Operation.response` which contains
        an `AsyncRecognizeResponse` message.
      body:
        application/json:
          type: AsyncRecognizeRequest
          (oas-body-name): body
      responses:
        '200':
          body:
            application/json:
              type: Operation
          description: Successful response
      securedBy:
        - Oauth2:
            scopes:
              - 'https://www.googleapis.com/auth/cloud-platform'
      (oas-tags):
        - speech
    is:
      - accessToken
      - prettyPrint
      - key
      - quotaUser
      - pp
      - fields
      - alt
      - xgafv
      - callback
      - oauthToken
      - uploadType
      - bearerToken
      - uploadProtocol
  /operations:
    displayName: operations
    '/{name}:cancel':
      displayName: '{name}:cancel'
      uriParameters:
        name:
          description: The name of the operation resource to be cancelled.
          required: true
          type: string
      post:
        displayName: speech.operations.cancel
        description: |-
          Starts asynchronous cancellation on a long-running operation.  The server
          makes a best effort to cancel the operation, but success is not
          guaranteed.  If the server doesn't support this method, it returns
          `google.rpc.Code.UNIMPLEMENTED`.  Clients can use
          Operations.GetOperation or
          other methods to check whether the cancellation succeeded or whether the
          operation completed despite cancellation. On successful cancellation,
          the operation is not deleted; instead, it becomes an operation with
          an Operation.error value with a google.rpc.Status.code of 1,
          corresponding to `Code.CANCELLED`.
        body:
          application/json:
            type: CancelOperationRequest
            (oas-body-name): body
        responses:
          '200':
            body:
              application/json:
                type: Empty
            description: Successful response
        securedBy:
          - Oauth2:
              scopes:
                - 'https://www.googleapis.com/auth/cloud-platform'
        (oas-tags):
          - operations
      is:
        - accessToken
        - prettyPrint
        - key
        - quotaUser
        - pp
        - fields
        - alt
        - xgafv
        - callback
        - oauthToken
        - uploadType
        - bearerToken
        - uploadProtocol
    '/{name}':
      displayName: '{name}'
      uriParameters:
        name:
          description: The name of the operation resource to be deleted.
          required: true
          type: string
      get:
        displayName: speech.operations.get
        description: |-
          Gets the latest state of a long-running operation.  Clients can use this
          method to poll the operation result at intervals as recommended by the API
          service.
        responses:
          '200':
            body:
              application/json:
                type: Operation
            description: Successful response
        securedBy:
          - Oauth2:
              scopes:
                - 'https://www.googleapis.com/auth/cloud-platform'
        (oas-tags):
          - operations
      is:
        - accessToken
        - prettyPrint
        - key
        - quotaUser
        - pp
        - fields
        - alt
        - xgafv
        - callback
        - oauthToken
        - uploadType
        - bearerToken
        - uploadProtocol
      delete:
        displayName: speech.operations.delete
        description: |-
          Deletes a long-running operation. This method indicates that the client is
          no longer interested in the operation result. It does not cancel the
          operation. If the server doesn't support this method, it returns
          `google.rpc.Code.UNIMPLEMENTED`.
        responses:
          '200':
            body:
              application/json:
                type: Empty
            description: Successful response
        securedBy:
          - Oauth2:
              scopes:
                - 'https://www.googleapis.com/auth/cloud-platform'
        (oas-tags):
          - operations
    get:
      displayName: speech.operations.list
      description: |-
        Lists operations that match the specified filter in the request. If the
        server doesn't support this method, it returns `UNIMPLEMENTED`.

        NOTE: the `name` binding below allows API services to override the binding
        to use different resource name schemes, such as `users/*/operations`.
      responses:
        '200':
          body:
            application/json:
              type: ListOperationsResponse
          description: Successful response
      queryParameters:
        pageSize:
          description: The standard list page size.
          type: integer
        filter:
          description: The standard list filter.
          type: string
        name:
          description: The name of the operation collection.
          type: string
        pageToken:
          description: The standard list page token.
          type: string
      securedBy:
        - Oauth2:
            scopes:
              - 'https://www.googleapis.com/auth/cloud-platform'
      (oas-tags):
        - operations
    is:
      - accessToken
      - prettyPrint
      - key
      - quotaUser
      - pp
      - fields
      - alt
      - xgafv
      - callback
      - oauthToken
      - uploadType
      - bearerToken
      - uploadProtocol
types:
  AsyncRecognizeRequest:
    description: |-
      `AsyncRecognizeRequest` is the top-level message sent by the client for
      the `AsyncRecognize` method.
    properties:
      audio:
        description: '[Required] The audio data to be recognized.'
        type: RecognitionAudio
        required: false
      config:
        description: |-
          [Required] The `config` message provides information to the recognizer
          that specifies how to process the request.
        type: RecognitionConfig
        required: false
  CancelOperationRequest:
    description: The request message for Operations.CancelOperation.
    properties: {}
  Empty:
    description: |-
      A generic empty message that you can re-use to avoid defining duplicated
      empty messages in your APIs. A typical example is to use it as the request
      or the response type of an API method. For instance:

          service Foo {
            rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty);
          }

      The JSON representation for `Empty` is empty JSON object `{}`.
    properties: {}
  ListOperationsResponse:
    description: The response message for Operations.ListOperations.
    properties:
      nextPageToken:
        description: The standard List next-page token.
        type: string
        required: false
      operations:
        description: A list of operations that matches the specified filter in the request.
        items:
          type: Operation
        type: array
        required: false
  Operation:
    description: |-
      This resource represents a long-running operation that is the result of a
      network API call.
    properties:
      done:
        description: |-
          If the value is `false`, it means the operation is still in progress.
          If true, the operation is completed, and either `error` or `response` is
          available.
        type: boolean
        required: false
      error:
        description: The error result of the operation in case of failure or cancellation.
        type: Status
        required: false
      metadata:
        additionalProperties:
          description: Properties of the object. Contains field @type with type URL.
        description: |-
          Service-specific metadata associated with the operation.  It typically
          contains progress information and common metadata such as create time.
          Some services might not provide such metadata.  Any method that returns a
          long-running operation should document the metadata type, if any.
        type: object
        required: false
      name:
        description: |-
          The server-assigned name, which is only unique within the same service that
          originally returns it. If you use the default HTTP mapping, the
          `name` should have the format of `operations/some/unique/name`.
        type: string
        required: false
      response:
        additionalProperties:
          description: Properties of the object. Contains field @type with type URL.
        description: |-
          The normal response of the operation in case of success.  If the original
          method returns no data on success, such as `Delete`, the response is
          `google.protobuf.Empty`.  If the original method is standard
          `Get`/`Create`/`Update`, the response should be the resource.  For other
          methods, the response should have the type `XxxResponse`, where `Xxx`
          is the original method name.  For example, if the original method name
          is `TakeSnapshot()`, the inferred response type is
          `TakeSnapshotResponse`.
        type: object
        required: false
  RecognitionAudio:
    description: |-
      Contains audio data in the encoding specified in the `RecognitionConfig`.
      Either `content` or `uri` must be supplied. Supplying both or neither
      returns google.rpc.Code.INVALID_ARGUMENT. See
      [audio limits](https://cloud.google.com/speech/limits#content).
    properties:
      content:
        description: |-
          The audio data bytes encoded as specified in
          `RecognitionConfig`. Note: as with all bytes fields, protobuffers use a
          pure binary representation, whereas JSON representations use base64.
        format: byte
        type: string
        facets:
          format: string
        required: false
      uri:
        description: |-
          URI that points to a file that contains audio data bytes as specified in
          `RecognitionConfig`. Currently, only Google Cloud Storage URIs are
          supported, which must be specified in the following format:
          `gs://bucket_name/object_name` (other URI formats return
          google.rpc.Code.INVALID_ARGUMENT). For more information, see
          [Request URIs](https://cloud.google.com/storage/docs/reference-uris).
        type: string
        required: false
  RecognitionConfig:
    description: |-
      The `RecognitionConfig` message provides information to the recognizer
      that specifies how to process the request.
    properties:
      encoding:
        description: '[Required] Encoding of audio data sent in all `RecognitionAudio` messages.'
        enum:
          - ENCODING_UNSPECIFIED
          - LINEAR16
          - FLAC
          - MULAW
          - AMR
          - AMR_WB
        type: string
        required: false
      languageCode:
        description: |-
          [Optional] The language of the supplied audio as a BCP-47 language tag.
          Example: "en-GB"  https://www.rfc-editor.org/rfc/bcp/bcp47.txt
          If omitted, defaults to "en-US". See
          [Language Support](https://cloud.google.com/speech/docs/languages)
          for a list of the currently supported language codes.
        type: string
        required: false
      maxAlternatives:
        description: |-
          [Optional] Maximum number of recognition hypotheses to be returned.
          Specifically, the maximum number of `SpeechRecognitionAlternative` messages
          within each `SpeechRecognitionResult`.
          The server may return fewer than `max_alternatives`.
          Valid values are `0`-`30`. A value of `0` or `1` will return a maximum of
          `1`. If omitted, defaults to `1`.
        format: int32
        type: integer
        required: false
      profanityFilter:
        description: |-
          [Optional] If set to `true`, the server will attempt to filter out
          profanities, replacing all but the initial character in each filtered word
          with asterisks, e.g. "f***". If set to `false` or omitted, profanities
          won't be filtered out.
        type: boolean
        required: false
      sampleRate:
        description: |-
          [Required] Sample rate in Hertz of the audio data sent in all
          `RecognitionAudio` messages. Valid values are: 8000-48000.
          16000 is optimal. For best results, set the sampling rate of the audio
          source to 16000 Hz. If that's not possible, use the native sample rate of
          the audio source (instead of re-sampling).
        format: int32
        type: integer
        required: false
      speechContext:
        description: '[Optional] A means to provide context to assist the speech recognition.'
        type: SpeechContext
        required: false
  SpeechContext:
    description: |-
      Provides "hints" to the speech recognizer to favor specific words and phrases
      in the results.
    properties:
      phrases:
        description: |-
          [Optional] A list of strings containing words and phrases "hints" so that
          the speech recognition is more likely to recognize them. This can be used
          to improve the accuracy for specific words and phrases, for example, if
          specific commands are typically spoken by the user. This can also be used
          to add additional words to the vocabulary of the recognizer. See
          [usage limits](https://cloud.google.com/speech/limits#content).
        items:
          type: string
        type: array
        required: false
  SpeechRecognitionAlternative:
    description: Alternative hypotheses (a.k.a. n-best list).
    properties:
      confidence:
        description: |-
          [Output-only] The confidence estimate between 0.0 and 1.0. A higher number
          means the system is more confident that the recognition is correct.
          This field is typically provided only for the top hypothesis, and only for
          `is_final=true` results.
          The default of 0.0 is a sentinel value indicating confidence was not set.
        format: float
        type: number
        required: false
      transcript:
        description: '[Output-only] Transcript text representing the words that the user spoke.'
        type: string
        required: false
  SpeechRecognitionResult:
    description: A speech recognition result corresponding to a portion of the audio.
    properties:
      alternatives:
        description: |-
          [Output-only] May contain one or more recognition hypotheses (up to the
          maximum specified in `max_alternatives`).
        items:
          type: SpeechRecognitionAlternative
        type: array
        required: false
  Status:
    description: |-
      The `Status` type defines a logical error model that is suitable for different
      programming environments, including REST APIs and RPC APIs. It is used by
      [gRPC](https://github.com/grpc). The error model is designed to be:

      - Simple to use and understand for most users
      - Flexible enough to meet unexpected needs

      # Overview

      The `Status` message contains three pieces of data: error code, error message,
      and error details. The error code should be an enum value of
      google.rpc.Code, but it may accept additional error codes if needed.  The
      error message should be a developer-facing English message that helps
      developers *understand* and *resolve* the error. If a localized user-facing
      error message is needed, put the localized message in the error details or
      localize it in the client. The optional error details may contain arbitrary
      information about the error. There is a predefined set of error detail types
      in the package `google.rpc` which can be used for common error conditions.

      # Language mapping

      The `Status` message is the logical representation of the error model, but it
      is not necessarily the actual wire format. When the `Status` message is
      exposed in different client libraries and different wire protocols, it can be
      mapped differently. For example, it will likely be mapped to some exceptions
      in Java, but more likely mapped to some error codes in C.

      # Other uses

      The error model and the `Status` message can be used in a variety of
      environments, either with or without APIs, to provide a
      consistent developer experience across different environments.

      Example uses of this error model include:

      - Partial errors. If a service needs to return partial errors to the client,
          it may embed the `Status` in the normal response to indicate the partial
          errors.

      - Workflow errors. A typical workflow has multiple steps. Each step may
          have a `Status` message for error reporting purpose.

      - Batch operations. If a client uses batch request and batch response, the
          `Status` message should be used directly inside batch response, one for
          each error sub-response.

      - Asynchronous operations. If an API call embeds asynchronous operation
          results in its response, the status of those operations should be
          represented directly using the `Status` message.

      - Logging. If some API errors are stored in logs, the message `Status` could
          be used directly after any stripping needed for security/privacy reasons.
    properties:
      code:
        description: 'The status code, which should be an enum value of google.rpc.Code.'
        format: int32
        type: integer
        required: false
      details:
        description: |-
          A list of messages that carry the error details.  There will be a
          common set of message types for APIs to use.
        items:
          additionalProperties:
            description: Properties of the object. Contains field @type with type URL.
          type: object
        type: array
        required: false
      message:
        description: |-
          A developer-facing error message, which should be in English. Any
          user-facing error message should be localized and sent in the
          google.rpc.Status.details field, or localized by the client.
        type: string
        required: false
  SyncRecognizeRequest:
    description: |-
      `SyncRecognizeRequest` is the top-level message sent by the client for
      the `SyncRecognize` method.
    properties:
      audio:
        description: '[Required] The audio data to be recognized.'
        type: RecognitionAudio
        required: false
      config:
        description: |-
          [Required] The `config` message provides information to the recognizer
          that specifies how to process the request.
        type: RecognitionConfig
        required: false
  SyncRecognizeResponse:
    description: |-
      `SyncRecognizeResponse` is the only message returned to the client by
      `SyncRecognize`. It contains the result as zero or more sequential
      `SpeechRecognitionResult` messages.
    properties:
      results:
        description: |-
          [Output-only] Sequential list of transcription results corresponding to
          sequential portions of audio.
        items:
          type: SpeechRecognitionResult
        type: array
        required: false
traits:
  xgafv:
    queryParameters:
      $.xgafv:
        type: string
        description: V1 error format.
        enum:
          - '1'
          - '2'
  accessToken:
    queryParameters:
      access_token:
        type: string
        description: OAuth access token.
  alt:
    queryParameters:
      alt:
        type: string
        description: Data format for response.
        default: json
        enum:
          - json
          - media
          - proto
  bearerToken:
    queryParameters:
      bearer_token:
        type: string
        description: OAuth bearer token.
  callback:
    queryParameters:
      callback:
        type: string
        description: JSONP
  fields:
    queryParameters:
      fields:
        type: string
        description: Selector specifying which fields to include in a partial response.
  key:
    queryParameters:
      key:
        type: string
        description: 'API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.'
  oauthToken:
    queryParameters:
      oauth_token:
        type: string
        description: OAuth 2.0 token for the current user.
  pp:
    queryParameters:
      pp:
        type: boolean
        description: Pretty-print response.
        default: true
  prettyPrint:
    queryParameters:
      prettyPrint:
        type: boolean
        description: Returns response with indentations and line breaks.
        default: true
  quotaUser:
    queryParameters:
      quotaUser:
        type: string
        description: 'Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.'
  uploadType:
    queryParameters:
      uploadType:
        type: string
        description: 'Legacy upload protocol for media (e.g. "media", "multipart").'
  uploadProtocol:
    queryParameters:
      upload_protocol:
        type: string
        description: 'Upload protocol for media (e.g. "raw", "multipart").'
