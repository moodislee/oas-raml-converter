#%RAML 1.0
title: Google Sheets
version: v4
baseUri: 'https://sheets.googleapis.com/'
protocols:
  - HTTPS
description: Reads and writes Google Sheets.
(oas-tags-definition):
  - name: spreadsheets
annotationTypes:
  oas-tags-definition:
    type: array
    items:
      properties:
        name: string
        description?: string
        externalDocs?:
          properties:
            url: string
            description?: string
    allowedTargets: API
  oas-x-apiClientRegistration: any
  oas-x-logo: any
  oas-x-origin: any
  oas-x-preferred: any
  oas-x-providerName: any
  oas-x-serviceName: any
  oas-tags:
    type: 'string[]'
    allowedTargets: Method
  oas-externalDocs:
    properties:
      description?: string
      url: string
    allowedTargets:
      - API
      - Method
      - TypeDeclaration
  oas-info:
    properties:
      termsOfService?: string
      contact?:
        properties:
          name?: string
          url?: string
          email?: string
      license?:
        properties:
          name?: string
          url?: string
    allowedTargets: API
  oas-body-name:
    type: string
    allowedTargets: TypeDeclaration
(oas-info):
  (oas-x-apiClientRegistration):
    url: 'https://console.developers.google.com'
  (oas-x-logo):
    url: 'https://api.apis.guru/v2/cache/logo/https_www.google.com_images_branding_googlelogo_2x_googlelogo_color_272x92dp.png'
  (oas-x-origin):
    format: google
    url: 'https://sheets.googleapis.com/$discovery/rest?version=v4'
    version: v1
  (oas-x-preferred): true
  (oas-x-providerName): googleapis.com
  (oas-x-serviceName): sheets
  contact:
    name: Google
    url: 'https://google.com'
(oas-externalDocs):
  url: 'https://developers.google.com/sheets/'
securitySchemes:
  Oauth2:
    type: OAuth 2.0
    settings:
      authorizationUri: 'https://accounts.google.com/o/oauth2/auth'
      accessTokenUri: ''
      authorizationGrants:
        - implicit
      scopes:
        - 'https://www.googleapis.com/auth/drive'
        - 'https://www.googleapis.com/auth/drive.readonly'
        - 'https://www.googleapis.com/auth/spreadsheets'
        - 'https://www.googleapis.com/auth/spreadsheets.readonly'
    description: Oauth 2.0 authentication
/v4:
  displayName: v4
  /spreadsheets:
    displayName: spreadsheets
    '/{spreadsheetId}':
      displayName: '{spreadsheetId}'
      /values:
        displayName: values
        '/{range}:append':
          displayName: '{range}:append'
          uriParameters:
            range:
              description: |-
                The A1 notation of a range to search for a logical table of data.
                Values will be appended after the last row of the table.
              required: true
              type: string
          post:
            displayName: sheets.spreadsheets.values.append
            description: |-
              Appends values to a spreadsheet. The input range is used to search for
              existing data and find a "table" within that range. Values will be
              appended to the next row of the table, starting with the first column of
              the table. See the
              [guide](/sheets/guides/values#appending_values)
              and
              [sample code](/sheets/samples/writing#append_values)
              for specific details of how tables are detected and data is appended.

              The caller must specify the spreadsheet ID, range, and
              a valueInputOption.  The `valueInputOption` only
              controls how the input data will be added to the sheet (column-wise or
              row-wise), it does not influence what cell the data starts being written
              to.
            body:
              application/json:
                type: ValueRange
                (oas-body-name): body
            responses:
              '200':
                body:
                  application/json:
                    type: AppendValuesResponse
                description: Successful response
            queryParameters:
              responseValueRenderOption:
                description: |-
                  Determines how values in the response should be rendered.
                  The default render option is ValueRenderOption.FORMATTED_VALUE.
                enum:
                  - FORMATTED_VALUE
                  - UNFORMATTED_VALUE
                  - FORMULA
                type: string
              valueInputOption:
                description: How the input data should be interpreted.
                enum:
                  - INPUT_VALUE_OPTION_UNSPECIFIED
                  - RAW
                  - USER_ENTERED
                type: string
              responseDateTimeRenderOption:
                description: |-
                  Determines how dates, times, and durations in the response should be
                  rendered. This is ignored if response_value_render_option is
                  FORMATTED_VALUE.
                  The default dateTime render option is [DateTimeRenderOption.SERIAL_NUMBER].
                enum:
                  - SERIAL_NUMBER
                  - FORMATTED_STRING
                type: string
              includeValuesInResponse:
                description: |-
                  Determines if the update response should include the values
                  of the cells that were appended. By default, responses
                  do not include the updated values.
                type: boolean
              insertDataOption:
                description: How the input data should be inserted.
                enum:
                  - OVERWRITE
                  - INSERT_ROWS
                type: string
            securedBy:
              - Oauth2:
                  scopes:
                    - 'https://www.googleapis.com/auth/spreadsheets'
            (oas-tags):
              - spreadsheets
          is:
            - accessToken
            - prettyPrint
            - key
            - quotaUser
            - pp
            - fields
            - alt
            - xgafv
            - callback
            - oauthToken
            - uploadType
            - bearerToken
            - uploadProtocol
        '/{range}:clear':
          displayName: '{range}:clear'
          uriParameters:
            range:
              description: The A1 notation of the values to clear.
              required: true
              type: string
          post:
            displayName: sheets.spreadsheets.values.clear
            description: |-
              Clears values from a spreadsheet.
              The caller must specify the spreadsheet ID and range.
              Only values are cleared -- all other properties of the cell (such as
              formatting, data validation, etc..) are kept.
            body:
              application/json:
                type: ClearValuesRequest
                (oas-body-name): body
            responses:
              '200':
                body:
                  application/json:
                    type: ClearValuesResponse
                description: Successful response
            securedBy:
              - Oauth2:
                  scopes:
                    - 'https://www.googleapis.com/auth/spreadsheets'
            (oas-tags):
              - spreadsheets
          is:
            - accessToken
            - prettyPrint
            - key
            - quotaUser
            - pp
            - fields
            - alt
            - xgafv
            - callback
            - oauthToken
            - uploadType
            - bearerToken
            - uploadProtocol
        '/{range}':
          displayName: '{range}'
          uriParameters:
            range:
              description: The A1 notation of the values to retrieve.
              required: true
              type: string
          put:
            displayName: sheets.spreadsheets.values.update
            description: |-
              Sets values in a range of a spreadsheet.
              The caller must specify the spreadsheet ID, range, and
              a valueInputOption.
            body:
              application/json:
                type: ValueRange
                (oas-body-name): body
            responses:
              '200':
                body:
                  application/json:
                    type: UpdateValuesResponse
                description: Successful response
            queryParameters:
              responseValueRenderOption:
                description: |-
                  Determines how values in the response should be rendered.
                  The default render option is ValueRenderOption.FORMATTED_VALUE.
                enum:
                  - FORMATTED_VALUE
                  - UNFORMATTED_VALUE
                  - FORMULA
                type: string
              valueInputOption:
                description: How the input data should be interpreted.
                enum:
                  - INPUT_VALUE_OPTION_UNSPECIFIED
                  - RAW
                  - USER_ENTERED
                type: string
              responseDateTimeRenderOption:
                description: |-
                  Determines how dates, times, and durations in the response should be
                  rendered. This is ignored if response_value_render_option is
                  FORMATTED_VALUE.
                  The default dateTime render option is [DateTimeRenderOption.SERIAL_NUMBER].
                enum:
                  - SERIAL_NUMBER
                  - FORMATTED_STRING
                type: string
              includeValuesInResponse:
                description: |-
                  Determines if the update response should include the values
                  of the cells that were updated. By default, responses
                  do not include the updated values.
                  If the range to write was larger than than the range actually written,
                  the response will include all values in the requested range (excluding
                  trailing empty rows and columns).
                type: boolean
            securedBy:
              - Oauth2:
                  scopes:
                    - 'https://www.googleapis.com/auth/spreadsheets'
            (oas-tags):
              - spreadsheets
          is:
            - accessToken
            - prettyPrint
            - key
            - quotaUser
            - pp
            - fields
            - alt
            - xgafv
            - callback
            - oauthToken
            - uploadType
            - bearerToken
            - uploadProtocol
          get:
            displayName: sheets.spreadsheets.values.get
            description: |-
              Returns a range of values from a spreadsheet.
              The caller must specify the spreadsheet ID and a range.
            responses:
              '200':
                body:
                  application/json:
                    type: ValueRange
                description: Successful response
            queryParameters:
              valueRenderOption:
                description: |-
                  How values should be represented in the output.
                  The default render option is ValueRenderOption.FORMATTED_VALUE.
                enum:
                  - FORMATTED_VALUE
                  - UNFORMATTED_VALUE
                  - FORMULA
                type: string
              dateTimeRenderOption:
                description: |-
                  How dates, times, and durations should be represented in the output.
                  This is ignored if value_render_option is
                  FORMATTED_VALUE.
                  The default dateTime render option is [DateTimeRenderOption.SERIAL_NUMBER].
                enum:
                  - SERIAL_NUMBER
                  - FORMATTED_STRING
                type: string
              majorDimension:
                description: |-
                  The major dimension that results should use.

                  For example, if the spreadsheet data is: `A1=1,B1=2,A2=3,B2=4`,
                  then requesting `range=A1:B2,majorDimension=ROWS` will return
                  `[[1,2],[3,4]]`,
                  whereas requesting `range=A1:B2,majorDimension=COLUMNS` will return
                  `[[1,3],[2,4]]`.
                enum:
                  - DIMENSION_UNSPECIFIED
                  - ROWS
                  - COLUMNS
                type: string
            securedBy:
              - Oauth2:
                  scopes:
                    - 'https://www.googleapis.com/auth/spreadsheets.readonly'
            (oas-tags):
              - spreadsheets
      '/values:batchUpdate':
        displayName: 'values:batchUpdate'
        post:
          displayName: sheets.spreadsheets.values.batchUpdate
          description: |-
            Sets values in one or more ranges of a spreadsheet.
            The caller must specify the spreadsheet ID,
            a valueInputOption, and one or more
            ValueRanges.
          body:
            application/json:
              type: BatchUpdateValuesRequest
              (oas-body-name): body
          responses:
            '200':
              body:
                application/json:
                  type: BatchUpdateValuesResponse
              description: Successful response
          securedBy:
            - Oauth2:
                scopes:
                  - 'https://www.googleapis.com/auth/spreadsheets'
          (oas-tags):
            - spreadsheets
        is:
          - accessToken
          - prettyPrint
          - key
          - quotaUser
          - pp
          - fields
          - alt
          - xgafv
          - callback
          - oauthToken
          - uploadType
          - bearerToken
          - uploadProtocol
      '/values:batchGet':
        displayName: 'values:batchGet'
        get:
          displayName: sheets.spreadsheets.values.batchGet
          description: |-
            Returns one or more ranges of values from a spreadsheet.
            The caller must specify the spreadsheet ID and one or more ranges.
          responses:
            '200':
              body:
                application/json:
                  type: BatchGetValuesResponse
              description: Successful response
          queryParameters:
            ranges:
              collectionFormat: multi
              description: The A1 notation of the values to retrieve.
              items:
                type: string
              type: array
              facets:
                collectionFormat: string
            valueRenderOption:
              description: |-
                How values should be represented in the output.
                The default render option is ValueRenderOption.FORMATTED_VALUE.
              enum:
                - FORMATTED_VALUE
                - UNFORMATTED_VALUE
                - FORMULA
              type: string
            dateTimeRenderOption:
              description: |-
                How dates, times, and durations should be represented in the output.
                This is ignored if value_render_option is
                FORMATTED_VALUE.
                The default dateTime render option is [DateTimeRenderOption.SERIAL_NUMBER].
              enum:
                - SERIAL_NUMBER
                - FORMATTED_STRING
              type: string
            majorDimension:
              description: |-
                The major dimension that results should use.

                For example, if the spreadsheet data is: `A1=1,B1=2,A2=3,B2=4`,
                then requesting `range=A1:B2,majorDimension=ROWS` will return
                `[[1,2],[3,4]]`,
                whereas requesting `range=A1:B2,majorDimension=COLUMNS` will return
                `[[1,3],[2,4]]`.
              enum:
                - DIMENSION_UNSPECIFIED
                - ROWS
                - COLUMNS
              type: string
          securedBy:
            - Oauth2:
                scopes:
                  - 'https://www.googleapis.com/auth/spreadsheets.readonly'
          (oas-tags):
            - spreadsheets
        is:
          - accessToken
          - prettyPrint
          - key
          - quotaUser
          - pp
          - fields
          - alt
          - xgafv
          - callback
          - oauthToken
          - uploadType
          - bearerToken
          - uploadProtocol
      '/values:batchClear':
        displayName: 'values:batchClear'
        post:
          displayName: sheets.spreadsheets.values.batchClear
          description: |-
            Clears one or more ranges of values from a spreadsheet.
            The caller must specify the spreadsheet ID and one or more ranges.
            Only values are cleared -- all other properties of the cell (such as
            formatting, data validation, etc..) are kept.
          body:
            application/json:
              type: BatchClearValuesRequest
              (oas-body-name): body
          responses:
            '200':
              body:
                application/json:
                  type: BatchClearValuesResponse
              description: Successful response
          securedBy:
            - Oauth2:
                scopes:
                  - 'https://www.googleapis.com/auth/spreadsheets'
          (oas-tags):
            - spreadsheets
        is:
          - accessToken
          - prettyPrint
          - key
          - quotaUser
          - pp
          - fields
          - alt
          - xgafv
          - callback
          - oauthToken
          - uploadType
          - bearerToken
          - uploadProtocol
      uriParameters:
        spreadsheetId:
          description: The spreadsheet to request.
          required: true
          type: string
      get:
        displayName: sheets.spreadsheets.get
        description: |-
          Returns the spreadsheet at the given ID.
          The caller must specify the spreadsheet ID.

          By default, data within grids will not be returned.
          You can include grid data one of two ways:

          * Specify a field mask listing your desired fields using the `fields` URL
          parameter in HTTP

          * Set the includeGridData
          URL parameter to true.  If a field mask is set, the `includeGridData`
          parameter is ignored

          For large spreadsheets, it is recommended to retrieve only the specific
          fields of the spreadsheet that you want.

          To retrieve only subsets of the spreadsheet, use the
          ranges URL parameter.
          Multiple ranges can be specified.  Limiting the range will
          return only the portions of the spreadsheet that intersect the requested
          ranges. Ranges are specified using A1 notation.
        responses:
          '200':
            body:
              application/json:
                type: Spreadsheet
            description: Successful response
        queryParameters:
          ranges:
            collectionFormat: multi
            description: The ranges to retrieve from the spreadsheet.
            items:
              type: string
            type: array
            facets:
              collectionFormat: string
          includeGridData:
            description: |-
              True if grid data should be returned.
              This parameter is ignored if a field mask was set in the request.
            type: boolean
        securedBy:
          - Oauth2:
              scopes:
                - 'https://www.googleapis.com/auth/spreadsheets.readonly'
        (oas-tags):
          - spreadsheets
      is:
        - accessToken
        - prettyPrint
        - key
        - quotaUser
        - pp
        - fields
        - alt
        - xgafv
        - callback
        - oauthToken
        - uploadType
        - bearerToken
        - uploadProtocol
      /sheets:
        displayName: sheets
        '/{sheetId}:copyTo':
          displayName: '{sheetId}:copyTo'
          uriParameters:
            sheetId:
              description: The ID of the sheet to copy.
              required: true
              type: integer
          post:
            displayName: sheets.spreadsheets.sheets.copyTo
            description: |-
              Copies a single sheet from a spreadsheet to another spreadsheet.
              Returns the properties of the newly created sheet.
            body:
              application/json:
                type: CopySheetToAnotherSpreadsheetRequest
                (oas-body-name): body
            responses:
              '200':
                body:
                  application/json:
                    type: SheetProperties
                description: Successful response
            securedBy:
              - Oauth2:
                  scopes:
                    - 'https://www.googleapis.com/auth/spreadsheets'
            (oas-tags):
              - spreadsheets
          is:
            - accessToken
            - prettyPrint
            - key
            - quotaUser
            - pp
            - fields
            - alt
            - xgafv
            - callback
            - oauthToken
            - uploadType
            - bearerToken
            - uploadProtocol
    '/{spreadsheetId}:batchUpdate':
      displayName: '{spreadsheetId}:batchUpdate'
      uriParameters:
        spreadsheetId:
          description: The spreadsheet to apply the updates to.
          required: true
          type: string
      post:
        displayName: sheets.spreadsheets.batchUpdate
        description: |-
          Applies one or more updates to the spreadsheet.

          Each request is validated before
          being applied. If any request is not valid then the entire request will
          fail and nothing will be applied.

          Some requests have replies to
          give you some information about how
          they are applied. The replies will mirror the requests.  For example,
          if you applied 4 updates and the 3rd one had a reply, then the
          response will have 2 empty replies, the actual reply, and another empty
          reply, in that order.

          Due to the collaborative nature of spreadsheets, it is not guaranteed that
          the spreadsheet will reflect exactly your changes after this completes,
          however it is guaranteed that the updates in the request will be
          applied together atomically. Your changes may be altered with respect to
          collaborator changes. If there are no collaborators, the spreadsheet
          should reflect your changes.
        body:
          application/json:
            type: BatchUpdateSpreadsheetRequest
            (oas-body-name): body
        responses:
          '200':
            body:
              application/json:
                type: BatchUpdateSpreadsheetResponse
            description: Successful response
        securedBy:
          - Oauth2:
              scopes:
                - 'https://www.googleapis.com/auth/spreadsheets'
        (oas-tags):
          - spreadsheets
      is:
        - accessToken
        - prettyPrint
        - key
        - quotaUser
        - pp
        - fields
        - alt
        - xgafv
        - callback
        - oauthToken
        - uploadType
        - bearerToken
        - uploadProtocol
    post:
      displayName: sheets.spreadsheets.create
      description: 'Creates a spreadsheet, returning the newly created spreadsheet.'
      body:
        application/json:
          type: Spreadsheet
          (oas-body-name): body
      responses:
        '200':
          body:
            application/json:
              type: Spreadsheet
          description: Successful response
      securedBy:
        - Oauth2:
            scopes:
              - 'https://www.googleapis.com/auth/spreadsheets'
      (oas-tags):
        - spreadsheets
    is:
      - accessToken
      - prettyPrint
      - key
      - quotaUser
      - pp
      - fields
      - alt
      - xgafv
      - callback
      - oauthToken
      - uploadType
      - bearerToken
      - uploadProtocol
types:
  AddBandingRequest:
    description: Adds a new banded range to the spreadsheet.
    properties:
      bandedRange:
        description: |-
          The banded range to add. The bandedRangeId
          field is optional; if one is not set, an id will be randomly generated. (It
          is an error to specify the ID of a range that already exists.)
        type: BandedRange
        required: false
  AddBandingResponse:
    description: The result of adding a banded range.
    properties:
      bandedRange:
        description: The banded range that was added.
        type: BandedRange
        required: false
  AddChartRequest:
    description: Adds a chart to a sheet in the spreadsheet.
    properties:
      chart:
        description: |-
          The chart that should be added to the spreadsheet, including the position
          where it should be placed. The chartId
          field is optional; if one is not set, an id will be randomly generated. (It
          is an error to specify the ID of a chart that already exists.)
        type: EmbeddedChart
        required: false
  AddChartResponse:
    description: The result of adding a chart to a spreadsheet.
    properties:
      chart:
        description: The newly added chart.
        type: EmbeddedChart
        required: false
  AddConditionalFormatRuleRequest:
    description: |-
      Adds a new conditional format rule at the given index.
      All subsequent rules' indexes are incremented.
    properties:
      index:
        description: The zero-based index where the rule should be inserted.
        format: int32
        type: integer
        required: false
      rule:
        description: The rule to add.
        type: ConditionalFormatRule
        required: false
  AddFilterViewRequest:
    description: Adds a filter view.
    properties:
      filter:
        description: |-
          The filter to add. The filterViewId
          field is optional; if one is not set, an id will be randomly generated. (It
          is an error to specify the ID of a filter that already exists.)
        type: FilterView
        required: false
  AddFilterViewResponse:
    description: The result of adding a filter view.
    properties:
      filter:
        description: The newly added filter view.
        type: FilterView
        required: false
  AddNamedRangeRequest:
    description: Adds a named range to the spreadsheet.
    properties:
      namedRange:
        description: |-
          The named range to add. The namedRangeId
          field is optional; if one is not set, an id will be randomly generated. (It
          is an error to specify the ID of a range that already exists.)
        type: NamedRange
        required: false
  AddNamedRangeResponse:
    description: The result of adding a named range.
    properties:
      namedRange:
        description: The named range to add.
        type: NamedRange
        required: false
  AddProtectedRangeRequest:
    description: Adds a new protected range.
    properties:
      protectedRange:
        description: |-
          The protected range to be added. The
          protectedRangeId field is optional; if
          one is not set, an id will be randomly generated. (It is an error to
          specify the ID of a range that already exists.)
        type: ProtectedRange
        required: false
  AddProtectedRangeResponse:
    description: The result of adding a new protected range.
    properties:
      protectedRange:
        description: The newly added protected range.
        type: ProtectedRange
        required: false
  AddSheetRequest:
    description: |-
      Adds a new sheet.
      When a sheet is added at a given index,
      all subsequent sheets' indexes are incremented.
      To add an object sheet, use AddChartRequest instead and specify
      EmbeddedObjectPosition.sheetId or
      EmbeddedObjectPosition.newSheet.
    properties:
      properties:
        description: |-
          The properties the new sheet should have.
          All properties are optional.
          The sheetId field is optional; if one is not
          set, an id will be randomly generated. (It is an error to specify the ID
          of a sheet that already exists.)
        type: SheetProperties
        required: false
  AddSheetResponse:
    description: The result of adding a sheet.
    properties:
      properties:
        description: The properties of the newly added sheet.
        type: SheetProperties
        required: false
  AppendCellsRequest:
    description: |-
      Adds new cells after the last row with data in a sheet,
      inserting new rows into the sheet if necessary.
    properties:
      fields:
        description: |-
          The fields of CellData that should be updated.
          At least one field must be specified.
          The root is the CellData; 'row.values.' should not be specified.
          A single `"*"` can be used as short-hand for listing every field.
        format: google-fieldmask
        type: string
        facets:
          format: string
        required: false
      rows:
        description: The data to append.
        items:
          type: RowData
        type: array
        required: false
      sheetId:
        description: The sheet ID to append the data to.
        format: int32
        type: integer
        required: false
  AppendDimensionRequest:
    description: Appends rows or columns to the end of a sheet.
    properties:
      dimension:
        description: Whether rows or columns should be appended.
        enum:
          - DIMENSION_UNSPECIFIED
          - ROWS
          - COLUMNS
        type: string
        required: false
      length:
        description: The number of rows or columns to append.
        format: int32
        type: integer
        required: false
      sheetId:
        description: The sheet to append rows or columns to.
        format: int32
        type: integer
        required: false
  AppendValuesResponse:
    description: The response when updating a range of values in a spreadsheet.
    properties:
      spreadsheetId:
        description: The spreadsheet the updates were applied to.
        type: string
        required: false
      tableRange:
        description: |-
          The range (in A1 notation) of the table that values are being appended to
          (before the values were appended).
          Empty if no table was found.
        type: string
        required: false
      updates:
        description: Information about the updates that were applied.
        type: UpdateValuesResponse
        required: false
  AutoFillRequest:
    description: Fills in more data based on existing data.
    properties:
      range:
        description: |-
          The range to autofill. This will examine the range and detect
          the location that has data and automatically fill that data
          in to the rest of the range.
        type: GridRange
        required: false
      sourceAndDestination:
        description: |-
          The source and destination areas to autofill.
          This explicitly lists the source of the autofill and where to
          extend that data.
        type: SourceAndDestination
        required: false
      useAlternateSeries:
        description: |-
          True if we should generate data with the "alternate" series.
          This differs based on the type and amount of source data.
        type: boolean
        required: false
  AutoResizeDimensionsRequest:
    description: |-
      Automatically resizes one or more dimensions based on the contents
      of the cells in that dimension.
    properties:
      dimensions:
        description: |-
          The dimensions to automatically resize.
          Only COLUMNS are supported.
        type: DimensionRange
        required: false
  BandedRange:
    description: A banded (alternating colors) range in a sheet.
    properties:
      bandedRangeId:
        description: The id of the banded range.
        format: int32
        type: integer
        required: false
      columnProperties:
        description: |-
          Properties for column bands. These properties will be applied on a column-
          by-column basis throughout all the columns in the range. At least one of
          row_properties or column_properties must be specified.
        type: BandingProperties
        required: false
      range:
        description: The range over which these properties are applied.
        type: GridRange
        required: false
      rowProperties:
        description: |-
          Properties for row bands. These properties will be applied on a row-by-row
          basis throughout all the rows in the range. At least one of
          row_properties or column_properties must be specified.
        type: BandingProperties
        required: false
  BandingProperties:
    description: |-
      Properties referring a single dimension (either row or column). If both
      BandedRange.row_properties and BandedRange.column_properties are
      set, the fill colors are applied to cells according to the following rules:

      * header_color and footer_color take priority over band colors.
      * first_band_color takes priority over second_band_color.
      * row_properties takes priority over column_properties.

      For example, the first row color takes priority over the first column
      color, but the first column color takes priority over the second row color.
      Similarly, the row header takes priority over the column header in the
      top left cell, but the column header takes priority over the first row
      color if the row header is not set.
    properties:
      firstBandColor:
        description: The first color that is alternating. (Required)
        type: Color
        required: false
      footerColor:
        description: |-
          The color of the last row or column. If this field is not set, the last
          row or column will be filled with either first_row_color or
          second_row_color, depending on the color of the previous row or
          column.
        type: Color
        required: false
      headerColor:
        description: |-
          The color of the first row or column. If this field is set, the first
          row or column will be filled with this color and the colors will
          alternate between first_band_color and [second_band_color[] starting
          from the second row or column. Otherwise, the first row or column will be
          filled with first_band_color and the colors will proceed to alternate
          as they normally would.
        type: Color
        required: false
      secondBandColor:
        description: The second color that is alternating. (Required)
        type: Color
        required: false
  BasicChartAxis:
    description: |-
      An axis of the chart.
      A chart may not have more than one axis per
      axis position.
    properties:
      format:
        description: |-
          The format of the title.
          Only valid if the axis is not associated with the domain.
        type: TextFormat
        required: false
      position:
        description: The position of this axis.
        enum:
          - BASIC_CHART_AXIS_POSITION_UNSPECIFIED
          - BOTTOM_AXIS
          - LEFT_AXIS
          - RIGHT_AXIS
        type: string
        required: false
      title:
        description: |-
          The title of this axis. If set, this overrides any title inferred
          from headers of the data.
        type: string
        required: false
  BasicChartDomain:
    description: |-
      The domain of a chart.
      For example, if charting stock prices over time, this would be the date.
    properties:
      domain:
        description: |-
          The data of the domain. For example, if charting stock prices over time,
          this is the data representing the dates.
        type: ChartData
        required: false
  BasicChartSeries:
    description: |-
      A single series of data in a chart.
      For example, if charting stock prices over time, multiple series may exist,
      one for the "Open Price", "High Price", "Low Price" and "Close Price".
    properties:
      series:
        description: The data being visualized in this chart series.
        type: ChartData
        required: false
      targetAxis:
        description: |-
          The minor axis that will specify the range of values for this series.
          For example, if charting stocks over time, the "Volume" series
          may want to be pinned to the right with the prices pinned to the left,
          because the scale of trading volume is different than the scale of
          prices.
          It is an error to specify an axis that isn't a valid minor axis
          for the chart's type.
        enum:
          - BASIC_CHART_AXIS_POSITION_UNSPECIFIED
          - BOTTOM_AXIS
          - LEFT_AXIS
          - RIGHT_AXIS
        type: string
        required: false
      type:
        description: |-
          The type of this series. Valid only if the
          chartType is
          COMBO.
          Different types will change the way the series is visualized.
          Only LINE, AREA,
          and COLUMN are supported.
        enum:
          - BASIC_CHART_TYPE_UNSPECIFIED
          - BAR
          - LINE
          - AREA
          - COLUMN
          - SCATTER
          - COMBO
        type: string
        required: false
  BasicChartSpec:
    description: |-
      The specification for a basic chart.  See BasicChartType for the list
      of charts this supports.
    properties:
      axis:
        description: The axis on the chart.
        items:
          type: BasicChartAxis
        type: array
        required: false
      chartType:
        description: The type of the chart.
        enum:
          - BASIC_CHART_TYPE_UNSPECIFIED
          - BAR
          - LINE
          - AREA
          - COLUMN
          - SCATTER
          - COMBO
        type: string
        required: false
      domains:
        description: |-
          The domain of data this is charting.
          Only a single domain is currently supported.
        items:
          type: BasicChartDomain
        type: array
        required: false
      headerCount:
        description: |-
          The number of rows or columns in the data that are "headers".
          If not set, Google Sheets will guess how many rows are headers based
          on the data.

          (Note that BasicChartAxis.title may override the axis title
           inferred from the header values.)
        format: int32
        type: integer
        required: false
      legendPosition:
        description: The position of the chart legend.
        enum:
          - BASIC_CHART_LEGEND_POSITION_UNSPECIFIED
          - BOTTOM_LEGEND
          - LEFT_LEGEND
          - RIGHT_LEGEND
          - TOP_LEGEND
          - NO_LEGEND
        type: string
        required: false
      series:
        description: The data this chart is visualizing.
        items:
          type: BasicChartSeries
        type: array
        required: false
  BasicFilter:
    description: The default filter associated with a sheet.
    properties:
      criteria:
        additionalProperties:
          type: FilterCriteria
        description: |-
          The criteria for showing/hiding values per column.
          The map's key is the column index, and the value is the criteria for
          that column.
        type: object
        required: false
      range:
        description: The range the filter covers.
        type: GridRange
        required: false
      sortSpecs:
        description: |-
          The sort order per column. Later specifications are used when values
          are equal in the earlier specifications.
        items:
          type: SortSpec
        type: array
        required: false
  BatchClearValuesRequest:
    description: The request for clearing more than one range of values in a spreadsheet.
    properties:
      ranges:
        description: 'The ranges to clear, in A1 notation.'
        items:
          type: string
        type: array
        required: false
  BatchClearValuesResponse:
    description: The response when updating a range of values in a spreadsheet.
    properties:
      clearedRanges:
        description: |-
          The ranges that were cleared, in A1 notation.
          (If the requests were for an unbounded range or a ranger larger
           than the bounds of the sheet, this will be the actual ranges
           that were cleared, bounded to the sheet's limits.)
        items:
          type: string
        type: array
        required: false
      spreadsheetId:
        description: The spreadsheet the updates were applied to.
        type: string
        required: false
  BatchGetValuesResponse:
    description: The response when retrieving more than one range of values in a spreadsheet.
    properties:
      spreadsheetId:
        description: The ID of the spreadsheet the data was retrieved from.
        type: string
        required: false
      valueRanges:
        description: |-
          The requested values. The order of the ValueRanges is the same as the
          order of the requested ranges.
        items:
          type: ValueRange
        type: array
        required: false
  BatchUpdateSpreadsheetRequest:
    description: The request for updating any aspect of a spreadsheet.
    properties:
      includeSpreadsheetInResponse:
        description: |-
          Determines if the update response should include the spreadsheet
          resource.
        type: boolean
        required: false
      requests:
        description: A list of updates to apply to the spreadsheet.
        items:
          type: Request
        type: array
        required: false
      responseIncludeGridData:
        description: |-
          True if grid data should be returned. Meaningful only if
          if include_spreadsheet_response is 'true'.
          This parameter is ignored if a field mask was set in the request.
        type: boolean
        required: false
      responseRanges:
        description: |-
          Limits the ranges included in the response spreadsheet.
          Meaningful only if include_spreadsheet_response is 'true'.
        items:
          type: string
        type: array
        required: false
  BatchUpdateSpreadsheetResponse:
    description: The reply for batch updating a spreadsheet.
    properties:
      replies:
        description: |-
          The reply of the updates.  This maps 1:1 with the updates, although
          replies to some requests may be empty.
        items:
          type: Response
        type: array
        required: false
      spreadsheetId:
        description: The spreadsheet the updates were applied to.
        type: string
        required: false
      updatedSpreadsheet:
        description: |-
          The spreadsheet after updates were applied. This is only set if
          [BatchUpdateSpreadsheetRequest.include_spreadsheet_in_response] is `true`.
        type: Spreadsheet
        required: false
  BatchUpdateValuesRequest:
    description: The request for updating more than one range of values in a spreadsheet.
    properties:
      data:
        description: The new values to apply to the spreadsheet.
        items:
          type: ValueRange
        type: array
        required: false
      includeValuesInResponse:
        description: |-
          Determines if the update response should include the values
          of the cells that were updated. By default, responses
          do not include the updated values. The `updatedData` field within
          each of the BatchUpdateValuesResponse.responses will contain
          the updated values. If the range to write was larger than than the range
          actually written, the response will include all values in the requested
          range (excluding trailing empty rows and columns).
        type: boolean
        required: false
      responseDateTimeRenderOption:
        description: |-
          Determines how dates, times, and durations in the response should be
          rendered. This is ignored if response_value_render_option is
          FORMATTED_VALUE.
          The default dateTime render option is [DateTimeRenderOption.SERIAL_NUMBER].
        enum:
          - SERIAL_NUMBER
          - FORMATTED_STRING
        type: string
        required: false
      responseValueRenderOption:
        description: |-
          Determines how values in the response should be rendered.
          The default render option is ValueRenderOption.FORMATTED_VALUE.
        enum:
          - FORMATTED_VALUE
          - UNFORMATTED_VALUE
          - FORMULA
        type: string
        required: false
      valueInputOption:
        description: How the input data should be interpreted.
        enum:
          - INPUT_VALUE_OPTION_UNSPECIFIED
          - RAW
          - USER_ENTERED
        type: string
        required: false
  BatchUpdateValuesResponse:
    description: The response when updating a range of values in a spreadsheet.
    properties:
      responses:
        description: |-
          One UpdateValuesResponse per requested range, in the same order as
          the requests appeared.
        items:
          type: UpdateValuesResponse
        type: array
        required: false
      spreadsheetId:
        description: The spreadsheet the updates were applied to.
        type: string
        required: false
      totalUpdatedCells:
        description: The total number of cells updated.
        format: int32
        type: integer
        required: false
      totalUpdatedColumns:
        description: |-
          The total number of columns where at least one cell in the column was
          updated.
        format: int32
        type: integer
        required: false
      totalUpdatedRows:
        description: The total number of rows where at least one cell in the row was updated.
        format: int32
        type: integer
        required: false
      totalUpdatedSheets:
        description: |-
          The total number of sheets where at least one cell in the sheet was
          updated.
        format: int32
        type: integer
        required: false
  BooleanCondition:
    description: |-
      A condition that can evaluate to true or false.
      BooleanConditions are used by conditional formatting,
      data validation, and the criteria in filters.
    properties:
      type:
        description: The type of condition.
        enum:
          - CONDITION_TYPE_UNSPECIFIED
          - NUMBER_GREATER
          - NUMBER_GREATER_THAN_EQ
          - NUMBER_LESS
          - NUMBER_LESS_THAN_EQ
          - NUMBER_EQ
          - NUMBER_NOT_EQ
          - NUMBER_BETWEEN
          - NUMBER_NOT_BETWEEN
          - TEXT_CONTAINS
          - TEXT_NOT_CONTAINS
          - TEXT_STARTS_WITH
          - TEXT_ENDS_WITH
          - TEXT_EQ
          - TEXT_IS_EMAIL
          - TEXT_IS_URL
          - DATE_EQ
          - DATE_BEFORE
          - DATE_AFTER
          - DATE_ON_OR_BEFORE
          - DATE_ON_OR_AFTER
          - DATE_BETWEEN
          - DATE_NOT_BETWEEN
          - DATE_IS_VALID
          - ONE_OF_RANGE
          - ONE_OF_LIST
          - BLANK
          - NOT_BLANK
          - CUSTOM_FORMULA
        type: string
        required: false
      values:
        description: |-
          The values of the condition. The number of supported values depends
          on the condition type.  Some support zero values,
          others one or two values,
          and ConditionType.ONE_OF_LIST supports an arbitrary number of values.
        items:
          type: ConditionValue
        type: array
        required: false
  BooleanRule:
    description: 'A rule that may or may not match, depending on the condition.'
    properties:
      condition:
        description: |-
          The condition of the rule. If the condition evaluates to true,
          the format will be applied.
        type: BooleanCondition
        required: false
      format:
        description: |-
          The format to apply.
          Conditional formatting can only apply a subset of formatting:
          bold, italic,
          strikethrough,
          foreground color &
          background color.
        type: CellFormat
        required: false
  Border:
    description: A border along a cell.
    properties:
      color:
        description: The color of the border.
        type: Color
        required: false
      style:
        description: The style of the border.
        enum:
          - STYLE_UNSPECIFIED
          - DOTTED
          - DASHED
          - SOLID
          - SOLID_MEDIUM
          - SOLID_THICK
          - NONE
          - DOUBLE
        type: string
        required: false
      width:
        description: |-
          The width of the border, in pixels.
          Deprecated; the width is determined by the "style" field.
        format: int32
        type: integer
        required: false
  Borders:
    description: The borders of the cell.
    properties:
      bottom:
        description: The bottom border of the cell.
        type: Border
        required: false
      left:
        description: The left border of the cell.
        type: Border
        required: false
      right:
        description: The right border of the cell.
        type: Border
        required: false
      top:
        description: The top border of the cell.
        type: Border
        required: false
  CellData:
    description: Data about a specific cell.
    properties:
      dataValidation:
        description: |-
          A data validation rule on the cell, if any.

          When writing, the new data validation rule will overwrite any prior rule.
        type: DataValidationRule
        required: false
      effectiveFormat:
        description: |-
          The effective format being used by the cell.
          This includes the results of applying any conditional formatting and,
          if the cell contains a formula, the computed number format.
          If the effective format is the default format, effective format will
          not be written.
          This field is read-only.
        type: CellFormat
        required: false
      effectiveValue:
        description: |-
          The effective value of the cell. For cells with formulas, this will be
          the calculated value.  For cells with literals, this will be
          the same as the user_entered_value.
          This field is read-only.
        type: ExtendedValue
        required: false
      formattedValue:
        description: |-
          The formatted value of the cell.
          This is the value as it's shown to the user.
          This field is read-only.
        type: string
        required: false
      hyperlink:
        description: |-
          A hyperlink this cell points to, if any.
          This field is read-only.  (To set it, use a `=HYPERLINK` formula.)
        type: string
        required: false
      note:
        description: Any note on the cell.
        type: string
        required: false
      pivotTable:
        description: |-
          A pivot table anchored at this cell. The size of pivot table itself
          is computed dynamically based on its data, grouping, filters, values,
          etc. Only the top-left cell of the pivot table contains the pivot table
          definition. The other cells will contain the calculated values of the
          results of the pivot in their effective_value fields.
        type: PivotTable
        required: false
      textFormatRuns:
        description: |-
          Runs of rich text applied to subsections of the cell.  Runs are only valid
          on user entered strings, not formulas, bools, or numbers.
          Runs start at specific indexes in the text and continue until the next
          run. Properties of a run will continue unless explicitly changed
          in a subsequent run (and properties of the first run will continue
          the properties of the cell unless explicitly changed).

          When writing, the new runs will overwrite any prior runs.  When writing a
          new user_entered_value, previous runs will be erased.
        items:
          type: TextFormatRun
        type: array
        required: false
      userEnteredFormat:
        description: |-
          The format the user entered for the cell.

          When writing, the new format will be merged with the existing format.
        type: CellFormat
        required: false
      userEnteredValue:
        description: |-
          The value the user entered in the cell. e.g, `1234`, `'Hello'`, or `=NOW()`
          Note: Dates, Times and DateTimes are represented as doubles in
          serial number format.
        type: ExtendedValue
        required: false
  CellFormat:
    description: The format of a cell.
    properties:
      backgroundColor:
        description: The background color of the cell.
        type: Color
        required: false
      borders:
        description: The borders of the cell.
        type: Borders
        required: false
      horizontalAlignment:
        description: The horizontal alignment of the value in the cell.
        enum:
          - HORIZONTAL_ALIGN_UNSPECIFIED
          - LEFT
          - CENTER
          - RIGHT
        type: string
        required: false
      hyperlinkDisplayType:
        description: 'How a hyperlink, if it exists, should be displayed in the cell.'
        enum:
          - HYPERLINK_DISPLAY_TYPE_UNSPECIFIED
          - LINKED
          - PLAIN_TEXT
        type: string
        required: false
      numberFormat:
        description: A format describing how number values should be represented to the user.
        type: NumberFormat
        required: false
      padding:
        description: The padding of the cell.
        type: Padding
        required: false
      textDirection:
        description: The direction of the text in the cell.
        enum:
          - TEXT_DIRECTION_UNSPECIFIED
          - LEFT_TO_RIGHT
          - RIGHT_TO_LEFT
        type: string
        required: false
      textFormat:
        description: The format of the text in the cell (unless overridden by a format run).
        type: TextFormat
        required: false
      verticalAlignment:
        description: The vertical alignment of the value in the cell.
        enum:
          - VERTICAL_ALIGN_UNSPECIFIED
          - TOP
          - MIDDLE
          - BOTTOM
        type: string
        required: false
      wrapStrategy:
        description: The wrap strategy for the value in the cell.
        enum:
          - WRAP_STRATEGY_UNSPECIFIED
          - OVERFLOW_CELL
          - LEGACY_WRAP
          - CLIP
          - WRAP
        type: string
        required: false
  ChartData:
    description: The data included in a domain or series.
    properties:
      sourceRange:
        description: The source ranges of the data.
        type: ChartSourceRange
        required: false
  ChartSourceRange:
    description: Source ranges for a chart.
    properties:
      sources:
        description: |-
          The ranges of data for a series or domain.
          Exactly one dimension must have a length of 1,
          and all sources in the list must have the same dimension
          with length 1.
          The domain (if it exists) & all series must have the same number
          of source ranges. If using more than one source range, then the source
          range at a given offset must be contiguous across the domain and series.

          For example, these are valid configurations:

              domain sources: A1:A5
              series1 sources: B1:B5
              series2 sources: D6:D10

              domain sources: A1:A5, C10:C12
              series1 sources: B1:B5, D10:D12
              series2 sources: C1:C5, E10:E12
        items:
          type: GridRange
        type: array
        required: false
  ChartSpec:
    description: The specifications of a chart.
    properties:
      basicChart:
        description: |-
          A basic chart specification, can be one of many kinds of charts.
          See BasicChartType for the list of all
          charts this supports.
        type: BasicChartSpec
        required: false
      hiddenDimensionStrategy:
        description: Determines how the charts will use hidden rows or columns.
        enum:
          - CHART_HIDDEN_DIMENSION_STRATEGY_UNSPECIFIED
          - SKIP_HIDDEN_ROWS_AND_COLUMNS
          - SKIP_HIDDEN_ROWS
          - SKIP_HIDDEN_COLUMNS
          - SHOW_ALL
        type: string
        required: false
      pieChart:
        description: A pie chart specification.
        type: PieChartSpec
        required: false
      title:
        description: The title of the chart.
        type: string
        required: false
  ClearBasicFilterRequest:
    description: 'Clears the basic filter, if any exists on the sheet.'
    properties:
      sheetId:
        description: The sheet ID on which the basic filter should be cleared.
        format: int32
        type: integer
        required: false
  ClearValuesRequest:
    description: The request for clearing a range of values in a spreadsheet.
    properties: {}
  ClearValuesResponse:
    description: The response when clearing a range of values in a spreadsheet.
    properties:
      clearedRange:
        description: |-
          The range (in A1 notation) that was cleared.
          (If the request was for an unbounded range or a ranger larger
           than the bounds of the sheet, this will be the actual range
           that was cleared, bounded to the sheet's limits.)
        type: string
        required: false
      spreadsheetId:
        description: The spreadsheet the updates were applied to.
        type: string
        required: false
  Color:
    description: |-
      Represents a color in the RGBA color space. This representation is designed
      for simplicity of conversion to/from color representations in various
      languages over compactness; for example, the fields of this representation
      can be trivially provided to the constructor of "java.awt.Color" in Java; it
      can also be trivially provided to UIColor's "+colorWithRed:green:blue:alpha"
      method in iOS; and, with just a little work, it can be easily formatted into
      a CSS "rgba()" string in JavaScript, as well. Here are some examples:

      Example (Java):

           import com.google.type.Color;

           // ...
           public static java.awt.Color fromProto(Color protocolor) {
             float alpha = protocolor.hasAlpha()
                 ? protocolor.getAlpha().getValue()
                 : 1.0;

             return new java.awt.Color(
                 protocolor.getRed(),
                 protocolor.getGreen(),
                 protocolor.getBlue(),
                 alpha);
           }

           public static Color toProto(java.awt.Color color) {
             float red = (float) color.getRed();
             float green = (float) color.getGreen();
             float blue = (float) color.getBlue();
             float denominator = 255.0;
             Color.Builder resultBuilder =
                 Color
                     .newBuilder()
                     .setRed(red / denominator)
                     .setGreen(green / denominator)
                     .setBlue(blue / denominator);
             int alpha = color.getAlpha();
             if (alpha != 255) {
               result.setAlpha(
                   FloatValue
                       .newBuilder()
                       .setValue(((float) alpha) / denominator)
                       .build());
             }
             return resultBuilder.build();
           }
           // ...

      Example (iOS / Obj-C):

           // ...
           static UIColor* fromProto(Color* protocolor) {
              float red = [protocolor red];
              float green = [protocolor green];
              float blue = [protocolor blue];
              FloatValue* alpha_wrapper = [protocolor alpha];
              float alpha = 1.0;
              if (alpha_wrapper != nil) {
                alpha = [alpha_wrapper value];
              }
              return [UIColor colorWithRed:red green:green blue:blue alpha:alpha];
           }

           static Color* toProto(UIColor* color) {
               CGFloat red, green, blue, alpha;
               if (![color getRed:&red green:&green blue:&blue alpha:&alpha]) {
                 return nil;
               }
               Color* result = [Color alloc] init];
               [result setRed:red];
               [result setGreen:green];
               [result setBlue:blue];
               if (alpha <= 0.9999) {
                 [result setAlpha:floatWrapperWithValue(alpha)];
               }
               [result autorelease];
               return result;
          }
          // ...

       Example (JavaScript):

          // ...

          var protoToCssColor = function(rgb_color) {
             var redFrac = rgb_color.red || 0.0;
             var greenFrac = rgb_color.green || 0.0;
             var blueFrac = rgb_color.blue || 0.0;
             var red = Math.floor(redFrac * 255);
             var green = Math.floor(greenFrac * 255);
             var blue = Math.floor(blueFrac * 255);

             if (!('alpha' in rgb_color)) {
                return rgbToCssColor_(red, green, blue);
             }

             var alphaFrac = rgb_color.alpha.value || 0.0;
             var rgbParams = [red, green, blue].join(',');
             return ['rgba(', rgbParams, ',', alphaFrac, ')'].join('');
          };

          var rgbToCssColor_ = function(red, green, blue) {
            var rgbNumber = new Number((red << 16) | (green << 8) | blue);
            var hexString = rgbNumber.toString(16);
            var missingZeros = 6 - hexString.length;
            var resultBuilder = ['#'];
            for (var i = 0; i < missingZeros; i++) {
               resultBuilder.push('0');
            }
            resultBuilder.push(hexString);
            return resultBuilder.join('');
          };

          // ...
    properties:
      alpha:
        description: |-
          The fraction of this color that should be applied to the pixel. That is,
          the final pixel color is defined by the equation:

            pixel color = alpha * (this color) + (1.0 - alpha) * (background color)

          This means that a value of 1.0 corresponds to a solid color, whereas
          a value of 0.0 corresponds to a completely transparent color. This
          uses a wrapper message rather than a simple float scalar so that it is
          possible to distinguish between a default value and the value being unset.
          If omitted, this color object is to be rendered as a solid color
          (as if the alpha value had been explicitly given with a value of 1.0).
        format: float
        type: number
        required: false
      blue:
        description: 'The amount of blue in the color as a value in the interval [0, 1].'
        format: float
        type: number
        required: false
      green:
        description: 'The amount of green in the color as a value in the interval [0, 1].'
        format: float
        type: number
        required: false
      red:
        description: 'The amount of red in the color as a value in the interval [0, 1].'
        format: float
        type: number
        required: false
  ConditionValue:
    description: The value of the condition.
    properties:
      relativeDate:
        description: |-
          A relative date (based on the current date).
          Valid only if the type is
          DATE_BEFORE,
          DATE_AFTER,
          DATE_ON_OR_BEFORE or
          DATE_ON_OR_AFTER.

          Relative dates are not supported in data validation.
          They are supported only in conditional formatting and
          conditional filters.
        enum:
          - RELATIVE_DATE_UNSPECIFIED
          - PAST_YEAR
          - PAST_MONTH
          - PAST_WEEK
          - YESTERDAY
          - TODAY
          - TOMORROW
        type: string
        required: false
      userEnteredValue:
        description: |-
          A value the condition is based on.
          The value will be parsed as if the user typed into a cell.
          Formulas are supported (and must begin with an `=`).
        type: string
        required: false
  ConditionalFormatRule:
    description: A rule describing a conditional format.
    properties:
      booleanRule:
        description: The formatting is either "on" or "off" according to the rule.
        type: BooleanRule
        required: false
      gradientRule:
        description: The formatting will vary based on the gradients in the rule.
        type: GradientRule
        required: false
      ranges:
        description: |-
          The ranges that will be formatted if the condition is true.
          All the ranges must be on the same grid.
        items:
          type: GridRange
        type: array
        required: false
  CopyPasteRequest:
    description: Copies data from the source to the destination.
    properties:
      destination:
        description: |-
          The location to paste to. If the range covers a span that's
          a multiple of the source's height or width, then the
          data will be repeated to fill in the destination range.
          If the range is smaller than the source range, the entire
          source data will still be copied (beyond the end of the destination range).
        type: GridRange
        required: false
      pasteOrientation:
        description: How that data should be oriented when pasting.
        enum:
          - NORMAL
          - TRANSPOSE
        type: string
        required: false
      pasteType:
        description: What kind of data to paste.
        enum:
          - PASTE_NORMAL
          - PASTE_VALUES
          - PASTE_FORMAT
          - PASTE_NO_BORDERS
          - PASTE_FORMULA
          - PASTE_DATA_VALIDATION
          - PASTE_CONDITIONAL_FORMATTING
        type: string
        required: false
      source:
        description: The source range to copy.
        type: GridRange
        required: false
  CopySheetToAnotherSpreadsheetRequest:
    description: The request to copy a sheet across spreadsheets.
    properties:
      destinationSpreadsheetId:
        description: The ID of the spreadsheet to copy the sheet to.
        type: string
        required: false
  CutPasteRequest:
    description: Moves data from the source to the destination.
    properties:
      destination:
        description: The top-left coordinate where the data should be pasted.
        type: GridCoordinate
        required: false
      pasteType:
        description: |-
          What kind of data to paste.  All the source data will be cut, regardless
          of what is pasted.
        enum:
          - PASTE_NORMAL
          - PASTE_VALUES
          - PASTE_FORMAT
          - PASTE_NO_BORDERS
          - PASTE_FORMULA
          - PASTE_DATA_VALIDATION
          - PASTE_CONDITIONAL_FORMATTING
        type: string
        required: false
      source:
        description: The source data to cut.
        type: GridRange
        required: false
  DataValidationRule:
    description: A data validation rule.
    properties:
      condition:
        description: The condition that data in the cell must match.
        type: BooleanCondition
        required: false
      inputMessage:
        description: A message to show the user when adding data to the cell.
        type: string
        required: false
      showCustomUi:
        description: |-
          True if the UI should be customized based on the kind of condition.
          If true, "List" conditions will show a dropdown.
        type: boolean
        required: false
      strict:
        description: True if invalid data should be rejected.
        type: boolean
        required: false
  DeleteBandingRequest:
    description: Removes the banded range with the given ID from the spreadsheet.
    properties:
      bandedRangeId:
        description: The ID of the banded range to delete.
        format: int32
        type: integer
        required: false
  DeleteConditionalFormatRuleRequest:
    description: |-
      Deletes a conditional format rule at the given index.
      All subsequent rules' indexes are decremented.
    properties:
      index:
        description: The zero-based index of the rule to be deleted.
        format: int32
        type: integer
        required: false
      sheetId:
        description: The sheet the rule is being deleted from.
        format: int32
        type: integer
        required: false
  DeleteConditionalFormatRuleResponse:
    description: The result of deleting a conditional format rule.
    properties:
      rule:
        description: The rule that was deleted.
        type: ConditionalFormatRule
        required: false
  DeleteDimensionRequest:
    description: Deletes the dimensions from the sheet.
    properties:
      range:
        description: The dimensions to delete from the sheet.
        type: DimensionRange
        required: false
  DeleteEmbeddedObjectRequest:
    description: Deletes the embedded object with the given ID.
    properties:
      objectId:
        description: The ID of the embedded object to delete.
        format: int32
        type: integer
        required: false
  DeleteFilterViewRequest:
    description: Deletes a particular filter view.
    properties:
      filterId:
        description: The ID of the filter to delete.
        format: int32
        type: integer
        required: false
  DeleteNamedRangeRequest:
    description: Removes the named range with the given ID from the spreadsheet.
    properties:
      namedRangeId:
        description: The ID of the named range to delete.
        type: string
        required: false
  DeleteProtectedRangeRequest:
    description: Deletes the protected range with the given ID.
    properties:
      protectedRangeId:
        description: The ID of the protected range to delete.
        format: int32
        type: integer
        required: false
  DeleteSheetRequest:
    description: Deletes the requested sheet.
    properties:
      sheetId:
        description: The ID of the sheet to delete.
        format: int32
        type: integer
        required: false
  DimensionProperties:
    description: Properties about a dimension.
    properties:
      hiddenByFilter:
        description: |-
          True if this dimension is being filtered.
          This field is read-only.
        type: boolean
        required: false
      hiddenByUser:
        description: True if this dimension is explicitly hidden.
        type: boolean
        required: false
      pixelSize:
        description: The height (if a row) or width (if a column) of the dimension in pixels.
        format: int32
        type: integer
        required: false
  DimensionRange:
    description: |-
      A range along a single dimension on a sheet.
      All indexes are zero-based.
      Indexes are half open: the start index is inclusive
      and the end index is exclusive.
      Missing indexes indicate the range is unbounded on that side.
    properties:
      dimension:
        description: The dimension of the span.
        enum:
          - DIMENSION_UNSPECIFIED
          - ROWS
          - COLUMNS
        type: string
        required: false
      endIndex:
        description: 'The end (exclusive) of the span, or not set if unbounded.'
        format: int32
        type: integer
        required: false
      sheetId:
        description: The sheet this span is on.
        format: int32
        type: integer
        required: false
      startIndex:
        description: 'The start (inclusive) of the span, or not set if unbounded.'
        format: int32
        type: integer
        required: false
  DuplicateFilterViewRequest:
    description: Duplicates a particular filter view.
    properties:
      filterId:
        description: The ID of the filter being duplicated.
        format: int32
        type: integer
        required: false
  DuplicateFilterViewResponse:
    description: The result of a filter view being duplicated.
    properties:
      filter:
        description: The newly created filter.
        type: FilterView
        required: false
  DuplicateSheetRequest:
    description: Duplicates the contents of a sheet.
    properties:
      insertSheetIndex:
        description: |-
          The zero-based index where the new sheet should be inserted.
          The index of all sheets after this are incremented.
        format: int32
        type: integer
        required: false
      newSheetId:
        description: |-
          If set, the ID of the new sheet. If not set, an ID is chosen.
          If set, the ID must not conflict with any existing sheet ID.
          If set, it must be non-negative.
        format: int32
        type: integer
        required: false
      newSheetName:
        description: 'The name of the new sheet.  If empty, a new name is chosen for you.'
        type: string
        required: false
      sourceSheetId:
        description: The sheet to duplicate.
        format: int32
        type: integer
        required: false
  DuplicateSheetResponse:
    description: The result of duplicating a sheet.
    properties:
      properties:
        description: The properties of the duplicate sheet.
        type: SheetProperties
        required: false
  Editors:
    description: The editors of a protected range.
    properties:
      domainUsersCanEdit:
        description: |-
          True if anyone in the document's domain has edit access to the protected
          range.  Domain protection is only supported on documents within a domain.
        type: boolean
        required: false
      groups:
        description: The email addresses of groups with edit access to the protected range.
        items:
          type: string
        type: array
        required: false
      users:
        description: The email addresses of users with edit access to the protected range.
        items:
          type: string
        type: array
        required: false
  EmbeddedChart:
    description: A chart embedded in a sheet.
    properties:
      chartId:
        description: The ID of the chart.
        format: int32
        type: integer
        required: false
      position:
        description: The position of the chart.
        type: EmbeddedObjectPosition
        required: false
      spec:
        description: The specification of the chart.
        type: ChartSpec
        required: false
  EmbeddedObjectPosition:
    description: The position of an embedded object such as a chart.
    properties:
      newSheet:
        description: |-
          If true, the embedded object will be put on a new sheet whose ID
          is chosen for you. Used only when writing.
        type: boolean
        required: false
      overlayPosition:
        description: The position at which the object is overlaid on top of a grid.
        type: OverlayPosition
        required: false
      sheetId:
        description: |-
          The sheet this is on. Set only if the embedded object
          is on its own sheet. Must be non-negative.
        format: int32
        type: integer
        required: false
  ErrorValue:
    description: An error in a cell.
    properties:
      message:
        description: |-
          A message with more information about the error
          (in the spreadsheet's locale).
        type: string
        required: false
      type:
        description: The type of error.
        enum:
          - ERROR_TYPE_UNSPECIFIED
          - ERROR
          - NULL_VALUE
          - DIVIDE_BY_ZERO
          - VALUE
          - REF
          - NAME
          - NUM
          - N_A
          - LOADING
        type: string
        required: false
  ExtendedValue:
    description: The kinds of value that a cell in a spreadsheet can have.
    properties:
      boolValue:
        description: Represents a boolean value.
        type: boolean
        required: false
      errorValue:
        description: |-
          Represents an error.
          This field is read-only.
        type: ErrorValue
        required: false
      formulaValue:
        description: Represents a formula.
        type: string
        required: false
      numberValue:
        description: |-
          Represents a double value.
          Note: Dates, Times and DateTimes are represented as doubles in
          "serial number" format.
        format: double
        type: number
        required: false
      stringValue:
        description: |-
          Represents a string value.
          Leading single quotes are not included. For example, if the user typed
          `'123` into the UI, this would be represented as a `stringValue` of
          `"123"`.
        type: string
        required: false
  FilterCriteria:
    description: Criteria for showing/hiding rows in a filter or filter view.
    properties:
      condition:
        description: |-
          A condition that must be true for values to be shown.
          (This does not override hiddenValues -- if a value is listed there,
           it will still be hidden.)
        type: BooleanCondition
        required: false
      hiddenValues:
        description: Values that should be hidden.
        items:
          type: string
        type: array
        required: false
  FilterView:
    description: A filter view.
    properties:
      criteria:
        additionalProperties:
          type: FilterCriteria
        description: |-
          The criteria for showing/hiding values per column.
          The map's key is the column index, and the value is the criteria for
          that column.
        type: object
        required: false
      filterViewId:
        description: The ID of the filter view.
        format: int32
        type: integer
        required: false
      namedRangeId:
        description: |-
          The named range this filter view is backed by, if any.

          When writing, only one of range or named_range_id
          may be set.
        type: string
        required: false
      range:
        description: |-
          The range this filter view covers.

          When writing, only one of range or named_range_id
          may be set.
        type: GridRange
        required: false
      sortSpecs:
        description: |-
          The sort order per column. Later specifications are used when values
          are equal in the earlier specifications.
        items:
          type: SortSpec
        type: array
        required: false
      title:
        description: The name of the filter view.
        type: string
        required: false
  FindReplaceRequest:
    description: 'Finds and replaces data in cells over a range, sheet, or all sheets.'
    properties:
      allSheets:
        description: True to find/replace over all sheets.
        type: boolean
        required: false
      find:
        description: The value to search.
        type: string
        required: false
      includeFormulas:
        description: |-
          True if the search should include cells with formulas.
          False to skip cells with formulas.
        type: boolean
        required: false
      matchCase:
        description: True if the search is case sensitive.
        type: boolean
        required: false
      matchEntireCell:
        description: True if the find value should match the entire cell.
        type: boolean
        required: false
      range:
        description: The range to find/replace over.
        type: GridRange
        required: false
      replacement:
        description: The value to use as the replacement.
        type: string
        required: false
      searchByRegex:
        description: |-
          True if the find value is a regex.
          The regular expression and replacement should follow Java regex rules
          at https://docs.oracle.com/javase/8/docs/api/java/util/regex/Pattern.html.
          The replacement string is allowed to refer to capturing groups.
          For example, if one cell has the contents `"Google Sheets"` and another
          has `"Google Docs"`, then searching for `"o.* (.*)"` with a replacement of
          `"$1 Rocks"` would change the contents of the cells to
          `"GSheets Rocks"` and `"GDocs Rocks"` respectively.
        type: boolean
        required: false
      sheetId:
        description: The sheet to find/replace over.
        format: int32
        type: integer
        required: false
  FindReplaceResponse:
    description: The result of the find/replace.
    properties:
      formulasChanged:
        description: The number of formula cells changed.
        format: int32
        type: integer
        required: false
      occurrencesChanged:
        description: |-
          The number of occurrences (possibly multiple within a cell) changed.
          For example, if replacing `"e"` with `"o"` in `"Google Sheets"`, this would
          be `"3"` because `"Google Sheets"` -> `"Googlo Shoots"`.
        format: int32
        type: integer
        required: false
      rowsChanged:
        description: The number of rows changed.
        format: int32
        type: integer
        required: false
      sheetsChanged:
        description: The number of sheets changed.
        format: int32
        type: integer
        required: false
      valuesChanged:
        description: The number of non-formula cells changed.
        format: int32
        type: integer
        required: false
  GradientRule:
    description: |-
      A rule that applies a gradient color scale format, based on
      the interpolation points listed. The format of a cell will vary
      based on its contents as compared to the values of the interpolation
      points.
    properties:
      maxpoint:
        description: The final interpolation point.
        type: InterpolationPoint
        required: false
      midpoint:
        description: An optional midway interpolation point.
        type: InterpolationPoint
        required: false
      minpoint:
        description: The starting interpolation point.
        type: InterpolationPoint
        required: false
  GridCoordinate:
    description: |-
      A coordinate in a sheet.
      All indexes are zero-based.
    properties:
      columnIndex:
        description: The column index of the coordinate.
        format: int32
        type: integer
        required: false
      rowIndex:
        description: The row index of the coordinate.
        format: int32
        type: integer
        required: false
      sheetId:
        description: The sheet this coordinate is on.
        format: int32
        type: integer
        required: false
  GridData:
    description: 'Data in the grid, as well as metadata about the dimensions.'
    properties:
      columnMetadata:
        description: |-
          Metadata about the requested columns in the grid, starting with the column
          in start_column.
        items:
          type: DimensionProperties
        type: array
        required: false
      rowData:
        description: |-
          The data in the grid, one entry per row,
          starting with the row in startRow.
          The values in RowData will correspond to columns starting
          at start_column.
        items:
          type: RowData
        type: array
        required: false
      rowMetadata:
        description: |-
          Metadata about the requested rows in the grid, starting with the row
          in start_row.
        items:
          type: DimensionProperties
        type: array
        required: false
      startColumn:
        description: 'The first column this GridData refers to, zero-based.'
        format: int32
        type: integer
        required: false
      startRow:
        description: 'The first row this GridData refers to, zero-based.'
        format: int32
        type: integer
        required: false
  GridProperties:
    description: Properties of a grid.
    properties:
      columnCount:
        description: The number of columns in the grid.
        format: int32
        type: integer
        required: false
      frozenColumnCount:
        description: The number of columns that are frozen in the grid.
        format: int32
        type: integer
        required: false
      frozenRowCount:
        description: The number of rows that are frozen in the grid.
        format: int32
        type: integer
        required: false
      hideGridlines:
        description: True if the grid isn't showing gridlines in the UI.
        type: boolean
        required: false
      rowCount:
        description: The number of rows in the grid.
        format: int32
        type: integer
        required: false
  GridRange:
    description: |-
      A range on a sheet.
      All indexes are zero-based.
      Indexes are half open, e.g the start index is inclusive
      and the end index is exclusive -- [start_index, end_index).
      Missing indexes indicate the range is unbounded on that side.

      For example, if `"Sheet1"` is sheet ID 0, then:

        `Sheet1!A1:A1 == sheet_id: 0,
                        start_row_index: 0, end_row_index: 1,
                        start_column_index: 0, end_column_index: 1`

        `Sheet1!A3:B4 == sheet_id: 0,
                        start_row_index: 2, end_row_index: 4,
                        start_column_index: 0, end_column_index: 2`

        `Sheet1!A:B == sheet_id: 0,
                      start_column_index: 0, end_column_index: 2`

        `Sheet1!A5:B == sheet_id: 0,
                       start_row_index: 4,
                       start_column_index: 0, end_column_index: 2`

        `Sheet1 == sheet_id:0`

      The start index must always be less than or equal to the end index.
      If the start index equals the end index, then the range is empty.
      Empty ranges are typically not meaningful and are usually rendered in the
      UI as `#REF!`.
    properties:
      endColumnIndex:
        description: 'The end column (exclusive) of the range, or not set if unbounded.'
        format: int32
        type: integer
        required: false
      endRowIndex:
        description: 'The end row (exclusive) of the range, or not set if unbounded.'
        format: int32
        type: integer
        required: false
      sheetId:
        description: The sheet this range is on.
        format: int32
        type: integer
        required: false
      startColumnIndex:
        description: 'The start column (inclusive) of the range, or not set if unbounded.'
        format: int32
        type: integer
        required: false
      startRowIndex:
        description: 'The start row (inclusive) of the range, or not set if unbounded.'
        format: int32
        type: integer
        required: false
  InsertDimensionRequest:
    description: Inserts rows or columns in a sheet at a particular index.
    properties:
      inheritFromBefore:
        description: |-
          Whether dimension properties should be extended from the dimensions
          before or after the newly inserted dimensions.
          True to inherit from the dimensions before (in which case the start
          index must be greater than 0), and false to inherit from the dimensions
          after.

          For example, if row index 0 has red background and row index 1
          has a green background, then inserting 2 rows at index 1 can inherit
          either the green or red background.  If `inheritFromBefore` is true,
          the two new rows will be red (because the row before the insertion point
          was red), whereas if `inheritFromBefore` is false, the two new rows will
          be green (because the row after the insertion point was green).
        type: boolean
        required: false
      range:
        description: The dimensions to insert.  Both the start and end indexes must be bounded.
        type: DimensionRange
        required: false
  InterpolationPoint:
    description: |-
      A single interpolation point on a gradient conditional format.
      These pin the gradient color scale according to the color,
      type and value chosen.
    properties:
      color:
        description: The color this interpolation point should use.
        type: Color
        required: false
      type:
        description: How the value should be interpreted.
        enum:
          - INTERPOLATION_POINT_TYPE_UNSPECIFIED
          - MIN
          - MAX
          - NUMBER
          - PERCENT
          - PERCENTILE
        type: string
        required: false
      value:
        description: |-
          The value this interpolation point uses.  May be a formula.
          Unused if type is MIN or
          MAX.
        type: string
        required: false
  MergeCellsRequest:
    description: Merges all cells in the range.
    properties:
      mergeType:
        description: How the cells should be merged.
        enum:
          - MERGE_ALL
          - MERGE_COLUMNS
          - MERGE_ROWS
        type: string
        required: false
      range:
        description: The range of cells to merge.
        type: GridRange
        required: false
  MoveDimensionRequest:
    description: Moves one or more rows or columns.
    properties:
      destinationIndex:
        description: |-
          The zero-based start index of where to move the source data to,
          based on the coordinates *before* the source data is removed
          from the grid.  Existing data will be shifted down or right
          (depending on the dimension) to make room for the moved dimensions.
          The source dimensions are removed from the grid, so the
          the data may end up in a different index than specified.

          For example, given `A1..A5` of `0, 1, 2, 3, 4` and wanting to move
          `"1"` and `"2"` to between `"3"` and `"4"`, the source would be
          `ROWS [1..3)`,and the destination index would be `"4"`
          (the zero-based index of row 5).
          The end result would be `A1..A5` of `0, 3, 1, 2, 4`.
        format: int32
        type: integer
        required: false
      source:
        description: The source dimensions to move.
        type: DimensionRange
        required: false
  NamedRange:
    description: A named range.
    properties:
      name:
        description: The name of the named range.
        type: string
        required: false
      namedRangeId:
        description: The ID of the named range.
        type: string
        required: false
      range:
        description: The range this represents.
        type: GridRange
        required: false
  NumberFormat:
    description: The number format of a cell.
    properties:
      pattern:
        description: |-
          Pattern string used for formatting.  If not set, a default pattern based on
          the user's locale will be used if necessary for the given type.
          See the [Date and Number Formats guide](/sheets/guides/formats) for more
          information about the supported patterns.
        type: string
        required: false
      type:
        description: |-
          The type of the number format.
          When writing, this field must be set.
        enum:
          - NUMBER_FORMAT_TYPE_UNSPECIFIED
          - TEXT
          - NUMBER
          - PERCENT
          - CURRENCY
          - DATE
          - TIME
          - DATE_TIME
          - SCIENTIFIC
        type: string
        required: false
  OverlayPosition:
    description: The location an object is overlaid on top of a grid.
    properties:
      anchorCell:
        description: The cell the object is anchored to.
        type: GridCoordinate
        required: false
      heightPixels:
        description: 'The height of the object, in pixels. Defaults to 371.'
        format: int32
        type: integer
        required: false
      offsetXPixels:
        description: |-
          The horizontal offset, in pixels, that the object is offset
          from the anchor cell.
        format: int32
        type: integer
        required: false
      offsetYPixels:
        description: |-
          The vertical offset, in pixels, that the object is offset
          from the anchor cell.
        format: int32
        type: integer
        required: false
      widthPixels:
        description: 'The width of the object, in pixels. Defaults to 600.'
        format: int32
        type: integer
        required: false
  Padding:
    description: |-
      The amount of padding around the cell, in pixels.
      When updating padding, every field must be specified.
    properties:
      bottom:
        description: The bottom padding of the cell.
        format: int32
        type: integer
        required: false
      left:
        description: The left padding of the cell.
        format: int32
        type: integer
        required: false
      right:
        description: The right padding of the cell.
        format: int32
        type: integer
        required: false
      top:
        description: The top padding of the cell.
        format: int32
        type: integer
        required: false
  PasteDataRequest:
    description: Inserts data into the spreadsheet starting at the specified coordinate.
    properties:
      coordinate:
        description: The coordinate at which the data should start being inserted.
        type: GridCoordinate
        required: false
      data:
        description: The data to insert.
        type: string
        required: false
      delimiter:
        description: The delimiter in the data.
        type: string
        required: false
      html:
        description: True if the data is HTML.
        type: boolean
        required: false
      type:
        description: How the data should be pasted.
        enum:
          - PASTE_NORMAL
          - PASTE_VALUES
          - PASTE_FORMAT
          - PASTE_NO_BORDERS
          - PASTE_FORMULA
          - PASTE_DATA_VALIDATION
          - PASTE_CONDITIONAL_FORMATTING
        type: string
        required: false
  PieChartSpec:
    description: A <a href="/chart/interactive/docs/gallery/piechart">pie chart</a>.
    properties:
      domain:
        description: The data that covers the domain of the pie chart.
        type: ChartData
        required: false
      legendPosition:
        description: Where the legend of the pie chart should be drawn.
        enum:
          - PIE_CHART_LEGEND_POSITION_UNSPECIFIED
          - BOTTOM_LEGEND
          - LEFT_LEGEND
          - RIGHT_LEGEND
          - TOP_LEGEND
          - NO_LEGEND
          - LABELED_LEGEND
        type: string
        required: false
      pieHole:
        description: The size of the hole in the pie chart.
        format: double
        type: number
        required: false
      series:
        description: The data that covers the one and only series of the pie chart.
        type: ChartData
        required: false
      threeDimensional:
        description: True if the pie is three dimensional.
        type: boolean
        required: false
  PivotFilterCriteria:
    description: Criteria for showing/hiding rows in a pivot table.
    properties:
      visibleValues:
        description: Values that should be included.  Values not listed here are excluded.
        items:
          type: string
        type: array
        required: false
  PivotGroup:
    description: A single grouping (either row or column) in a pivot table.
    properties:
      showTotals:
        description: True if the pivot table should include the totals for this grouping.
        type: boolean
        required: false
      sortOrder:
        description: The order the values in this group should be sorted.
        enum:
          - SORT_ORDER_UNSPECIFIED
          - ASCENDING
          - DESCENDING
        type: string
        required: false
      sourceColumnOffset:
        description: |-
          The column offset of the source range that this grouping is based on.

          For example, if the source was `C10:E15`, a `sourceColumnOffset` of `0`
          means this group refers to column `C`, whereas the offset `1` would refer
          to column `D`.
        format: int32
        type: integer
        required: false
      valueBucket:
        description: |-
          The bucket of the opposite pivot group to sort by.
          If not specified, sorting is alphabetical by this group's values.
        type: PivotGroupSortValueBucket
        required: false
      valueMetadata:
        description: Metadata about values in the grouping.
        items:
          type: PivotGroupValueMetadata
        type: array
        required: false
  PivotGroupSortValueBucket:
    description: Information about which values in a pivot group should be used for sorting.
    properties:
      buckets:
        description: |-
          Determines the bucket from which values are chosen to sort.

          For example, in a pivot table with one row group & two column groups,
          the row group can list up to two values. The first value corresponds
          to a value within the first column group, and the second value
          corresponds to a value in the second column group.  If no values
          are listed, this would indicate that the row should be sorted according
          to the "Grand Total" over the column groups. If a single value is listed,
          this would correspond to using the "Total" of that bucket.
        items:
          type: ExtendedValue
        type: array
        required: false
      valuesIndex:
        description: |-
          The offset in the PivotTable.values list which the values in this
          grouping should be sorted by.
        format: int32
        type: integer
        required: false
  PivotGroupValueMetadata:
    description: Metadata about a value in a pivot grouping.
    properties:
      collapsed:
        description: True if the data corresponding to the value is collapsed.
        type: boolean
        required: false
      value:
        description: |-
          The calculated value the metadata corresponds to.
          (Note that formulaValue is not valid,
           because the values will be calculated.)
        type: ExtendedValue
        required: false
  PivotTable:
    description: A pivot table.
    properties:
      columns:
        description: Each column grouping in the pivot table.
        items:
          type: PivotGroup
        type: array
        required: false
      criteria:
        additionalProperties:
          type: PivotFilterCriteria
        description: |-
          An optional mapping of filters per source column offset.

          The filters will be applied before aggregating data into the pivot table.
          The map's key is the column offset of the source range that you want to
          filter, and the value is the criteria for that column.

          For example, if the source was `C10:E15`, a key of `0` will have the filter
          for column `C`, whereas the key `1` is for column `D`.
        type: object
        required: false
      rows:
        description: Each row grouping in the pivot table.
        items:
          type: PivotGroup
        type: array
        required: false
      source:
        description: The range the pivot table is reading data from.
        type: GridRange
        required: false
      valueLayout:
        description: |-
          Whether values should be listed horizontally (as columns)
          or vertically (as rows).
        enum:
          - HORIZONTAL
          - VERTICAL
        type: string
        required: false
      values:
        description: A list of values to include in the pivot table.
        items:
          type: PivotValue
        type: array
        required: false
  PivotValue:
    description: The definition of how a value in a pivot table should be calculated.
    properties:
      formula:
        description: |-
          A custom formula to calculate the value.  The formula must start
          with an `=` character.
        type: string
        required: false
      name:
        description: |-
          A name to use for the value. This is only used if formula was set.
          Otherwise, the column name is used.
        type: string
        required: false
      sourceColumnOffset:
        description: |-
          The column offset of the source range that this value reads from.

          For example, if the source was `C10:E15`, a `sourceColumnOffset` of `0`
          means this value refers to column `C`, whereas the offset `1` would
          refer to column `D`.
        format: int32
        type: integer
        required: false
      summarizeFunction:
        description: |-
          A function to summarize the value.
          If formula is set, the only supported values are
          SUM and
          CUSTOM.
          If sourceColumnOffset is set, then `CUSTOM`
          is not supported.
        enum:
          - PIVOT_STANDARD_VALUE_FUNCTION_UNSPECIFIED
          - SUM
          - COUNTA
          - COUNT
          - COUNTUNIQUE
          - AVERAGE
          - MAX
          - MIN
          - MEDIAN
          - PRODUCT
          - STDEV
          - STDEVP
          - VAR
          - VARP
          - CUSTOM
        type: string
        required: false
  ProtectedRange:
    description: A protected range.
    properties:
      description:
        description: The description of this protected range.
        type: string
        required: false
      editors:
        description: |-
          The users and groups with edit access to the protected range.
          This field is only visible to users with edit access to the protected
          range and the document.
          Editors are not supported with warning_only protection.
        type: Editors
        required: false
      namedRangeId:
        description: |-
          The named range this protected range is backed by, if any.

          When writing, only one of range or named_range_id
          may be set.
        type: string
        required: false
      protectedRangeId:
        description: |-
          The ID of the protected range.
          This field is read-only.
        format: int32
        type: integer
        required: false
      range:
        description: |-
          The range that is being protected.
          The range may be fully unbounded, in which case this is considered
          a protected sheet.

          When writing, only one of range or named_range_id
          may be set.
        type: GridRange
        required: false
      requestingUserCanEdit:
        description: |-
          True if the user who requested this protected range can edit the
          protected area.
          This field is read-only.
        type: boolean
        required: false
      unprotectedRanges:
        description: |-
          The list of unprotected ranges within a protected sheet.
          Unprotected ranges are only supported on protected sheets.
        items:
          type: GridRange
        type: array
        required: false
      warningOnly:
        description: |-
          True if this protected range will show a warning when editing.
          Warning-based protection means that every user can edit data in the
          protected range, except editing will prompt a warning asking the user
          to confirm the edit.

          When writing: if this field is true, then editors is ignored.
          Additionally, if this field is changed from true to false and the
          `editors` field is not set (nor included in the field mask), then
          the editors will be set to all the editors in the document.
        type: boolean
        required: false
  RepeatCellRequest:
    description: |-
      Updates all cells in the range to the values in the given Cell object.
      Only the fields listed in the fields field are updated; others are
      unchanged.

      If writing a cell with a formula, the formula's ranges will automatically
      increment for each field in the range.
      For example, if writing a cell with formula `=A1` into range B2:C4,
      B2 would be `=A1`, B3 would be `=A2`, B4 would be `=A3`,
      C2 would be `=B1`, C3 would be `=B2`, C4 would be `=B3`.

      To keep the formula's ranges static, use the `$` indicator.
      For example, use the formula `=$A$1` to prevent both the row and the
      column from incrementing.
    properties:
      cell:
        description: The data to write.
        type: CellData
        required: false
      fields:
        description: |-
          The fields that should be updated.  At least one field must be specified.
          The root `cell` is implied and should not be specified.
          A single `"*"` can be used as short-hand for listing every field.
        format: google-fieldmask
        type: string
        facets:
          format: string
        required: false
      range:
        description: The range to repeat the cell in.
        type: GridRange
        required: false
  Request:
    description: A single kind of update to apply to a spreadsheet.
    properties:
      addBanding:
        description: Adds a new banded range
        type: AddBandingRequest
        required: false
      addChart:
        description: Adds a chart.
        type: AddChartRequest
        required: false
      addConditionalFormatRule:
        description: Adds a new conditional format rule.
        type: AddConditionalFormatRuleRequest
        required: false
      addFilterView:
        description: Adds a filter view.
        type: AddFilterViewRequest
        required: false
      addNamedRange:
        description: Adds a named range.
        type: AddNamedRangeRequest
        required: false
      addProtectedRange:
        description: Adds a protected range.
        type: AddProtectedRangeRequest
        required: false
      addSheet:
        description: Adds a sheet.
        type: AddSheetRequest
        required: false
      appendCells:
        description: Appends cells after the last row with data in a sheet.
        type: AppendCellsRequest
        required: false
      appendDimension:
        description: Appends dimensions to the end of a sheet.
        type: AppendDimensionRequest
        required: false
      autoFill:
        description: Automatically fills in more data based on existing data.
        type: AutoFillRequest
        required: false
      autoResizeDimensions:
        description: |-
          Automatically resizes one or more dimensions based on the contents
          of the cells in that dimension.
        type: AutoResizeDimensionsRequest
        required: false
      clearBasicFilter:
        description: Clears the basic filter on a sheet.
        type: ClearBasicFilterRequest
        required: false
      copyPaste:
        description: Copies data from one area and pastes it to another.
        type: CopyPasteRequest
        required: false
      cutPaste:
        description: Cuts data from one area and pastes it to another.
        type: CutPasteRequest
        required: false
      deleteBanding:
        description: Removes a banded range
        type: DeleteBandingRequest
        required: false
      deleteConditionalFormatRule:
        description: Deletes an existing conditional format rule.
        type: DeleteConditionalFormatRuleRequest
        required: false
      deleteDimension:
        description: Deletes rows or columns in a sheet.
        type: DeleteDimensionRequest
        required: false
      deleteEmbeddedObject:
        description: 'Deletes an embedded object (e.g, chart, image) in a sheet.'
        type: DeleteEmbeddedObjectRequest
        required: false
      deleteFilterView:
        description: Deletes a filter view from a sheet.
        type: DeleteFilterViewRequest
        required: false
      deleteNamedRange:
        description: Deletes a named range.
        type: DeleteNamedRangeRequest
        required: false
      deleteProtectedRange:
        description: Deletes a protected range.
        type: DeleteProtectedRangeRequest
        required: false
      deleteSheet:
        description: Deletes a sheet.
        type: DeleteSheetRequest
        required: false
      duplicateFilterView:
        description: Duplicates a filter view.
        type: DuplicateFilterViewRequest
        required: false
      duplicateSheet:
        description: Duplicates a sheet.
        type: DuplicateSheetRequest
        required: false
      findReplace:
        description: Finds and replaces occurrences of some text with other text.
        type: FindReplaceRequest
        required: false
      insertDimension:
        description: Inserts new rows or columns in a sheet.
        type: InsertDimensionRequest
        required: false
      mergeCells:
        description: Merges cells together.
        type: MergeCellsRequest
        required: false
      moveDimension:
        description: Moves rows or columns to another location in a sheet.
        type: MoveDimensionRequest
        required: false
      pasteData:
        description: Pastes data (HTML or delimited) into a sheet.
        type: PasteDataRequest
        required: false
      repeatCell:
        description: Repeats a single cell across a range.
        type: RepeatCellRequest
        required: false
      setBasicFilter:
        description: Sets the basic filter on a sheet.
        type: SetBasicFilterRequest
        required: false
      setDataValidation:
        description: Sets data validation for one or more cells.
        type: SetDataValidationRequest
        required: false
      sortRange:
        description: Sorts data in a range.
        type: SortRangeRequest
        required: false
      textToColumns:
        description: Converts a column of text into many columns of text.
        type: TextToColumnsRequest
        required: false
      unmergeCells:
        description: Unmerges merged cells.
        type: UnmergeCellsRequest
        required: false
      updateBanding:
        description: Updates a banded range
        type: UpdateBandingRequest
        required: false
      updateBorders:
        description: Updates the borders in a range of cells.
        type: UpdateBordersRequest
        required: false
      updateCells:
        description: Updates many cells at once.
        type: UpdateCellsRequest
        required: false
      updateChartSpec:
        description: Updates a chart's specifications.
        type: UpdateChartSpecRequest
        required: false
      updateConditionalFormatRule:
        description: Updates an existing conditional format rule.
        type: UpdateConditionalFormatRuleRequest
        required: false
      updateDimensionProperties:
        description: Updates dimensions' properties.
        type: UpdateDimensionPropertiesRequest
        required: false
      updateEmbeddedObjectPosition:
        description: 'Updates an embedded object''s (e.g. chart, image) position.'
        type: UpdateEmbeddedObjectPositionRequest
        required: false
      updateFilterView:
        description: Updates the properties of a filter view.
        type: UpdateFilterViewRequest
        required: false
      updateNamedRange:
        description: Updates a named range.
        type: UpdateNamedRangeRequest
        required: false
      updateProtectedRange:
        description: Updates a protected range.
        type: UpdateProtectedRangeRequest
        required: false
      updateSheetProperties:
        description: Updates a sheet's properties.
        type: UpdateSheetPropertiesRequest
        required: false
      updateSpreadsheetProperties:
        description: Updates the spreadsheet's properties.
        type: UpdateSpreadsheetPropertiesRequest
        required: false
  Response:
    description: A single response from an update.
    properties:
      addBanding:
        description: A reply from adding a banded range.
        type: AddBandingResponse
        required: false
      addChart:
        description: A reply from adding a chart.
        type: AddChartResponse
        required: false
      addFilterView:
        description: A reply from adding a filter view.
        type: AddFilterViewResponse
        required: false
      addNamedRange:
        description: A reply from adding a named range.
        type: AddNamedRangeResponse
        required: false
      addProtectedRange:
        description: A reply from adding a protected range.
        type: AddProtectedRangeResponse
        required: false
      addSheet:
        description: A reply from adding a sheet.
        type: AddSheetResponse
        required: false
      deleteConditionalFormatRule:
        description: A reply from deleting a conditional format rule.
        type: DeleteConditionalFormatRuleResponse
        required: false
      duplicateFilterView:
        description: A reply from duplicating a filter view.
        type: DuplicateFilterViewResponse
        required: false
      duplicateSheet:
        description: A reply from duplicating a sheet.
        type: DuplicateSheetResponse
        required: false
      findReplace:
        description: A reply from doing a find/replace.
        type: FindReplaceResponse
        required: false
      updateConditionalFormatRule:
        description: A reply from updating a conditional format rule.
        type: UpdateConditionalFormatRuleResponse
        required: false
      updateEmbeddedObjectPosition:
        description: A reply from updating an embedded object's position.
        type: UpdateEmbeddedObjectPositionResponse
        required: false
  RowData:
    description: Data about each cell in a row.
    properties:
      values:
        description: 'The values in the row, one per column.'
        items:
          type: CellData
        type: array
        required: false
  SetBasicFilterRequest:
    description: Sets the basic filter associated with a sheet.
    properties:
      filter:
        description: The filter to set.
        type: BasicFilter
        required: false
  SetDataValidationRequest:
    description: |-
      Sets a data validation rule to every cell in the range.
      To clear validation in a range, call this with no rule specified.
    properties:
      range:
        description: The range the data validation rule should apply to.
        type: GridRange
        required: false
      rule:
        description: |-
          The data validation rule to set on each cell in the range,
          or empty to clear the data validation in the range.
        type: DataValidationRule
        required: false
  Sheet:
    description: A sheet in a spreadsheet.
    properties:
      bandedRanges:
        description: The banded (i.e. alternating colors) ranges on this sheet.
        items:
          type: BandedRange
        type: array
        required: false
      basicFilter:
        description: 'The filter on this sheet, if any.'
        type: BasicFilter
        required: false
      charts:
        description: The specifications of every chart on this sheet.
        items:
          type: EmbeddedChart
        type: array
        required: false
      conditionalFormats:
        description: The conditional format rules in this sheet.
        items:
          type: ConditionalFormatRule
        type: array
        required: false
      data:
        description: |-
          Data in the grid, if this is a grid sheet.
          The number of GridData objects returned is dependent on the number of
          ranges requested on this sheet. For example, if this is representing
          `Sheet1`, and the spreadsheet was requested with ranges
          `Sheet1!A1:C10` and `Sheet1!D15:E20`, then the first GridData will have a
          startRow/startColumn of `0`,
          while the second one will have `startRow 14` (zero-based row 15),
          and `startColumn 3` (zero-based column D).
        items:
          type: GridData
        type: array
        required: false
      filterViews:
        description: The filter views in this sheet.
        items:
          type: FilterView
        type: array
        required: false
      merges:
        description: The ranges that are merged together.
        items:
          type: GridRange
        type: array
        required: false
      properties:
        description: The properties of the sheet.
        type: SheetProperties
        required: false
      protectedRanges:
        description: The protected ranges in this sheet.
        items:
          type: ProtectedRange
        type: array
        required: false
  SheetProperties:
    description: Properties of a sheet.
    properties:
      gridProperties:
        description: |-
          Additional properties of the sheet if this sheet is a grid.
          (If the sheet is an object sheet, containing a chart or image, then
          this field will be absent.)
          When writing it is an error to set any grid properties on non-grid sheets.
        type: GridProperties
        required: false
      hidden:
        description: 'True if the sheet is hidden in the UI, false if it''s visible.'
        type: boolean
        required: false
      index:
        description: |-
          The index of the sheet within the spreadsheet.
          When adding or updating sheet properties, if this field
          is excluded then the sheet will be added or moved to the end
          of the sheet list.
        format: int32
        type: integer
        required: false
      rightToLeft:
        description: True if the sheet is an RTL sheet instead of an LTR sheet.
        type: boolean
        required: false
      sheetId:
        description: |-
          The ID of the sheet. Must be non-negative.
          This field cannot be changed once set.
        format: int32
        type: integer
        required: false
      sheetType:
        description: |-
          The type of sheet. Defaults to GRID.
          This field cannot be changed once set.
        enum:
          - SHEET_TYPE_UNSPECIFIED
          - GRID
          - OBJECT
        type: string
        required: false
      tabColor:
        description: The color of the tab in the UI.
        type: Color
        required: false
      title:
        description: The name of the sheet.
        type: string
        required: false
  SortRangeRequest:
    description: Sorts data in rows based on a sort order per column.
    properties:
      range:
        description: The range to sort.
        type: GridRange
        required: false
      sortSpecs:
        description: |-
          The sort order per column. Later specifications are used when values
          are equal in the earlier specifications.
        items:
          type: SortSpec
        type: array
        required: false
  SortSpec:
    description: A sort order associated with a specific column or row.
    properties:
      dimensionIndex:
        description: The dimension the sort should be applied to.
        format: int32
        type: integer
        required: false
      sortOrder:
        description: The order data should be sorted.
        enum:
          - SORT_ORDER_UNSPECIFIED
          - ASCENDING
          - DESCENDING
        type: string
        required: false
  SourceAndDestination:
    description: A combination of a source range and how to extend that source.
    properties:
      dimension:
        description: The dimension that data should be filled into.
        enum:
          - DIMENSION_UNSPECIFIED
          - ROWS
          - COLUMNS
        type: string
        required: false
      fillLength:
        description: |-
          The number of rows or columns that data should be filled into.
          Positive numbers expand beyond the last row or last column
          of the source.  Negative numbers expand before the first row
          or first column of the source.
        format: int32
        type: integer
        required: false
      source:
        description: The location of the data to use as the source of the autofill.
        type: GridRange
        required: false
  Spreadsheet:
    description: Resource that represents a spreadsheet.
    properties:
      namedRanges:
        description: The named ranges defined in a spreadsheet.
        items:
          type: NamedRange
        type: array
        required: false
      properties:
        description: Overall properties of a spreadsheet.
        type: SpreadsheetProperties
        required: false
      sheets:
        description: The sheets that are part of a spreadsheet.
        items:
          type: Sheet
        type: array
        required: false
      spreadsheetId:
        description: |-
          The ID of the spreadsheet.
          This field is read-only.
        type: string
        required: false
  SpreadsheetProperties:
    description: Properties of a spreadsheet.
    properties:
      autoRecalc:
        description: The amount of time to wait before volatile functions are recalculated.
        enum:
          - RECALCULATION_INTERVAL_UNSPECIFIED
          - ON_CHANGE
          - MINUTE
          - HOUR
        type: string
        required: false
      defaultFormat:
        description: |-
          The default format of all cells in the spreadsheet.
          CellData.effectiveFormat will not be set if the
          cell's format is equal to this default format.
          This field is read-only.
        type: CellFormat
        required: false
      locale:
        description: |-
          The locale of the spreadsheet in one of the following formats:

          * an ISO 639-1 language code such as `en`

          * an ISO 639-2 language code such as `fil`, if no 639-1 code exists

          * a combination of the ISO language code and country code, such as `en_US`

          Note: when updating this field, not all locales/languages are supported.
        type: string
        required: false
      timeZone:
        description: |-
          The time zone of the spreadsheet, in CLDR format such as
          `America/New_York`. If the time zone isn't recognized, this may
          be a custom time zone such as `GMT-07:00`.
        type: string
        required: false
      title:
        description: The title of the spreadsheet.
        type: string
        required: false
  TextFormat:
    description: |-
      The format of a run of text in a cell.
      Absent values indicate that the field isn't specified.
    properties:
      bold:
        description: True if the text is bold.
        type: boolean
        required: false
      fontFamily:
        description: The font family.
        type: string
        required: false
      fontSize:
        description: The size of the font.
        format: int32
        type: integer
        required: false
      foregroundColor:
        description: The foreground color of the text.
        type: Color
        required: false
      italic:
        description: True if the text is italicized.
        type: boolean
        required: false
      strikethrough:
        description: True if the text has a strikethrough.
        type: boolean
        required: false
      underline:
        description: True if the text is underlined.
        type: boolean
        required: false
  TextFormatRun:
    description: |-
      A run of a text format. The format of this run continues until the start
      index of the next run.
      When updating, all fields must be set.
    properties:
      format:
        description: The format of this run.  Absent values inherit the cell's format.
        type: TextFormat
        required: false
      startIndex:
        description: The character index where this run starts.
        format: int32
        type: integer
        required: false
  TextToColumnsRequest:
    description: |-
      Splits a column of text into multiple columns,
      based on a delimiter in each cell.
    properties:
      delimiter:
        description: |-
          The delimiter to use. Used only if delimiterType is
          CUSTOM.
        type: string
        required: false
      delimiterType:
        description: The delimiter type to use.
        enum:
          - DELIMITER_TYPE_UNSPECIFIED
          - COMMA
          - SEMICOLON
          - PERIOD
          - SPACE
          - CUSTOM
        type: string
        required: false
      source:
        description: The source data range.  This must span exactly one column.
        type: GridRange
        required: false
  UnmergeCellsRequest:
    description: Unmerges cells in the given range.
    properties:
      range:
        description: |-
          The range within which all cells should be unmerged.
          If the range spans multiple merges, all will be unmerged.
          The range must not partially span any merge.
        type: GridRange
        required: false
  UpdateBandingRequest:
    description: Updates properties of the supplied banded range.
    properties:
      bandedRange:
        description: The banded range to update with the new properties.
        type: BandedRange
        required: false
      fields:
        description: |-
          The fields that should be updated.  At least one field must be specified.
          The root `bandedRange` is implied and should not be specified.
          A single `"*"` can be used as short-hand for listing every field.
        format: google-fieldmask
        type: string
        facets:
          format: string
        required: false
  UpdateBordersRequest:
    description: |-
      Updates the borders of a range.
      If a field is not set in the request, that means the border remains as-is.
      For example, with two subsequent UpdateBordersRequest:

       1. range: A1:A5 `{ top: RED, bottom: WHITE }`
       2. range: A1:A5 `{ left: BLUE }`

      That would result in A1:A5 having a borders of
      `{ top: RED, bottom: WHITE, left: BLUE }`.
      If you want to clear a border, explicitly set the style to
      NONE.
    properties:
      bottom:
        description: The border to put at the bottom of the range.
        type: Border
        required: false
      innerHorizontal:
        description: The horizontal border to put within the range.
        type: Border
        required: false
      innerVertical:
        description: The vertical border to put within the range.
        type: Border
        required: false
      left:
        description: The border to put at the left of the range.
        type: Border
        required: false
      range:
        description: The range whose borders should be updated.
        type: GridRange
        required: false
      right:
        description: The border to put at the right of the range.
        type: Border
        required: false
      top:
        description: The border to put at the top of the range.
        type: Border
        required: false
  UpdateCellsRequest:
    description: Updates all cells in a range with new data.
    properties:
      fields:
        description: |-
          The fields of CellData that should be updated.
          At least one field must be specified.
          The root is the CellData; 'row.values.' should not be specified.
          A single `"*"` can be used as short-hand for listing every field.
        format: google-fieldmask
        type: string
        facets:
          format: string
        required: false
      range:
        description: |-
          The range to write data to.

          If the data in rows does not cover the entire requested range,
          the fields matching those set in fields will be cleared.
        type: GridRange
        required: false
      rows:
        description: The data to write.
        items:
          type: RowData
        type: array
        required: false
      start:
        description: |-
          The coordinate to start writing data at.
          Any number of rows and columns (including a different number of
          columns per row) may be written.
        type: GridCoordinate
        required: false
  UpdateChartSpecRequest:
    description: |-
      Updates a chart's specifications.
      (This does not move or resize a chart. To move or resize a chart, use
       UpdateEmbeddedObjectPositionRequest.)
    properties:
      chartId:
        description: The ID of the chart to update.
        format: int32
        type: integer
        required: false
      spec:
        description: The specification to apply to the chart.
        type: ChartSpec
        required: false
  UpdateConditionalFormatRuleRequest:
    description: |-
      Updates a conditional format rule at the given index,
      or moves a conditional format rule to another index.
    properties:
      index:
        description: The zero-based index of the rule that should be replaced or moved.
        format: int32
        type: integer
        required: false
      newIndex:
        description: The zero-based new index the rule should end up at.
        format: int32
        type: integer
        required: false
      rule:
        description: The rule that should replace the rule at the given index.
        type: ConditionalFormatRule
        required: false
      sheetId:
        description: |-
          The sheet of the rule to move.  Required if new_index is set,
          unused otherwise.
        format: int32
        type: integer
        required: false
  UpdateConditionalFormatRuleResponse:
    description: The result of updating a conditional format rule.
    properties:
      newIndex:
        description: The index of the new rule.
        format: int32
        type: integer
        required: false
      newRule:
        description: |-
          The new rule that replaced the old rule (if replacing),
          or the rule that was moved (if moved)
        type: ConditionalFormatRule
        required: false
      oldIndex:
        description: |-
          The old index of the rule. Not set if a rule was replaced
          (because it is the same as new_index).
        format: int32
        type: integer
        required: false
      oldRule:
        description: |-
          The old (deleted) rule. Not set if a rule was moved
          (because it is the same as new_rule).
        type: ConditionalFormatRule
        required: false
  UpdateDimensionPropertiesRequest:
    description: Updates properties of dimensions within the specified range.
    properties:
      fields:
        description: |-
          The fields that should be updated.  At least one field must be specified.
          The root `properties` is implied and should not be specified.
          A single `"*"` can be used as short-hand for listing every field.
        format: google-fieldmask
        type: string
        facets:
          format: string
        required: false
      properties:
        description: Properties to update.
        type: DimensionProperties
        required: false
      range:
        description: The rows or columns to update.
        type: DimensionRange
        required: false
  UpdateEmbeddedObjectPositionRequest:
    description: |-
      Update an embedded object's position (such as a moving or resizing a
      chart or image).
    properties:
      fields:
        description: |-
          The fields of OverlayPosition
          that should be updated when setting a new position. Used only if
          newPosition.overlayPosition
          is set, in which case at least one field must
          be specified.  The root `newPosition.overlayPosition` is implied and
          should not be specified.
          A single `"*"` can be used as short-hand for listing every field.
        format: google-fieldmask
        type: string
        facets:
          format: string
        required: false
      newPosition:
        description: |-
          An explicit position to move the embedded object to.
          If newPosition.sheetId is set,
          a new sheet with that ID will be created.
          If newPosition.newSheet is set to true,
          a new sheet will be created with an ID that will be chosen for you.
        type: EmbeddedObjectPosition
        required: false
      objectId:
        description: The ID of the object to moved.
        format: int32
        type: integer
        required: false
  UpdateEmbeddedObjectPositionResponse:
    description: The result of updating an embedded object's position.
    properties:
      position:
        description: The new position of the embedded object.
        type: EmbeddedObjectPosition
        required: false
  UpdateFilterViewRequest:
    description: Updates properties of the filter view.
    properties:
      fields:
        description: |-
          The fields that should be updated.  At least one field must be specified.
          The root `filter` is implied and should not be specified.
          A single `"*"` can be used as short-hand for listing every field.
        format: google-fieldmask
        type: string
        facets:
          format: string
        required: false
      filter:
        description: The new properties of the filter view.
        type: FilterView
        required: false
  UpdateNamedRangeRequest:
    description: |-
      Updates properties of the named range with the specified
      namedRangeId.
    properties:
      fields:
        description: |-
          The fields that should be updated.  At least one field must be specified.
          The root `namedRange` is implied and should not be specified.
          A single `"*"` can be used as short-hand for listing every field.
        format: google-fieldmask
        type: string
        facets:
          format: string
        required: false
      namedRange:
        description: The named range to update with the new properties.
        type: NamedRange
        required: false
  UpdateProtectedRangeRequest:
    description: |-
      Updates an existing protected range with the specified
      protectedRangeId.
    properties:
      fields:
        description: |-
          The fields that should be updated.  At least one field must be specified.
          The root `protectedRange` is implied and should not be specified.
          A single `"*"` can be used as short-hand for listing every field.
        format: google-fieldmask
        type: string
        facets:
          format: string
        required: false
      protectedRange:
        description: The protected range to update with the new properties.
        type: ProtectedRange
        required: false
  UpdateSheetPropertiesRequest:
    description: |-
      Updates properties of the sheet with the specified
      sheetId.
    properties:
      fields:
        description: |-
          The fields that should be updated.  At least one field must be specified.
          The root `properties` is implied and should not be specified.
          A single `"*"` can be used as short-hand for listing every field.
        format: google-fieldmask
        type: string
        facets:
          format: string
        required: false
      properties:
        description: The properties to update.
        type: SheetProperties
        required: false
  UpdateSpreadsheetPropertiesRequest:
    description: Updates properties of a spreadsheet.
    properties:
      fields:
        description: |-
          The fields that should be updated.  At least one field must be specified.
          The root 'properties' is implied and should not be specified.
          A single `"*"` can be used as short-hand for listing every field.
        format: google-fieldmask
        type: string
        facets:
          format: string
        required: false
      properties:
        description: The properties to update.
        type: SpreadsheetProperties
        required: false
  UpdateValuesResponse:
    description: The response when updating a range of values in a spreadsheet.
    properties:
      spreadsheetId:
        description: The spreadsheet the updates were applied to.
        type: string
        required: false
      updatedCells:
        description: The number of cells updated.
        format: int32
        type: integer
        required: false
      updatedColumns:
        description: The number of columns where at least one cell in the column was updated.
        format: int32
        type: integer
        required: false
      updatedData:
        description: |-
          The values of the cells after updates were applied.
          This is only included if the request's `includeValuesInResponse` field
          was `true`.
        type: ValueRange
        required: false
      updatedRange:
        description: The range (in A1 notation) that updates were applied to.
        type: string
        required: false
      updatedRows:
        description: The number of rows where at least one cell in the row was updated.
        format: int32
        type: integer
        required: false
  ValueRange:
    description: Data within a range of the spreadsheet.
    properties:
      majorDimension:
        description: |-
          The major dimension of the values.

          For output, if the spreadsheet data is: `A1=1,B1=2,A2=3,B2=4`,
          then requesting `range=A1:B2,majorDimension=ROWS` will return
          `[[1,2],[3,4]]`,
          whereas requesting `range=A1:B2,majorDimension=COLUMNS` will return
          `[[1,3],[2,4]]`.

          For input, with `range=A1:B2,majorDimension=ROWS` then `[[1,2],[3,4]]`
          will set `A1=1,B1=2,A2=3,B2=4`. With `range=A1:B2,majorDimension=COLUMNS`
          then `[[1,2],[3,4]]` will set `A1=1,B1=3,A2=2,B2=4`.

          When writing, if this field is not set, it defaults to ROWS.
        enum:
          - DIMENSION_UNSPECIFIED
          - ROWS
          - COLUMNS
        type: string
        required: false
      range:
        description: |-
          The range the values cover, in A1 notation.
          For output, this range indicates the entire requested range,
          even though the values will exclude trailing rows and columns.
          When appending values, this field represents the range to search for a
          table, after which values will be appended.
        type: string
        required: false
      values:
        description: |-
          The data that was read or to be written.  This is an array of arrays,
          the outer array representing all the data and each inner array
          representing a major dimension. Each item in the inner array
          corresponds with one cell.

          For output, empty trailing rows and columns will not be included.

          For input, supported value types are: bool, string, and double.
          Null values will be skipped.
          To set a cell to an empty value, set the string value to an empty string.
        items:
          items: {}
          type: array
        type: array
        required: false
traits:
  xgafv:
    queryParameters:
      $.xgafv:
        type: string
        description: V1 error format.
        enum:
          - '1'
          - '2'
  accessToken:
    queryParameters:
      access_token:
        type: string
        description: OAuth access token.
  alt:
    queryParameters:
      alt:
        type: string
        description: Data format for response.
        default: json
        enum:
          - json
          - media
          - proto
  bearerToken:
    queryParameters:
      bearer_token:
        type: string
        description: OAuth bearer token.
  callback:
    queryParameters:
      callback:
        type: string
        description: JSONP
  fields:
    queryParameters:
      fields:
        type: string
        description: Selector specifying which fields to include in a partial response.
  key:
    queryParameters:
      key:
        type: string
        description: 'API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.'
  oauthToken:
    queryParameters:
      oauth_token:
        type: string
        description: OAuth 2.0 token for the current user.
  pp:
    queryParameters:
      pp:
        type: boolean
        description: Pretty-print response.
        default: true
  prettyPrint:
    queryParameters:
      prettyPrint:
        type: boolean
        description: Returns response with indentations and line breaks.
        default: true
  quotaUser:
    queryParameters:
      quotaUser:
        type: string
        description: 'Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.'
  uploadType:
    queryParameters:
      uploadType:
        type: string
        description: 'Legacy upload protocol for media (e.g. "media", "multipart").'
  uploadProtocol:
    queryParameters:
      upload_protocol:
        type: string
        description: 'Upload protocol for media (e.g. "raw", "multipart").'
