#%RAML 1.0
title: Google Cloud Datastore
version: v1beta1
baseUri: 'https://www.googleapis.com/datastore/v1beta1/datasets'
protocols:
  - HTTPS
description: Stores and queries data in Google Cloud Datastore.
(oas-tags-definition):
  - name: datasets
annotationTypes:
  oas-tags-definition:
    type: array
    items:
      properties:
        name: string
        description?: string
        externalDocs?:
          properties:
            url: string
            description?: string
    allowedTargets: API
  oas-x-apiClientRegistration: any
  oas-x-logo: any
  oas-x-origin: any
  oas-x-preferred: any
  oas-x-providerName: any
  oas-x-serviceName: any
  oas-tags:
    type: 'string[]'
    allowedTargets: Method
  oas-externalDocs:
    properties:
      description?: string
      url: string
    allowedTargets:
      - API
      - Method
      - TypeDeclaration
  oas-info:
    properties:
      termsOfService?: string
      contact?:
        properties:
          name?: string
          url?: string
          email?: string
      license?:
        properties:
          name?: string
          url?: string
    allowedTargets: API
  oas-body-name:
    type: string
    allowedTargets: TypeDeclaration
(oas-info):
  (oas-x-apiClientRegistration):
    url: 'https://console.developers.google.com'
  (oas-x-logo):
    url: 'https://api.apis.guru/v2/cache/logo/https_cloud.google.com__static_images_new-gcp-logo.png'
  (oas-x-origin):
    format: google
    url: 'https://www.googleapis.com/discovery/v1/apis/datastore/v1beta1/rest'
    version: v1
  (oas-x-preferred): false
  (oas-x-providerName): googleapis.com
  (oas-x-serviceName): datastore
  contact:
    name: Google
    url: 'https://google.com'
(oas-externalDocs):
  url: 'https://developers.google.com/datastore/'
securitySchemes:
  Oauth2:
    type: OAuth 2.0
    settings:
      authorizationUri: 'https://accounts.google.com/o/oauth2/auth'
      accessTokenUri: ''
      authorizationGrants:
        - implicit
      scopes:
        - 'https://www.googleapis.com/auth/cloud-platform'
        - 'https://www.googleapis.com/auth/datastore'
        - 'https://www.googleapis.com/auth/userinfo.email'
    description: Oauth 2.0 authentication
'/{datasetId}':
  displayName: '{datasetId}'
  /runQuery:
    displayName: runQuery
    post:
      displayName: datastore.datasets.runQuery
      description: Query for entities.
      body:
        application/json:
          type: RunQueryRequest
          (oas-body-name): body
      responses:
        '200':
          body:
            application/json:
              type: RunQueryResponse
          description: Successful response
      securedBy:
        - Oauth2:
            scopes:
              - 'https://www.googleapis.com/auth/userinfo.email'
      (oas-tags):
        - datasets
    is:
      - alt
      - fields
      - key
      - oauthToken
      - prettyPrint
      - quotaUser
      - userIp
  /rollback:
    displayName: rollback
    post:
      displayName: datastore.datasets.rollback
      description: Roll back a transaction.
      body:
        application/json:
          type: RollbackRequest
          (oas-body-name): body
      responses:
        '200':
          body:
            application/json:
              type: RollbackResponse
          description: Successful response
      securedBy:
        - Oauth2:
            scopes:
              - 'https://www.googleapis.com/auth/userinfo.email'
      (oas-tags):
        - datasets
    is:
      - alt
      - fields
      - key
      - oauthToken
      - prettyPrint
      - quotaUser
      - userIp
  /lookup:
    displayName: lookup
    post:
      displayName: datastore.datasets.lookup
      description: Look up some entities by key.
      body:
        application/json:
          type: LookupRequest
          (oas-body-name): body
      responses:
        '200':
          body:
            application/json:
              type: LookupResponse
          description: Successful response
      securedBy:
        - Oauth2:
            scopes:
              - 'https://www.googleapis.com/auth/userinfo.email'
      (oas-tags):
        - datasets
    is:
      - alt
      - fields
      - key
      - oauthToken
      - prettyPrint
      - quotaUser
      - userIp
  /commit:
    displayName: commit
    post:
      displayName: datastore.datasets.commit
      description: 'Commit a transaction, optionally creating, deleting or modifying some entities.'
      body:
        application/json:
          type: CommitRequest
          (oas-body-name): body
      responses:
        '200':
          body:
            application/json:
              type: CommitResponse
          description: Successful response
      securedBy:
        - Oauth2:
            scopes:
              - 'https://www.googleapis.com/auth/userinfo.email'
      (oas-tags):
        - datasets
    is:
      - alt
      - fields
      - key
      - oauthToken
      - prettyPrint
      - quotaUser
      - userIp
  /blindWrite:
    displayName: blindWrite
    post:
      displayName: datastore.datasets.blindWrite
      description: 'Create, delete or modify some entities outside a transaction.'
      body:
        application/json:
          type: BlindWriteRequest
          (oas-body-name): body
      responses:
        '200':
          body:
            application/json:
              type: BlindWriteResponse
          description: Successful response
      securedBy:
        - Oauth2:
            scopes:
              - 'https://www.googleapis.com/auth/userinfo.email'
      (oas-tags):
        - datasets
    is:
      - alt
      - fields
      - key
      - oauthToken
      - prettyPrint
      - quotaUser
      - userIp
  /beginTransaction:
    displayName: beginTransaction
    post:
      displayName: datastore.datasets.beginTransaction
      description: Begin a new transaction.
      body:
        application/json:
          type: BeginTransactionRequest
          (oas-body-name): body
      responses:
        '200':
          body:
            application/json:
              type: BeginTransactionResponse
          description: Successful response
      securedBy:
        - Oauth2:
            scopes:
              - 'https://www.googleapis.com/auth/userinfo.email'
      (oas-tags):
        - datasets
    is:
      - alt
      - fields
      - key
      - oauthToken
      - prettyPrint
      - quotaUser
      - userIp
  /allocateIds:
    displayName: allocateIds
    post:
      displayName: datastore.datasets.allocateIds
      description: Allocate IDs for incomplete keys (useful for referencing an entity before it is inserted).
      body:
        application/json:
          type: AllocateIdsRequest
          (oas-body-name): body
      responses:
        '200':
          body:
            application/json:
              type: AllocateIdsResponse
          description: Successful response
      securedBy:
        - Oauth2:
            scopes:
              - 'https://www.googleapis.com/auth/userinfo.email'
      (oas-tags):
        - datasets
    is:
      - alt
      - fields
      - key
      - oauthToken
      - prettyPrint
      - quotaUser
      - userIp
types:
  AllocateIdsRequest:
    properties:
      keys:
        description: A list of keys with incomplete key paths to allocate IDs for. No key may be reserved/read-only.
        items:
          type: Key
        type: array
        required: false
  AllocateIdsResponse:
    properties:
      header:
        type: ResponseHeader
        required: false
      keys:
        description: 'The keys specified in the request (in the same order), each with its key path completed with a newly allocated ID.'
        items:
          type: Key
        type: array
        required: false
  BeginTransactionRequest:
    properties:
      isolationLevel:
        description: 'The transaction isolation level. Either snapshot or serializable. The default isolation level is snapshot isolation, which means that another transaction may not concurrently modify the data that is modified by this transaction. Optionally, a transaction can request to be made serializable which means that another transaction cannot concurrently modify the data that is read or modified by this transaction.'
        type: string
        required: false
  BeginTransactionResponse:
    properties:
      header:
        type: ResponseHeader
        required: false
      transaction:
        description: The transaction identifier (always present).
        format: byte
        type: string
        facets:
          format: string
        required: false
  BlindWriteRequest:
    properties:
      mutation:
        description: The mutation to perform.
        type: Mutation
        required: false
  BlindWriteResponse:
    properties:
      header:
        type: ResponseHeader
        required: false
      mutationResult:
        description: The result of performing the mutation (always present).
        type: MutationResult
        required: false
  CommitRequest:
    properties:
      ignoreReadOnly:
        type: boolean
        required: false
      mutation:
        description: The mutation to perform. Optional.
        type: Mutation
        required: false
      transaction:
        description: 'The transaction identifier, returned by a call to beginTransaction. Must be set when mode is TRANSACTIONAL.'
        format: byte
        type: string
        facets:
          format: string
        required: false
  CommitResponse:
    properties:
      header:
        type: ResponseHeader
        required: false
      mutationResult:
        description: The result of performing the mutation (if any).
        type: MutationResult
        required: false
  CompositeFilter:
    description: A filter that merges the multiple other filters using the given operation.
    properties:
      filters:
        description: The list of filters to combine. Must contain at least one filter.
        items:
          type: Filter
        type: array
        required: false
      operator:
        description: The operator for combining multiple filters. Only "and" is currently supported.
        type: string
        required: false
  Entity:
    description: An entity.
    properties:
      key:
        description: |-
          The entity's key.

          An entity must have a key, unless otherwise documented (for example, an entity in Value.entityValue may have no key). An entity's kind is its key's path's last element's kind, or null if it has no key.
        type: Key
        required: false
      properties:
        description: The entity's properties.
        type: object
        required: false
        properties:
          //:
            description: The name of the property. A property name matching regex "__.*__" is reserved. A reserved property name is forbidden in certain documented contexts. The name must not contain more than 500 characters. Cannot be "".
            type: Property
  EntityResult:
    description: The result of fetching an entity from the datastore.
    properties:
      entity:
        description: The resulting entity.
        type: Entity
        required: false
  Filter:
    description: A holder for any type of filter. Exactly one field should be specified.
    properties:
      compositeFilter:
        description: A composite filter.
        type: CompositeFilter
        required: false
      propertyFilter:
        description: A filter on a property.
        type: PropertyFilter
        required: false
  GqlQuery:
    description: A GQL query.
    properties:
      allowLiteral:
        description: 'When false, the query string must not contain a literal.'
        type: boolean
        required: false
      nameArgs:
        description: 'A named argument must set field GqlQueryArg.name. No two named arguments may have the same name. For each non-reserved named binding site in the query string, there must be a named argument with that name, but not necessarily the inverse.'
        items:
          type: GqlQueryArg
        type: array
        required: false
      numberArgs:
        description: 'Numbered binding site @1 references the first numbered argument, effectively using 1-based indexing, rather than the usual 0. A numbered argument must NOT set field GqlQueryArg.name. For each binding site numbered i in query_string, there must be an ith numbered argument. The inverse must also be true.'
        items:
          type: GqlQueryArg
        type: array
        required: false
      queryString:
        description: The query string.
        type: string
        required: false
  GqlQueryArg:
    description: A binding argument for a GQL query.
    properties:
      cursor:
        format: byte
        type: string
        facets:
          format: string
        required: false
      name:
        description: 'Must match regex "[A-Za-z_$][A-Za-z_$0-9]*". Must not match regex "__.*__". Must not be "".'
        type: string
        required: false
      value:
        type: Value
        required: false
  Key:
    description: A unique identifier for an entity.
    properties:
      partitionId:
        description: 'Entities are partitioned into subsets, currently identified by a dataset (usually implicitly specified by the project) and namespace ID. Queries are scoped to a single partition.'
        type: PartitionId
        required: false
      path:
        description: 'The entity path. An entity path consists of one or more elements composed of a kind and a string or numerical identifier, which identify entities. The first element identifies a root entity, the second element identifies a child of the root entity, the third element a child of the second entity, and so forth. The entities identified by all prefixes of the path are called the element''s ancestors. An entity path is always fully complete: ALL of the entity''s ancestors are required to be in the path along with the entity identifier itself. The only exception is that in some documented cases, the identifier in the last path element (for the entity) itself may be omitted. A path can never be empty. The path can have at most 100 elements.'
        items:
          type: KeyPathElement
        type: array
        required: false
  KeyPathElement:
    description: |-
      A (kind, ID/name) pair used to construct a key path.

      At most one of name or ID may be set. If either is set, the element is complete. If neither is set, the element is incomplete.
    properties:
      id:
        description: The ID of the entity. Never equal to zero. Values less than zero are discouraged and will not be supported in the future.
        format: int64
        type: string
        facets:
          format: string
        required: false
      kind:
        description: The kind of the entity. A kind matching regex "__.*__" is reserved/read-only. A kind must not contain more than 500 characters. Cannot be "".
        type: string
        required: false
      name:
        description: The name of the entity. A name matching regex "__.*__" is reserved/read-only. A name must not be more than 500 characters. Cannot be "".
        type: string
        required: false
  KindExpression:
    description: A representation of a kind.
    properties:
      name:
        description: The name of the kind.
        type: string
        required: false
  LookupRequest:
    properties:
      keys:
        description: Keys of entities to look up from the datastore.
        items:
          type: Key
        type: array
        required: false
      readOptions:
        description: Options for this lookup request. Optional.
        type: ReadOptions
        required: false
  LookupResponse:
    properties:
      deferred:
        description: A list of keys that were not looked up due to resource constraints.
        items:
          type: Key
        type: array
        required: false
      found:
        description: Entities found.
        items:
          type: EntityResult
        type: array
        required: false
      header:
        type: ResponseHeader
        required: false
      missing:
        description: 'Entities not found, with only the key populated.'
        items:
          type: EntityResult
        type: array
        required: false
  Mutation:
    description: A set of changes to apply.
    properties:
      delete:
        description: Keys of entities to delete. Each key must have a complete key path and must not be reserved/read-only.
        items:
          type: Key
        type: array
        required: false
      force:
        description: Ignore a user specified read-only period. Optional.
        type: boolean
        required: false
      insert:
        description: Entities to insert. Each inserted entity's key must have a complete path and must not be reserved/read-only.
        items:
          type: Entity
        type: array
        required: false
      insertAutoId:
        description: Insert entities with a newly allocated ID. Each inserted entity's key must omit the final identifier in its path and must not be reserved/read-only.
        items:
          type: Entity
        type: array
        required: false
      update:
        description: Entities to update. Each updated entity's key must have a complete path and must not be reserved/read-only.
        items:
          type: Entity
        type: array
        required: false
      upsert:
        description: Entities to upsert. Each upserted entity's key must have a complete path and must not be reserved/read-only.
        items:
          type: Entity
        type: array
        required: false
  MutationResult:
    properties:
      indexUpdates:
        description: Number of index writes.
        format: int32
        type: integer
        required: false
      insertAutoIdKeys:
        description: 'Keys for insertAutoId entities. One per entity from the request, in the same order.'
        items:
          type: Key
        type: array
        required: false
  PartitionId:
    description: |-
      An identifier for a particular subset of entities.

      Entities are partitioned into various subsets, each used by different datasets and different namespaces within a dataset and so forth.
    properties:
      datasetId:
        description: The dataset ID.
        type: string
        required: false
      namespace:
        description: The namespace.
        type: string
        required: false
  Property:
    description: An entity property.
    properties:
      multi:
        description: 'If this property contains a list of values. Input values may explicitly set multi to false, but otherwise false is always represented by omitting multi.'
        type: boolean
        required: false
      values:
        description: 'The value(s) of the property. When multi is false there is always exactly one value. When multi is true there are always one or more values. Each value can have only one value property populated. For example, you cannot have a values list of { values: [ { integerValue: 22, stringValue: "a" } ] }, but you can have { multi: true, values: [ { integerValue: 22 }, { stringValue: "a" } ] }.'
        items:
          type: Value
        type: array
        required: false
  PropertyExpression:
    description: A representation of a property in a projection.
    properties:
      aggregationFunction:
        description: 'The aggregation function to apply to the property. Optional. Can only be used when grouping by at least one property. Must then be set on all properties in the projection that are not being grouped by. Aggregation functions: first selects the first result as determined by the query''s order.'
        type: string
        required: false
      property:
        description: The property to project.
        type: PropertyReference
        required: false
  PropertyFilter:
    description: A filter on a specific property.
    properties:
      operator:
        description: 'The operator to filter by. One of lessThan, lessThanOrEqual, greaterThan, greaterThanOrEqual, equal, or hasAncestor.'
        type: string
        required: false
      property:
        description: The property to filter by.
        type: PropertyReference
        required: false
      value:
        description: The value to compare the property to.
        type: Value
        required: false
  PropertyOrder:
    description: The desired order for a specific property.
    properties:
      direction:
        description: 'The direction to order by. One of ascending or descending. Optional, defaults to ascending.'
        type: string
        required: false
      property:
        description: The property to order by.
        type: PropertyReference
        required: false
  PropertyReference:
    description: A reference to a property relative to the kind expressions.
    properties:
      name:
        description: The name of the property.
        type: string
        required: false
  Query:
    description: A query.
    properties:
      endCursor:
        description: An ending point for the query results. Optional. Query cursors are returned in query result batches.
        format: byte
        type: string
        facets:
          format: string
        required: false
      filter:
        description: The filter to apply (optional).
        type: Filter
        required: false
      groupBy:
        description: 'The properties to group by (if empty, no grouping is applied to the result set).'
        items:
          type: PropertyReference
        type: array
        required: false
      kinds:
        description: 'The kinds to query (if empty, returns entities from all kinds).'
        items:
          type: KindExpression
        type: array
        required: false
      limit:
        description: The maximum number of results to return. Applies after all other constraints. Optional.
        format: int32
        type: integer
        required: false
      offset:
        description: 'The number of results to skip. Applies before limit, but after all other constraints (optional, defaults to 0).'
        format: int32
        type: integer
        required: false
      order:
        description: 'The order to apply to the query results (if empty, order is unspecified).'
        items:
          type: PropertyOrder
        type: array
        required: false
      projection:
        description: The projection to return. If not set the entire entity is returned.
        items:
          type: PropertyExpression
        type: array
        required: false
      startCursor:
        description: A starting point for the query results. Optional. Query cursors are returned in query result batches.
        format: byte
        type: string
        facets:
          format: string
        required: false
  QueryResultBatch:
    description: A batch of results produced by a query.
    properties:
      endCursor:
        description: 'A cursor that points to the position after the last result in the batch. May be absent. TODO(arfuller): Once all plans produce cursors update documentation here.'
        format: byte
        type: string
        facets:
          format: string
        required: false
      entityResultType:
        description: 'The result type for every entity in entityResults. full for full entities, projection for entities with only projected properties, keyOnly for entities with only a key.'
        type: string
        required: false
      entityResults:
        description: The results for this batch.
        items:
          type: EntityResult
        type: array
        required: false
      moreResults:
        description: 'The state of the query after the current batch. One of notFinished, moreResultsAfterLimit, noMoreResults.'
        type: string
        required: false
      skippedResults:
        description: The number of results skipped because of Query.offset.
        format: int32
        type: integer
        required: false
  ReadOptions:
    properties:
      readConsistency:
        description: 'The read consistency to use. One of default, strong, or eventual. Cannot be set when transaction is set. Lookup and ancestor queries default to strong, global queries default to eventual and cannot be set to strong. Optional. Default is default.'
        type: string
        required: false
      transaction:
        description: The transaction to use. Optional.
        format: byte
        type: string
        facets:
          format: string
        required: false
  ResponseHeader:
    properties:
      kind:
        default: 'datastore#responseHeader'
        description: 'Identifies what kind of resource this is. Value: the fixed string "datastore#responseHeader".'
        type: string
        required: false
  RollbackRequest:
    properties:
      transaction:
        description: 'The transaction identifier, returned by a call to beginTransaction.'
        format: byte
        type: string
        facets:
          format: string
        required: false
  RollbackResponse:
    properties:
      header:
        type: ResponseHeader
        required: false
  RunQueryRequest:
    properties:
      gqlQuery:
        description: 'The GQL query to run. Either this field or field query must be set, but not both.'
        type: GqlQuery
        required: false
      partitionId:
        description: 'Entities are partitioned into subsets, identified by a dataset (usually implicitly specified by the project) and namespace ID. Queries are scoped to a single partition. This partition ID is normalized with the standard default context partition ID, but all other partition IDs in RunQueryRequest are normalized with this partition ID as the context partition ID.'
        type: PartitionId
        required: false
      query:
        description: 'The query to run. Either this field or field gql_query must be set, but not both.'
        type: Query
        required: false
      readOptions:
        description: The options for this query.
        type: ReadOptions
        required: false
  RunQueryResponse:
    properties:
      batch:
        description: A batch of query results (always present).
        type: QueryResultBatch
        required: false
      header:
        type: ResponseHeader
        required: false
  Value:
    description: A message that can hold any of the supported value types and associated metadata.
    properties:
      blobKeyValue:
        description: A blob key value.
        type: string
        required: false
      blobValue:
        description: 'A blob value. May be a maximum of 1,000,000 bytes. When indexed is true, may have at most 500 bytes.'
        format: byte
        type: string
        facets:
          format: string
        required: false
      booleanValue:
        description: A boolean value.
        type: boolean
        required: false
      dateTimeValue:
        description: A timestamp value.
        format: rfc3339
        type: datetime
        required: false
      doubleValue:
        description: A double value.
        format: double
        type: number
        required: false
      entityValue:
        description: An entity value. May have no key. May have a key with an incomplete key path. May have a reserved/read-only key.
        type: Entity
        required: false
      indexed:
        description: |-
          If the value should be indexed.

          The indexed property may be set for a null value. When indexed is true, stringValue is limited to 500 characters and the blob value is limited to 500 bytes. Input values by default have indexed set to true; however, you can explicitly set indexed to true if you want. (An output value never has indexed explicitly set to true.) If a value is itself an entity, it cannot have indexed set to true.
        type: boolean
        required: false
      integerValue:
        description: An integer value.
        format: int64
        type: string
        facets:
          format: string
        required: false
      keyValue:
        description: A key value.
        type: Key
        required: false
      meaning:
        description: The meaning field is reserved and should not be used.
        format: int32
        type: integer
        required: false
      stringValue:
        description: 'A UTF-8 encoded string value. When indexed is true, may have at most 500 characters.'
        type: string
        required: false
traits:
  alt:
    queryParameters:
      alt:
        type: string
        description: Data format for the response.
        default: proto
        enum:
          - json
          - proto
  fields:
    queryParameters:
      fields:
        type: string
        description: Selector specifying which fields to include in a partial response.
  key:
    queryParameters:
      key:
        type: string
        description: 'API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.'
  oauthToken:
    queryParameters:
      oauth_token:
        type: string
        description: OAuth 2.0 token for the current user.
  prettyPrint:
    queryParameters:
      prettyPrint:
        type: boolean
        description: Returns response with indentations and line breaks.
        default: true
  quotaUser:
    queryParameters:
      quotaUser:
        type: string
        description: 'Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided.'
  userIp:
    queryParameters:
      userIp:
        type: string
        description: IP address of the site where the request originates. Use this if you want to enforce per-user limits.
