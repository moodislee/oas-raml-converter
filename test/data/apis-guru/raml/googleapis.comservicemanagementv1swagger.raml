#%RAML 1.0
title: Google Service Management
version: v1
baseUri: 'https://servicemanagement.googleapis.com/'
protocols:
  - HTTPS
description: Google Service Management allows service producers to publish their services on Google Cloud Platform so that they can be discovered and used by service consumers.
(oas-tags-definition):
  - name: services
  - name: operations
annotationTypes:
  oas-tags-definition:
    type: array
    items:
      properties:
        name: string
        description?: string
        externalDocs?:
          properties:
            url: string
            description?: string
    allowedTargets: API
  oas-x-apiClientRegistration: any
  oas-x-logo: any
  oas-x-origin: any
  oas-x-preferred: any
  oas-x-providerName: any
  oas-x-serviceName: any
  oas-tags:
    type: 'string[]'
    allowedTargets: Method
  oas-externalDocs:
    properties:
      description?: string
      url: string
    allowedTargets:
      - API
      - Method
      - TypeDeclaration
  oas-info:
    properties:
      termsOfService?: string
      contact?:
        properties:
          name?: string
          url?: string
          email?: string
      license?:
        properties:
          name?: string
          url?: string
    allowedTargets: API
  oas-body-name:
    type: string
    allowedTargets: TypeDeclaration
(oas-info):
  (oas-x-apiClientRegistration):
    url: 'https://console.developers.google.com'
  (oas-x-logo):
    url: 'https://api.apis.guru/v2/cache/logo/https_www.google.com_images_branding_googlelogo_2x_googlelogo_color_272x92dp.png'
  (oas-x-origin):
    format: google
    url: 'https://servicemanagement.googleapis.com/$discovery/rest?version=v1'
    version: v1
  (oas-x-preferred): true
  (oas-x-providerName): googleapis.com
  (oas-x-serviceName): servicemanagement
  contact:
    name: Google
    url: 'https://google.com'
(oas-externalDocs):
  url: 'https://cloud.google.com/service-management/'
securitySchemes:
  Oauth2:
    type: OAuth 2.0
    settings:
      authorizationUri: 'https://accounts.google.com/o/oauth2/auth'
      accessTokenUri: ''
      authorizationGrants:
        - implicit
      scopes:
        - 'https://www.googleapis.com/auth/cloud-platform'
        - 'https://www.googleapis.com/auth/cloud-platform.read-only'
        - 'https://www.googleapis.com/auth/service.management'
        - 'https://www.googleapis.com/auth/service.management.readonly'
    description: Oauth 2.0 authentication
/v1:
  displayName: v1
  /services:
    displayName: services
    '/{serviceName}':
      displayName: '{serviceName}'
      /rollouts:
        displayName: rollouts
        post:
          displayName: servicemanagement.services.rollouts.create
          description: |-
            Creates a new service configuration rollout. Based on rollout, the
            Google Service Management will roll out the service configurations to
            different backend services. For example, the logging configuration will be
            pushed to Google Cloud Logging.

            Please note that any previous pending and running Rollouts and associated
            Operations will be automatically cancelled so that the latest Rollout will
            not be blocked by previous Rollouts.

            Operation<response: Rollout>
          body:
            application/json:
              type: Rollout
              (oas-body-name): body
          responses:
            '200':
              body:
                application/json:
                  type: Operation
              description: Successful response
          securedBy:
            - Oauth2:
                scopes:
                  - 'https://www.googleapis.com/auth/service.management'
          (oas-tags):
            - services
        is:
          - accessToken
          - prettyPrint
          - key
          - quotaUser
          - pp
          - fields
          - alt
          - xgafv
          - callback
          - oauthToken
          - uploadType
          - bearerToken
          - uploadProtocol
        '/{rolloutId}':
          displayName: '{rolloutId}'
          uriParameters:
            rolloutId:
              description: The id of the rollout resource.
              required: true
              type: string
          get:
            displayName: servicemanagement.services.rollouts.get
            description: Gets a service configuration rollout.
            responses:
              '200':
                body:
                  application/json:
                    type: Rollout
                description: Successful response
            securedBy:
              - Oauth2:
                  scopes:
                    - 'https://www.googleapis.com/auth/service.management.readonly'
            (oas-tags):
              - services
          is:
            - accessToken
            - prettyPrint
            - key
            - quotaUser
            - pp
            - fields
            - alt
            - xgafv
            - callback
            - oauthToken
            - uploadType
            - bearerToken
            - uploadProtocol
        get:
          displayName: servicemanagement.services.rollouts.list
          description: |-
            Lists the history of the service configuration rollouts for a managed
            service, from the newest to the oldest.
          responses:
            '200':
              body:
                application/json:
                  type: ListServiceRolloutsResponse
              description: Successful response
          queryParameters:
            pageSize:
              description: The max number of items to include in the response list.
              type: integer
            pageToken:
              description: The token of the page to retrieve.
              type: string
          securedBy:
            - Oauth2:
                scopes:
                  - 'https://www.googleapis.com/auth/service.management.readonly'
          (oas-tags):
            - services
      uriParameters:
        serviceName:
          description: |-
            The name of the service.  See the `ServiceManager` overview for naming
            requirements.  For example: `example.googleapis.com`.
          required: true
          type: string
      delete:
        displayName: servicemanagement.services.delete
        description: |-
          Deletes a managed service. This method will change the service to the
          `Soft-Delete` state for 30 days. Within this period, service producers may
          call UndeleteService to restore the service.
          After 30 days, the service will be permanently deleted.

          Operation<response: google.protobuf.Empty>
        responses:
          '200':
            body:
              application/json:
                type: Operation
            description: Successful response
        securedBy:
          - Oauth2:
              scopes:
                - 'https://www.googleapis.com/auth/service.management'
        (oas-tags):
          - services
      is:
        - accessToken
        - prettyPrint
        - key
        - quotaUser
        - pp
        - fields
        - alt
        - xgafv
        - callback
        - oauthToken
        - uploadType
        - bearerToken
        - uploadProtocol
      /config:
        displayName: config
        get:
          displayName: servicemanagement.services.getConfig
          description: Gets a service configuration (version) for a managed service.
          responses:
            '200':
              body:
                application/json:
                  type: Service
              description: Successful response
          queryParameters:
            configId:
              description: The id of the service configuration resource.
              type: string
          securedBy:
            - Oauth2:
                scopes:
                  - 'https://www.googleapis.com/auth/service.management.readonly'
          (oas-tags):
            - services
        is:
          - accessToken
          - prettyPrint
          - key
          - quotaUser
          - pp
          - fields
          - alt
          - xgafv
          - callback
          - oauthToken
          - uploadType
          - bearerToken
          - uploadProtocol
      /configs:
        displayName: configs
        post:
          displayName: servicemanagement.services.configs.create
          description: |-
            Creates a new service configuration (version) for a managed service.
            This method only stores the service configuration. To roll out the service
            configuration to backend systems please call
            CreateServiceRollout.
          body:
            application/json:
              type: Service
              (oas-body-name): body
          responses:
            '200':
              body:
                application/json:
                  type: Service
              description: Successful response
          securedBy:
            - Oauth2:
                scopes:
                  - 'https://www.googleapis.com/auth/service.management'
          (oas-tags):
            - services
        is:
          - accessToken
          - prettyPrint
          - key
          - quotaUser
          - pp
          - fields
          - alt
          - xgafv
          - callback
          - oauthToken
          - uploadType
          - bearerToken
          - uploadProtocol
        '/{configId}':
          displayName: '{configId}'
          uriParameters:
            configId:
              description: The id of the service configuration resource.
              required: true
              type: string
          get:
            displayName: servicemanagement.services.configs.get
            description: Gets a service configuration (version) for a managed service.
            responses:
              '200':
                body:
                  application/json:
                    type: Service
                description: Successful response
            securedBy:
              - Oauth2:
                  scopes:
                    - 'https://www.googleapis.com/auth/service.management.readonly'
            (oas-tags):
              - services
          is:
            - accessToken
            - prettyPrint
            - key
            - quotaUser
            - pp
            - fields
            - alt
            - xgafv
            - callback
            - oauthToken
            - uploadType
            - bearerToken
            - uploadProtocol
        get:
          displayName: servicemanagement.services.configs.list
          description: |-
            Lists the history of the service configuration for a managed service,
            from the newest to the oldest.
          responses:
            '200':
              body:
                application/json:
                  type: ListServiceConfigsResponse
              description: Successful response
          queryParameters:
            pageSize:
              description: The max number of items to include in the response list.
              type: integer
            pageToken:
              description: The token of the page to retrieve.
              type: string
          securedBy:
            - Oauth2:
                scopes:
                  - 'https://www.googleapis.com/auth/service.management.readonly'
          (oas-tags):
            - services
      '/configs:submit':
        displayName: 'configs:submit'
        post:
          displayName: servicemanagement.services.configs.submit
          description: |-
            Creates a new service configuration (version) for a managed service based
            on
            user-supplied configuration source files (for example: OpenAPI
            Specification). This method stores the source configurations as well as the
            generated service configuration. To rollout the service configuration to
            other services,
            please call CreateServiceRollout.

            Operation<response: SubmitConfigSourceResponse>
          body:
            application/json:
              type: SubmitConfigSourceRequest
              (oas-body-name): body
          responses:
            '200':
              body:
                application/json:
                  type: Operation
              description: Successful response
          securedBy:
            - Oauth2:
                scopes:
                  - 'https://www.googleapis.com/auth/service.management'
          (oas-tags):
            - services
        is:
          - accessToken
          - prettyPrint
          - key
          - quotaUser
          - pp
          - fields
          - alt
          - xgafv
          - callback
          - oauthToken
          - uploadType
          - bearerToken
          - uploadProtocol
      get:
        displayName: servicemanagement.services.get
        description: |-
          Gets a managed service. Authentication is required unless the service is
          public.
        responses:
          '200':
            body:
              application/json:
                type: ManagedService
            description: Successful response
        securedBy:
          - Oauth2:
              scopes:
                - 'https://www.googleapis.com/auth/service.management.readonly'
        (oas-tags):
          - services
    get:
      displayName: servicemanagement.services.list
      description: |-
        Lists all managed services. The result is limited to services that the
        caller has "servicemanagement.services.get" permission for. If the request
        is made without authentication, it returns only public services that are
        available to everyone.
      responses:
        '200':
          body:
            application/json:
              type: ListServicesResponse
          description: Successful response
      queryParameters:
        pageSize:
          description: Requested size of the next page of data.
          type: integer
        producerProjectId:
          description: Include services produced by the specified project.
          type: string
        pageToken:
          description: |-
            Token identifying which result to start with; returned by a previous list
            call.
          type: string
        consumerId:
          description: |-
            Include services consumed by the specified consumer.

            The Google Service Management implementation accepts the following
            forms:
            - project:<project_id>
          type: string
      securedBy:
        - Oauth2:
            scopes:
              - 'https://www.googleapis.com/auth/service.management.readonly'
      (oas-tags):
        - services
    is:
      - accessToken
      - prettyPrint
      - key
      - quotaUser
      - pp
      - fields
      - alt
      - xgafv
      - callback
      - oauthToken
      - uploadType
      - bearerToken
      - uploadProtocol
    '/{serviceName}:disable':
      displayName: '{serviceName}:disable'
      uriParameters:
        serviceName:
          description: |-
            Name of the service to disable. Specifying an unknown service name
            will cause the request to fail.
          required: true
          type: string
      post:
        displayName: servicemanagement.services.disable
        description: |-
          Disable a managed service for a project.

          Operation<response: DisableServiceResponse>
        body:
          application/json:
            type: DisableServiceRequest
            (oas-body-name): body
        responses:
          '200':
            body:
              application/json:
                type: Operation
            description: Successful response
        securedBy:
          - Oauth2:
              scopes:
                - 'https://www.googleapis.com/auth/service.management'
        (oas-tags):
          - services
      is:
        - accessToken
        - prettyPrint
        - key
        - quotaUser
        - pp
        - fields
        - alt
        - xgafv
        - callback
        - oauthToken
        - uploadType
        - bearerToken
        - uploadProtocol
    '/{serviceName}:enable':
      displayName: '{serviceName}:enable'
      uriParameters:
        serviceName:
          description: |-
            Name of the service to enable. Specifying an unknown service name will
            cause the request to fail.
          required: true
          type: string
      post:
        displayName: servicemanagement.services.enable
        description: |-
          Enable a managed service for a project with default setting.

          Operation<response: EnableServiceResponse>

          google.rpc.Status errors may contain a
          google.rpc.PreconditionFailure error detail.
        body:
          application/json:
            type: EnableServiceRequest
            (oas-body-name): body
        responses:
          '200':
            body:
              application/json:
                type: Operation
            description: Successful response
        securedBy:
          - Oauth2:
              scopes:
                - 'https://www.googleapis.com/auth/service.management'
        (oas-tags):
          - services
      is:
        - accessToken
        - prettyPrint
        - key
        - quotaUser
        - pp
        - fields
        - alt
        - xgafv
        - callback
        - oauthToken
        - uploadType
        - bearerToken
        - uploadProtocol
    '/{serviceName}:undelete':
      displayName: '{serviceName}:undelete'
      uriParameters:
        serviceName:
          description: |-
            The name of the service. See the [overview](/service-management/overview)
            for naming requirements. For example: `example.googleapis.com`.
          required: true
          type: string
      post:
        displayName: servicemanagement.services.undelete
        description: |-
          Revives a previously deleted managed service. The method restores the
          service using the configuration at the time the service was deleted.
          The target service must exist and must have been deleted within the
          last 30 days.

          Operation<response: UndeleteServiceResponse>
        responses:
          '200':
            body:
              application/json:
                type: Operation
            description: Successful response
        securedBy:
          - Oauth2:
              scopes:
                - 'https://www.googleapis.com/auth/service.management'
        (oas-tags):
          - services
      is:
        - accessToken
        - prettyPrint
        - key
        - quotaUser
        - pp
        - fields
        - alt
        - xgafv
        - callback
        - oauthToken
        - uploadType
        - bearerToken
        - uploadProtocol
    post:
      displayName: servicemanagement.services.create
      description: |-
        Creates a new managed service.
        Please note one producer project can own no more than 20 services.

        Operation<response: ManagedService>
      body:
        application/json:
          type: ManagedService
          (oas-body-name): body
      responses:
        '200':
          body:
            application/json:
              type: Operation
          description: Successful response
      securedBy:
        - Oauth2:
            scopes:
              - 'https://www.googleapis.com/auth/service.management'
      (oas-tags):
        - services
  '/{resource}:testIamPermissions':
    displayName: '{resource}:testIamPermissions'
    uriParameters:
      resource:
        description: |-
          REQUIRED: The resource for which the policy detail is being requested.
          `resource` is usually specified as a path. For example, a Project
          resource is specified as `projects/{project}`.
        required: true
        type: string
    post:
      displayName: servicemanagement.services.testIamPermissions
      description: Returns permissions that a caller has on the specified resource.
      body:
        application/json:
          type: TestIamPermissionsRequest
          (oas-body-name): body
      responses:
        '200':
          body:
            application/json:
              type: TestIamPermissionsResponse
          description: Successful response
      securedBy:
        - Oauth2:
            scopes:
              - 'https://www.googleapis.com/auth/service.management'
      (oas-tags):
        - services
    is:
      - accessToken
      - prettyPrint
      - key
      - quotaUser
      - pp
      - fields
      - alt
      - xgafv
      - callback
      - oauthToken
      - uploadType
      - bearerToken
      - uploadProtocol
  '/{resource}:setIamPolicy':
    displayName: '{resource}:setIamPolicy'
    uriParameters:
      resource:
        description: |-
          REQUIRED: The resource for which the policy is being specified.
          `resource` is usually specified as a path. For example, a Project
          resource is specified as `projects/{project}`.
        required: true
        type: string
    post:
      displayName: servicemanagement.services.setIamPolicy
      description: |-
        Sets the access control policy on the specified resource. Replaces any
        existing policy.
      body:
        application/json:
          type: SetIamPolicyRequest
          (oas-body-name): body
      responses:
        '200':
          body:
            application/json:
              type: Policy
          description: Successful response
      securedBy:
        - Oauth2:
            scopes:
              - 'https://www.googleapis.com/auth/service.management'
      (oas-tags):
        - services
    is:
      - accessToken
      - prettyPrint
      - key
      - quotaUser
      - pp
      - fields
      - alt
      - xgafv
      - callback
      - oauthToken
      - uploadType
      - bearerToken
      - uploadProtocol
  '/{resource}:getIamPolicy':
    displayName: '{resource}:getIamPolicy'
    uriParameters:
      resource:
        description: |-
          REQUIRED: The resource for which the policy is being requested.
          `resource` is usually specified as a path. For example, a Project
          resource is specified as `projects/{project}`.
        required: true
        type: string
    post:
      displayName: servicemanagement.services.getIamPolicy
      description: |-
        Gets the access control policy for a resource.
        Returns an empty policy if the resource exists and does not have a policy
        set.
      body:
        application/json:
          type: GetIamPolicyRequest
          (oas-body-name): body
      responses:
        '200':
          body:
            application/json:
              type: Policy
          description: Successful response
      securedBy:
        - Oauth2:
            scopes:
              - 'https://www.googleapis.com/auth/service.management'
      (oas-tags):
        - services
    is:
      - accessToken
      - prettyPrint
      - key
      - quotaUser
      - pp
      - fields
      - alt
      - xgafv
      - callback
      - oauthToken
      - uploadType
      - bearerToken
      - uploadProtocol
  '/{name}':
    displayName: '{name}'
    uriParameters:
      name:
        description: The name of the operation resource.
        required: true
        type: string
    get:
      displayName: servicemanagement.operations.get
      description: |-
        Gets the latest state of a long-running operation.  Clients can use this
        method to poll the operation result at intervals as recommended by the API
        service.
      responses:
        '200':
          body:
            application/json:
              type: Operation
          description: Successful response
      securedBy:
        - Oauth2:
            scopes:
              - 'https://www.googleapis.com/auth/service.management'
      (oas-tags):
        - operations
    is:
      - accessToken
      - prettyPrint
      - key
      - quotaUser
      - pp
      - fields
      - alt
      - xgafv
      - callback
      - oauthToken
      - uploadType
      - bearerToken
      - uploadProtocol
  '/services:generateConfigReport':
    displayName: 'services:generateConfigReport'
    post:
      displayName: servicemanagement.services.generateConfigReport
      description: |-
        Generates and returns a report (errors, warnings and changes from
        existing configurations) associated with
        GenerateConfigReportRequest.new_value

        If GenerateConfigReportRequest.old_value is specified,
        GenerateConfigReportRequest will contain a single ChangeReport based on the
        comparison between GenerateConfigReportRequest.new_value and
        GenerateConfigReportRequest.old_value.
        If GenerateConfigReportRequest.old_value is not specified, this method
        will compare GenerateConfigReportRequest.new_value with the last pushed
        service configuration.
      body:
        application/json:
          type: GenerateConfigReportRequest
          (oas-body-name): body
      responses:
        '200':
          body:
            application/json:
              type: GenerateConfigReportResponse
          description: Successful response
      securedBy:
        - Oauth2:
            scopes:
              - 'https://www.googleapis.com/auth/service.management'
      (oas-tags):
        - services
    is:
      - accessToken
      - prettyPrint
      - key
      - quotaUser
      - pp
      - fields
      - alt
      - xgafv
      - callback
      - oauthToken
      - uploadType
      - bearerToken
      - uploadProtocol
types:
  Advice:
    description: |-
      Generated advice about this change, used for providing more
      information about how a change will affect the existing service.
    properties:
      description:
        description: |-
          Useful description for why this advice was applied and what actions should
          be taken to mitigate any implied risks.
        type: string
        required: false
  Api:
    description: Api is a light-weight descriptor for a protocol buffer service.
    properties:
      methods:
        description: 'The methods of this api, in unspecified order.'
        items:
          type: Method
        type: array
        required: false
      mixins:
        description: Included APIs. See Mixin.
        items:
          type: Mixin
        type: array
        required: false
      name:
        description: |-
          The fully qualified name of this api, including package name
          followed by the api's simple name.
        type: string
        required: false
      options:
        description: Any metadata attached to the API.
        items:
          type: Option
        type: array
        required: false
      sourceContext:
        description: |-
          Source context for the protocol buffer service represented by this
          message.
        type: SourceContext
        required: false
      syntax:
        description: The source syntax of the service.
        enum:
          - SYNTAX_PROTO2
          - SYNTAX_PROTO3
        type: string
        required: false
      version:
        description: |
          A version string for this api. If specified, must have the form
          `major-version.minor-version`, as in `1.10`. If the minor version
          is omitted, it defaults to zero. If the entire version field is
          empty, the major version is derived from the package name, as
          outlined below. If the field is not empty, the version in the
          package name will be verified to be consistent with what is
          provided here.

          The versioning schema uses [semantic
          versioning](http://semver.org) where the major version number
          indicates a breaking change and the minor version an additive,
          non-breaking change. Both version numbers are signals to users
          what to expect from different versions, and should be carefully
          chosen based on the product plan.

          The major version is also reflected in the package name of the
          API, which must end in `v<major-version>`, as in
          `google.feature.v1`. For major versions 0 and 1, the suffix can
          be omitted. Zero major versions must only be used for
          experimental, none-GA apis.
        type: string
        required: false
  AuditConfig:
    description: |-
      Enables "data access" audit logging for a service and specifies a list
      of members that are log-exempted.
    properties:
      exemptedMembers:
        description: |-
          Specifies the identities that are exempted from "data access" audit
          logging for the `service` specified above.
          Follows the same format of Binding.members.
        items:
          type: string
        type: array
        required: false
      service:
        description: |-
          Specifies a service that will be enabled for "data access" audit
          logging.
          For example, `resourcemanager`, `storage`, `compute`.
          `allServices` is a special value that covers all services.
        type: string
        required: false
  AuthProvider:
    description: |-
      Configuration for an anthentication provider, including support for
      [JSON Web Token (JWT)](https://tools.ietf.org/html/draft-ietf-oauth-json-web-token-32).
    properties:
      audiences:
        description: |-
          The list of JWT
          [audiences](https://tools.ietf.org/html/draft-ietf-oauth-json-web-token-32#section-4.1.3).
          that are allowed to access. A JWT containing any of these audiences will
          be accepted. When this setting is absent, only JWTs with audience
          "https://Service_name/API_name"
          will be accepted. For example, if no audiences are in the setting,
          LibraryService API will only accept JWTs with the following audience
          "https://library-example.googleapis.com/google.example.library.v1.LibraryService".

          Example:

              audiences: bookstore_android.apps.googleusercontent.com,
                         bookstore_web.apps.googleusercontent.com
        type: string
        required: false
      id:
        description: |-
          The unique identifier of the auth provider. It will be referred to by
          `AuthRequirement.provider_id`.

          Example: "bookstore_auth".
        type: string
        required: false
      issuer:
        description: |-
          Identifies the principal that issued the JWT. See
          https://tools.ietf.org/html/draft-ietf-oauth-json-web-token-32#section-4.1.1
          Usually a URL or an email address.

          Example: https://securetoken.google.com
          Example: 1234567-compute@developer.gserviceaccount.com
        type: string
        required: false
      jwksUri:
        description: |-
          URL of the provider's public key set to validate signature of the JWT. See
          [OpenID Discovery](https://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata).
          Optional if the key set document:
           - can be retrieved from
             [OpenID Discovery](https://openid.net/specs/openid-connect-discovery-1_0.html
             of the issuer.
           - can be inferred from the email domain of the issuer (e.g. a Google service account).

          Example: https://www.googleapis.com/oauth2/v1/certs
        type: string
        required: false
  AuthRequirement:
    description: |-
      User-defined authentication requirements, including support for
      [JSON Web Token (JWT)](https://tools.ietf.org/html/draft-ietf-oauth-json-web-token-32).
    properties:
      audiences:
        description: |-
          NOTE: This will be deprecated soon, once AuthProvider.audiences is
          implemented and accepted in all the runtime components.

          The list of JWT
          [audiences](https://tools.ietf.org/html/draft-ietf-oauth-json-web-token-32#section-4.1.3).
          that are allowed to access. A JWT containing any of these audiences will
          be accepted. When this setting is absent, only JWTs with audience
          "https://Service_name/API_name"
          will be accepted. For example, if no audiences are in the setting,
          LibraryService API will only accept JWTs with the following audience
          "https://library-example.googleapis.com/google.example.library.v1.LibraryService".

          Example:

              audiences: bookstore_android.apps.googleusercontent.com,
                         bookstore_web.apps.googleusercontent.com
        type: string
        required: false
      providerId:
        description: |-
          id from authentication provider.

          Example:

              provider_id: bookstore_auth
        type: string
        required: false
  Authentication:
    description: |-
      `Authentication` defines the authentication configuration for an API.

      Example for an API targeted for external use:

          name: calendar.googleapis.com
          authentication:
            rules:
            - selector: "*"
              oauth:
                canonical_scopes: https://www.googleapis.com/auth/calendar

            - selector: google.calendar.Delegate
              oauth:
                canonical_scopes: https://www.googleapis.com/auth/calendar.read
    properties:
      providers:
        description: Defines a set of authentication providers that a service supports.
        items:
          type: AuthProvider
        type: array
        required: false
      rules:
        description: |-
          A list of authentication rules that apply to individual API methods.

          **NOTE:** All service configuration rules follow "last one wins" order.
        items:
          type: AuthenticationRule
        type: array
        required: false
  AuthenticationRule:
    description: |-
      Authentication rules for the service.

      By default, if a method has any authentication requirements, every request
      must include a valid credential matching one of the requirements.
      It's an error to include more than one kind of credential in a single
      request.

      If a method doesn't have any auth requirements, request credentials will be
      ignored.
    properties:
      allowWithoutCredential:
        description: |-
          Whether to allow requests without a credential. The credential can be
          an OAuth token, Google cookies (first-party auth) or EndUserCreds.

          For requests without credentials, if the service control environment is
          specified, each incoming request **must** be associated with a service
          consumer. This can be done by passing an API key that belongs to a consumer
          project.
        type: boolean
        required: false
      oauth:
        description: The requirements for OAuth credentials.
        type: OAuthRequirements
        required: false
      requirements:
        description: Requirements for additional authentication providers.
        items:
          type: AuthRequirement
        type: array
        required: false
      selector:
        description: |-
          Selects the methods to which this rule applies.

          Refer to selector for syntax details.
        type: string
        required: false
  Backend:
    description: '`Backend` defines the backend configuration for a service.'
    properties:
      rules:
        description: |-
          A list of API backend rules that apply to individual API methods.

          **NOTE:** All service configuration rules follow "last one wins" order.
        items:
          type: BackendRule
        type: array
        required: false
  BackendRule:
    description: A backend rule provides configuration for an individual API element.
    properties:
      address:
        description: The address of the API backend.
        type: string
        required: false
      deadline:
        description: |-
          The number of seconds to wait for a response from a request.  The
          default depends on the deployment context.
        format: double
        type: number
        required: false
      selector:
        description: |-
          Selects the methods to which this rule applies.

          Refer to selector for syntax details.
        type: string
        required: false
  Binding:
    description: Associates `members` with a `role`.
    properties:
      members:
        description: |+
          Specifies the identities requesting access for a Cloud Platform resource.
          `members` can have the following values:

          * `allUsers`: A special identifier that represents anyone who is
             on the internet; with or without a Google account.

          * `allAuthenticatedUsers`: A special identifier that represents anyone
             who is authenticated with a Google account or a service account.

          * `user:{emailid}`: An email address that represents a specific Google
             account. For example, `alice@gmail.com` or `joe@example.com`.


          * `serviceAccount:{emailid}`: An email address that represents a service
             account. For example, `my-other-app@appspot.gserviceaccount.com`.

          * `group:{emailid}`: An email address that represents a Google group.
             For example, `admins@example.com`.

          * `domain:{domain}`: A Google Apps domain name that represents all the
             users of that domain. For example, `google.com` or `example.com`.

        items:
          type: string
        type: array
        required: false
      role:
        description: |-
          Role that is assigned to `members`.
          For example, `roles/viewer`, `roles/editor`, or `roles/owner`.
          Required
        type: string
        required: false
  ChangeReport:
    description: |-
      Change report associated with a particular service configuration.

      It contains a list of ConfigChanges based on the comparison between
      two service configurations.
    properties:
      configChanges:
        description: |-
          List of changes between two service configurations.
          The changes will be alphabetically sorted based on the identifier
          of each change.
          A ConfigChange identifier is a dot separated path to the configuration.
          Example: visibility.rules[selector='LibraryService.CreateBook'].restriction
        items:
          type: ConfigChange
        type: array
        required: false
  CloudAuditOptions:
    description: Write a Cloud Audit log
    properties: {}
  Condition:
    description: A condition to be met.
    properties:
      iam:
        description: Trusted attributes supplied by the IAM system.
        enum:
          - NO_ATTR
          - AUTHORITY
          - ATTRIBUTION
        type: string
        required: false
      op:
        description: An operator to apply the subject with.
        enum:
          - NO_OP
          - EQUALS
          - NOT_EQUALS
          - IN
          - NOT_IN
          - DISCHARGED
        type: string
        required: false
      svc:
        description: Trusted attributes discharged by the service.
        type: string
        required: false
      sys:
        description: |-
          Trusted attributes supplied by any service that owns resources and uses
          the IAM system for access control.
        enum:
          - NO_ATTR
          - REGION
          - SERVICE
          - NAME
          - IP
        type: string
        required: false
      value:
        description: DEPRECATED. Use 'values' instead.
        type: string
        required: false
      values:
        description: The objects of the condition. This is mutually exclusive with 'value'.
        items:
          type: string
        type: array
        required: false
  ConfigChange:
    description: |-
      Output generated from semantically comparing two versions of a service
      configuration.

      Includes detailed information about a field that have changed with
      applicable advice about potential consequences for the change, such as
      backwards-incompatibility.
    properties:
      advices:
        description: |-
          Collection of advice provided for this change, useful for determining the
          possible impact of this change.
        items:
          type: Advice
        type: array
        required: false
      changeType:
        description: 'The type for this change, either ADDED, REMOVED, or MODIFIED.'
        enum:
          - CHANGE_TYPE_UNSPECIFIED
          - ADDED
          - REMOVED
          - MODIFIED
        type: string
        required: false
      element:
        description: |-
          Object hierarchy path to the change, with levels separated by a '.'
          character. For repeated fields, an applicable unique identifier field is
          used for the index (usually selector, name, or id). For maps, the term
          'key' is used. If the field has no unique identifier, the numeric index
          is used.
          Examples:
          - visibility.rules[selector=="google.LibraryService.CreateBook"].restriction
          - quota.metric_rules[selector=="google"].metric_costs[key=="reads"].value
          - logging.producer_destinations[0]
        type: string
        required: false
      newValue:
        description: |-
          Value of the changed object in the new Service configuration,
          in JSON format. This field will not be populated if ChangeType == REMOVED.
        type: string
        required: false
      oldValue:
        description: |-
          Value of the changed object in the old Service configuration,
          in JSON format. This field will not be populated if ChangeType == ADDED.
        type: string
        required: false
  ConfigFile:
    description: Generic specification of a source configuration file
    properties:
      fileContents:
        description: The bytes that constitute the file.
        format: byte
        type: string
        facets:
          format: string
        required: false
      filePath:
        description: The file name of the configuration file (full or relative path).
        type: string
        required: false
      fileType:
        description: The type of configuration file this represents.
        enum:
          - FILE_TYPE_UNSPECIFIED
          - SERVICE_CONFIG_YAML
          - OPEN_API_JSON
          - OPEN_API_YAML
          - FILE_DESCRIPTOR_SET_PROTO
        type: string
        required: false
  ConfigRef:
    description: Represents a service configuration with its name and id.
    properties:
      name:
        description: |-
          Resource name of a service config. It must have the following
          format: "services/{service name}/configs/{config id}".
        type: string
        required: false
  ConfigSource:
    description: |-
      Represents a source file which is used to generate the service configuration
      defined by `google.api.Service`.
    properties:
      files:
        description: |-
          Set of source configuration files that are used to generate a service
          configuration (`google.api.Service`).
        items:
          type: ConfigFile
        type: array
        required: false
      id:
        description: |-
          A unique ID for a specific instance of this message, typically assigned
          by the client for tracking purpose. If empty, the server may choose to
          generate one instead.
        type: string
        required: false
  Context:
    description: |-
      `Context` defines which contexts an API requests.

      Example:

          context:
            rules:
            - selector: "*"
              requested:
              - google.rpc.context.ProjectContext
              - google.rpc.context.OriginContext

      The above specifies that all methods in the API request
      `google.rpc.context.ProjectContext` and
      `google.rpc.context.OriginContext`.

      Available context types are defined in package
      `google.rpc.context`.
    properties:
      rules:
        description: |-
          A list of RPC context rules that apply to individual API methods.

          **NOTE:** All service configuration rules follow "last one wins" order.
        items:
          type: ContextRule
        type: array
        required: false
  ContextRule:
    description: |-
      A context rule provides information about the context for an individual API
      element.
    properties:
      provided:
        description: A list of full type names of provided contexts.
        items:
          type: string
        type: array
        required: false
      requested:
        description: A list of full type names of requested contexts.
        items:
          type: string
        type: array
        required: false
      selector:
        description: |-
          Selects the methods to which this rule applies.

          Refer to selector for syntax details.
        type: string
        required: false
  Control:
    description: |-
      Selects and configures the service controller used by the service.  The
      service controller handles features like abuse, quota, billing, logging,
      monitoring, etc.
    properties:
      environment:
        description: |-
          The service control environment to use. If empty, no control plane
          feature (like quota and billing) will be enabled.
        type: string
        required: false
  CounterOptions:
    description: Options for counters
    properties:
      field:
        description: The field value to attribute.
        type: string
        required: false
      metric:
        description: The metric to update.
        type: string
        required: false
  CustomError:
    description: |-
      Customize service error responses.  For example, list any service
      specific protobuf types that can appear in error detail lists of
      error responses.

      Example:

          custom_error:
            types:
            - google.foo.v1.CustomError
            - google.foo.v1.AnotherError
    properties:
      rules:
        description: |-
          The list of custom error rules that apply to individual API messages.

          **NOTE:** All service configuration rules follow "last one wins" order.
        items:
          type: CustomErrorRule
        type: array
        required: false
      types:
        description: 'The list of custom error detail types, e.g. ''google.foo.v1.CustomError''.'
        items:
          type: string
        type: array
        required: false
  CustomErrorRule:
    description: A custom error rule.
    properties:
      isErrorType:
        description: |-
          Mark this message as possible payload in error response.  Otherwise,
          objects of this type will be filtered when they appear in error payload.
        type: boolean
        required: false
      selector:
        description: |-
          Selects messages to which this rule applies.

          Refer to selector for syntax details.
        type: string
        required: false
  CustomHttpPattern:
    description: A custom pattern is used for defining custom HTTP verb.
    properties:
      kind:
        description: The name of this custom HTTP verb.
        type: string
        required: false
      path:
        description: The path matched by this custom verb.
        type: string
        required: false
  DataAccessOptions:
    description: Write a Data Access (Gin) log
    properties: {}
  DeleteServiceStrategy:
    description: |-
      Strategy used to delete a service. This strategy is a placeholder only
      used by the system generated rollout to delete a service.
    properties: {}
  Diagnostic:
    description: Represents a diagnostic message (error or warning)
    properties:
      kind:
        description: The kind of diagnostic information provided.
        enum:
          - WARNING
          - ERROR
        type: string
        required: false
      location:
        description: File name and line number of the error or warning.
        type: string
        required: false
      message:
        description: Message describing the error or warning.
        type: string
        required: false
  DisableServiceRequest:
    description: Request message for DisableService method.
    properties:
      consumerId:
        description: |-
          The identity of consumer resource which service disablement will be
          applied to.

          The Google Service Management implementation accepts the following
          forms:
          - "project:<project_id>"

          Note: this is made compatible with
          google.api.servicecontrol.v1.Operation.consumer_id.
        type: string
        required: false
  Documentation:
    description: |-
      `Documentation` provides the information for describing a service.

      Example:
      <pre><code>documentation:
        summary: >
          The Google Calendar API gives access
          to most calendar features.
        pages:
        - name: Overview
          content: &#40;== include google/foo/overview.md ==&#41;
        - name: Tutorial
          content: &#40;== include google/foo/tutorial.md ==&#41;
          subpages;
          - name: Java
            content: &#40;== include google/foo/tutorial_java.md ==&#41;
        rules:
        - selector: google.calendar.Calendar.Get
          description: >
            ...
        - selector: google.calendar.Calendar.Put
          description: >
            ...
      </code></pre>
      Documentation is provided in markdown syntax. In addition to
      standard markdown features, definition lists, tables and fenced
      code blocks are supported. Section headers can be provided and are
      interpreted relative to the section nesting of the context where
      a documentation fragment is embedded.

      Documentation from the IDL is merged with documentation defined
      via the config at normalization time, where documentation provided
      by config rules overrides IDL provided.

      A number of constructs specific to the API platform are supported
      in documentation text.

      In order to reference a proto element, the following
      notation can be used:
      <pre><code>&#91;fully.qualified.proto.name]&#91;]</code></pre>
      To override the display text used for the link, this can be used:
      <pre><code>&#91;display text]&#91;fully.qualified.proto.name]</code></pre>
      Text can be excluded from doc using the following notation:
      <pre><code>&#40;-- internal comment --&#41;</code></pre>
      Comments can be made conditional using a visibility label. The below
      text will be only rendered if the `BETA` label is available:
      <pre><code>&#40;--BETA: comment for BETA users --&#41;</code></pre>
      A few directives are available in documentation. Note that
      directives must appear on a single line to be properly
      identified. The `include` directive includes a markdown file from
      an external source:
      <pre><code>&#40;== include path/to/file ==&#41;</code></pre>
      The `resource_for` directive marks a message to be the resource of
      a collection in REST view. If it is not specified, tools attempt
      to infer the resource from the operations in a collection:
      <pre><code>&#40;== resource_for v1.shelves.books ==&#41;</code></pre>
      The directive `suppress_warning` does not directly affect documentation
      and is documented together with service config validation.
    properties:
      documentationRootUrl:
        description: The URL to the root of documentation.
        type: string
        required: false
      overview:
        description: |-
          Declares a single overview page. For example:
          <pre><code>documentation:
            summary: ...
            overview: &#40;== include overview.md ==&#41;
          </code></pre>
          This is a shortcut for the following declaration (using pages style):
          <pre><code>documentation:
            summary: ...
            pages:
            - name: Overview
              content: &#40;== include overview.md ==&#41;
          </code></pre>
          Note: you cannot specify both `overview` field and `pages` field.
        type: string
        required: false
      pages:
        description: The top level pages for the documentation set.
        items:
          type: Page
        type: array
        required: false
      rules:
        description: |-
          A list of documentation rules that apply to individual API elements.

          **NOTE:** All service configuration rules follow "last one wins" order.
        items:
          type: DocumentationRule
        type: array
        required: false
      summary:
        description: |-
          A short summary of what the service does. Can only be provided by
          plain text.
        type: string
        required: false
  DocumentationRule:
    description: A documentation rule provides information about individual API elements.
    properties:
      deprecationDescription:
        description: |-
          Deprecation description of the selected element(s). It can be provided if an
          element is marked as `deprecated`.
        type: string
        required: false
      description:
        description: Description of the selected API(s).
        type: string
        required: false
      selector:
        description: |-
          The selector is a comma-separated list of patterns. Each pattern is a
          qualified name of the element which may end in "*", indicating a wildcard.
          Wildcards are only allowed at the end and for a whole component of the
          qualified name, i.e. "foo.*" is ok, but not "foo.b*" or "foo.*.bar". To
          specify a default for all applicable elements, the whole pattern "*"
          is used.
        type: string
        required: false
  EnableServiceRequest:
    description: Request message for EnableService method.
    properties:
      consumerId:
        description: |-
          The identity of consumer resource which service enablement will be
          applied to.

          The Google Service Management implementation accepts the following
          forms:
          - "project:<project_id>"

          Note: this is made compatible with
          google.api.servicecontrol.v1.Operation.consumer_id.
        type: string
        required: false
  Endpoint:
    description: |-
      `Endpoint` describes a network endpoint that serves a set of APIs.
      A service may expose any number of endpoints, and all endpoints share the
      same service configuration, such as quota configuration and monitoring
      configuration.

      Example service configuration:

          name: library-example.googleapis.com
          endpoints:
            # Below entry makes 'google.example.library.v1.Library'
            # API be served from endpoint address library-example.googleapis.com.
            # It also allows HTTP OPTIONS calls to be passed to the backend, for
            # it to decide whether the subsequent cross-origin request is
            # allowed to proceed.
          - name: library-example.googleapis.com
            apis: google.example.library.v1.Library
            allow_cors: true
            # Below entry makes 'google.example.library.v1.Library'
            # API be served from endpoint address
            # google.example.library-example.v1.LibraryManager.
          - name: library-manager.googleapis.com
            apis: google.example.library.v1.LibraryManager
            # BNS address for a borg job. Can specify a task by appending
            # "/taskId" (e.g. "/0") to the job spec.

      Example OpenAPI extension for endpoint with allow_cors set to true:

          {
            "swagger": "2.0",
            "info": {
              "description": "A simple..."
            },
            "host": "MY_PROJECT_ID.appspot.com",
            "x-google-endpoints": [{
              "name": "MY_PROJECT_ID.appspot.com",
              "allow_cors": "true"
            }]
          }
    properties:
      aliases:
        description: |-
          DEPRECATED: This field is no longer supported. Instead of using aliases,
          please specify multiple google.api.Endpoint for each of the intented
          alias.

          Additional names that this endpoint will be hosted on.
        items:
          type: string
        type: array
        required: false
      allowCors:
        description: |-
          Allowing
          [CORS](https://en.wikipedia.org/wiki/Cross-origin_resource_sharing), aka
          cross-domain traffic, would allow the backends served from this endpoint to
          receive and respond to HTTP OPTIONS requests. The response will be used by
          the browser to determine whether the subsequent cross-origin request is
          allowed to proceed.
        type: boolean
        required: false
      apis:
        description: The list of APIs served by this endpoint.
        items:
          type: string
        type: array
        required: false
      features:
        description: The list of features enabled on this endpoint.
        items:
          type: string
        type: array
        required: false
      name:
        description: The canonical name of this endpoint.
        type: string
        required: false
  Enum:
    description: Enum type definition.
    properties:
      enumvalue:
        description: Enum value definitions.
        items:
          type: EnumValue
        type: array
        required: false
      name:
        description: Enum type name.
        type: string
        required: false
      options:
        description: Protocol buffer options.
        items:
          type: Option
        type: array
        required: false
      sourceContext:
        description: The source context.
        type: SourceContext
        required: false
      syntax:
        description: The source syntax.
        enum:
          - SYNTAX_PROTO2
          - SYNTAX_PROTO3
        type: string
        required: false
  EnumValue:
    description: Enum value definition.
    properties:
      name:
        description: Enum value name.
        type: string
        required: false
      number:
        description: Enum value number.
        format: int32
        type: integer
        required: false
      options:
        description: Protocol buffer options.
        items:
          type: Option
        type: array
        required: false
  Field:
    description: A single field of a message type.
    properties:
      cardinality:
        description: The field cardinality.
        enum:
          - CARDINALITY_UNKNOWN
          - CARDINALITY_OPTIONAL
          - CARDINALITY_REQUIRED
          - CARDINALITY_REPEATED
        type: string
        required: false
      defaultValue:
        description: The string value of the default value of this field. Proto2 syntax only.
        type: string
        required: false
      jsonName:
        description: The field JSON name.
        type: string
        required: false
      kind:
        description: The field type.
        enum:
          - TYPE_UNKNOWN
          - TYPE_DOUBLE
          - TYPE_FLOAT
          - TYPE_INT64
          - TYPE_UINT64
          - TYPE_INT32
          - TYPE_FIXED64
          - TYPE_FIXED32
          - TYPE_BOOL
          - TYPE_STRING
          - TYPE_GROUP
          - TYPE_MESSAGE
          - TYPE_BYTES
          - TYPE_UINT32
          - TYPE_ENUM
          - TYPE_SFIXED32
          - TYPE_SFIXED64
          - TYPE_SINT32
          - TYPE_SINT64
        type: string
        required: false
      name:
        description: The field name.
        type: string
        required: false
      number:
        description: The field number.
        format: int32
        type: integer
        required: false
      oneofIndex:
        description: |-
          The index of the field type in `Type.oneofs`, for message or enumeration
          types. The first type has index 1; zero means the type is not in the list.
        format: int32
        type: integer
        required: false
      options:
        description: The protocol buffer options.
        items:
          type: Option
        type: array
        required: false
      packed:
        description: Whether to use alternative packed wire representation.
        type: boolean
        required: false
      typeUrl:
        description: |-
          The field type URL, without the scheme, for message or enumeration
          types. Example: `"type.googleapis.com/google.protobuf.Timestamp"`.
        type: string
        required: false
  GenerateConfigReportRequest:
    description: Request message for GenerateConfigReport method.
    properties:
      newConfig:
        additionalProperties:
          description: Properties of the object. Contains field @type with type URL.
        description: |-
          Service configuration for which we want to generate the report.
          For this version of API, the supported types are
          google.api.servicemanagement.v1.ConfigRef,
          google.api.servicemanagement.v1.ConfigSource,
          and google.api.Service
        type: object
        required: false
      oldConfig:
        additionalProperties:
          description: Properties of the object. Contains field @type with type URL.
        description: |-
          Service configuration against which the comparison will be done.
          For this version of API, the supported types are
          google.api.servicemanagement.v1.ConfigRef,
          google.api.servicemanagement.v1.ConfigSource,
          and google.api.Service
        type: object
        required: false
  GenerateConfigReportResponse:
    description: Response message for GenerateConfigReport method.
    properties:
      changeReports:
        description: |-
          list of ChangeReport, each corresponding to comparison between two
          service configurations.
        items:
          type: ChangeReport
        type: array
        required: false
      diagnostics:
        description: |-
          Errors / Linter warnings associated with the service definition this
          report
          belongs to.
        items:
          type: Diagnostic
        type: array
        required: false
      id:
        description: ID of the service configuration this report belongs to.
        type: string
        required: false
      serviceName:
        description: Name of the service this report belongs to.
        type: string
        required: false
  GetIamPolicyRequest:
    description: Request message for `GetIamPolicy` method.
    properties: {}
  Http:
    description: |-
      Defines the HTTP configuration for a service. It contains a list of
      HttpRule, each specifying the mapping of an RPC method
      to one or more HTTP REST API methods.
    properties:
      rules:
        description: |-
          A list of HTTP configuration rules that apply to individual API methods.

          **NOTE:** All service configuration rules follow "last one wins" order.
        items:
          type: HttpRule
        type: array
        required: false
  HttpRule:
    description: |-
      `HttpRule` defines the mapping of an RPC method to one or more HTTP
      REST APIs.  The mapping determines what portions of the request
      message are populated from the path, query parameters, or body of
      the HTTP request.  The mapping is typically specified as an
      `google.api.http` annotation, see "google/api/annotations.proto"
      for details.

      The mapping consists of a field specifying the path template and
      method kind.  The path template can refer to fields in the request
      message, as in the example below which describes a REST GET
      operation on a resource collection of messages:

      ```proto
      service Messaging {
        rpc GetMessage(GetMessageRequest) returns (Message) {
          option (google.api.http).get = "/v1/messages/{message_id}/{sub.subfield}";
        }
      }
      message GetMessageRequest {
        message SubMessage {
          string subfield = 1;
        }
        string message_id = 1; // mapped to the URL
        SubMessage sub = 2;    // `sub.subfield` is url-mapped
      }
      message Message {
        string text = 1; // content of the resource
      }
      ```

      This definition enables an automatic, bidrectional mapping of HTTP
      JSON to RPC. Example:

      HTTP | RPC
      -----|-----
      `GET /v1/messages/123456/foo`  | `GetMessage(message_id: "123456" sub: SubMessage(subfield: "foo"))`

      In general, not only fields but also field paths can be referenced
      from a path pattern. Fields mapped to the path pattern cannot be
      repeated and must have a primitive (non-message) type.

      Any fields in the request message which are not bound by the path
      pattern automatically become (optional) HTTP query
      parameters. Assume the following definition of the request message:

      ```proto
      message GetMessageRequest {
        message SubMessage {
          string subfield = 1;
        }
        string message_id = 1; // mapped to the URL
        int64 revision = 2;    // becomes a parameter
        SubMessage sub = 3;    // `sub.subfield` becomes a parameter
      }
      ```

      This enables a HTTP JSON to RPC mapping as below:

      HTTP | RPC
      -----|-----
      `GET /v1/messages/123456?revision=2&sub.subfield=foo` | `GetMessage(message_id: "123456" revision: 2 sub: SubMessage(subfield: "foo"))`

      Note that fields which are mapped to HTTP parameters must have a
      primitive type or a repeated primitive type. Message types are not
      allowed. In the case of a repeated type, the parameter can be
      repeated in the URL, as in `...?param=A&param=B`.

      For HTTP method kinds which allow a request body, the `body` field
      specifies the mapping. Consider a REST update method on the
      message resource collection:

      ```proto
      service Messaging {
        rpc UpdateMessage(UpdateMessageRequest) returns (Message) {
          option (google.api.http) = {
            put: "/v1/messages/{message_id}"
            body: "message"
          };
        }
      }
      message UpdateMessageRequest {
        string message_id = 1; // mapped to the URL
        Message message = 2;   // mapped to the body
      }
      ```

      The following HTTP JSON to RPC mapping is enabled, where the
      representation of the JSON in the request body is determined by
      protos JSON encoding:

      HTTP | RPC
      -----|-----
      `PUT /v1/messages/123456 { "text": "Hi!" }` | `UpdateMessage(message_id: "123456" message { text: "Hi!" })`

      The special name `*` can be used in the body mapping to define that
      every field not bound by the path template should be mapped to the
      request body.  This enables the following alternative definition of
      the update method:

      ```proto
      service Messaging {
        rpc UpdateMessage(Message) returns (Message) {
          option (google.api.http) = {
            put: "/v1/messages/{message_id}"
            body: "*"
          };
        }
      }
      message Message {
        string message_id = 1;
        string text = 2;
      }
      ```

      The following HTTP JSON to RPC mapping is enabled:

      HTTP | RPC
      -----|-----
      `PUT /v1/messages/123456 { "text": "Hi!" }` | `UpdateMessage(message_id: "123456" text: "Hi!")`

      Note that when using `*` in the body mapping, it is not possible to
      have HTTP parameters, as all fields not bound by the path end in
      the body. This makes this option more rarely used in practice of
      defining REST APIs. The common usage of `*` is in custom methods
      which don't use the URL at all for transferring data.

      It is possible to define multiple HTTP methods for one RPC by using
      the `additional_bindings` option. Example:

      ```proto
      service Messaging {
        rpc GetMessage(GetMessageRequest) returns (Message) {
          option (google.api.http) = {
            get: "/v1/messages/{message_id}"
            additional_bindings {
              get: "/v1/users/{user_id}/messages/{message_id}"
            }
          };
        }
      }
      message GetMessageRequest {
        string message_id = 1;
        string user_id = 2;
      }
      ```

      This enables the following two alternative HTTP JSON to RPC
      mappings:

      HTTP | RPC
      -----|-----
      `GET /v1/messages/123456` | `GetMessage(message_id: "123456")`
      `GET /v1/users/me/messages/123456` | `GetMessage(user_id: "me" message_id: "123456")`

      # Rules for HTTP mapping

      The rules for mapping HTTP path, query parameters, and body fields
      to the request message are as follows:

      1. The `body` field specifies either `*` or a field path, or is
         omitted. If omitted, it assumes there is no HTTP body.
      2. Leaf fields (recursive expansion of nested messages in the
         request) can be classified into three types:
          (a) Matched in the URL template.
          (b) Covered by body (if body is `*`, everything except (a) fields;
              else everything under the body field)
          (c) All other fields.
      3. URL query parameters found in the HTTP request are mapped to (c) fields.
      4. Any body sent with an HTTP request can contain only (b) fields.

      The syntax of the path template is as follows:

          Template = "/" Segments [ Verb ] ;
          Segments = Segment { "/" Segment } ;
          Segment  = "*" | "**" | LITERAL | Variable ;
          Variable = "{" FieldPath [ "=" Segments ] "}" ;
          FieldPath = IDENT { "." IDENT } ;
          Verb     = ":" LITERAL ;

      The syntax `*` matches a single path segment. It follows the semantics of
      [RFC 6570](https://tools.ietf.org/html/rfc6570) Section 3.2.2 Simple String
      Expansion.

      The syntax `**` matches zero or more path segments. It follows the semantics
      of [RFC 6570](https://tools.ietf.org/html/rfc6570) Section 3.2.3 Reserved
      Expansion. NOTE: it must be the last segment in the path except the Verb.

      The syntax `LITERAL` matches literal text in the URL path.

      The syntax `Variable` matches the entire path as specified by its template;
      this nested template must not contain further variables. If a variable
      matches a single path segment, its template may be omitted, e.g. `{var}`
      is equivalent to `{var=*}`.

      NOTE: the field paths in variables and in the `body` must not refer to
      repeated fields or map fields.

      Use CustomHttpPattern to specify any HTTP method that is not included in the
      `pattern` field, such as HEAD, or "*" to leave the HTTP method unspecified for
      a given URL path rule. The wild-card rule is useful for services that provide
      content to Web (HTML) clients.
    properties:
      additionalBindings:
        description: |-
          Additional HTTP bindings for the selector. Nested bindings must
          not contain an `additional_bindings` field themselves (that is,
          the nesting may only be one level deep).
        items:
          type: HttpRule
        type: array
        required: false
      body:
        description: |-
          The name of the request field whose value is mapped to the HTTP body, or
          `*` for mapping all fields not captured by the path pattern to the HTTP
          body. NOTE: the referred field must not be a repeated field and must be
          present at the top-level of response message type.
        type: string
        required: false
      custom:
        description: Custom pattern is used for defining custom verbs.
        type: CustomHttpPattern
        required: false
      delete:
        description: Used for deleting a resource.
        type: string
        required: false
      get:
        description: Used for listing and getting information about resources.
        type: string
        required: false
      mediaDownload:
        description: |-
          Do not use this. For media support, add instead
          [][google.bytestream.RestByteStream] as an API to your
          configuration.
        type: MediaDownload
        required: false
      mediaUpload:
        description: |-
          Do not use this. For media support, add instead
          [][google.bytestream.RestByteStream] as an API to your
          configuration.
        type: MediaUpload
        required: false
      patch:
        description: Used for updating a resource.
        type: string
        required: false
      post:
        description: Used for creating a resource.
        type: string
        required: false
      put:
        description: Used for updating a resource.
        type: string
        required: false
      responseBody:
        description: |-
          The name of the response field whose value is mapped to the HTTP body of
          response. Other response fields are ignored. This field is optional. When
          not set, the response message will be used as HTTP body of response.
          NOTE: the referred field must be not a repeated field and must be present
          at the top-level of response message type.
        type: string
        required: false
      selector:
        description: |-
          Selects methods to which this rule applies.

          Refer to selector for syntax details.
        type: string
        required: false
  LabelDescriptor:
    description: A description of a label.
    properties:
      description:
        description: A human-readable description for the label.
        type: string
        required: false
      key:
        description: The label key.
        type: string
        required: false
      valueType:
        description: The type of data that can be assigned to the label.
        enum:
          - STRING
          - BOOL
          - INT64
        type: string
        required: false
  ListServiceConfigsResponse:
    description: Response message for ListServiceConfigs method.
    properties:
      nextPageToken:
        description: The token of the next page of results.
        type: string
        required: false
      serviceConfigs:
        description: The list of service configuration resources.
        items:
          type: Service
        type: array
        required: false
  ListServiceRolloutsResponse:
    description: Response message for ListServiceRollouts method.
    properties:
      nextPageToken:
        description: The token of the next page of results.
        type: string
        required: false
      rollouts:
        description: The list of rollout resources.
        items:
          type: Rollout
        type: array
        required: false
  ListServicesResponse:
    description: Response message for `ListServices` method.
    properties:
      nextPageToken:
        description: Token that can be passed to `ListServices` to resume a paginated query.
        type: string
        required: false
      services:
        description: The returned services will only have the name field set.
        items:
          type: ManagedService
        type: array
        required: false
  LogConfig:
    description: |-
      Specifies what kind of log the caller must write
      Increment a streamz counter with the specified metric and field names.

      Metric names should start with a '/', generally be lowercase-only,
      and end in "_count". Field names should not contain an initial slash.
      The actual exported metric names will have "/iam/policy" prepended.

      Field names correspond to IAM request parameters and field values are
      their respective values.

      At present the only supported field names are
         - "iam_principal", corresponding to IAMContext.principal;
         - "" (empty string), resulting in one aggretated counter with no field.

      Examples:
        counter { metric: "/debug_access_count"  field: "iam_principal" }
        ==> increment counter /iam/policy/backend_debug_access_count
                              {iam_principal=[value of IAMContext.principal]}

      At this time we do not support:
      * multiple field names (though this may be supported in the future)
      * decrementing the counter
      * incrementing it by anything other than 1
    properties:
      cloudAudit:
        description: Cloud audit options.
        type: CloudAuditOptions
        required: false
      counter:
        description: Counter options.
        type: CounterOptions
        required: false
      dataAccess:
        description: Data access options.
        type: DataAccessOptions
        required: false
  LogDescriptor:
    description: |-
      A description of a log type. Example in YAML format:

          - name: library.googleapis.com/activity_history
            description: The history of borrowing and returning library items.
            display_name: Activity
            labels:
            - key: /customer_id
              description: Identifier of a library customer
    properties:
      description:
        description: |-
          A human-readable description of this log. This information appears in
          the documentation and can contain details.
        type: string
        required: false
      displayName:
        description: |-
          The human-readable name for this log. This information appears on
          the user interface and should be concise.
        type: string
        required: false
      labels:
        description: |-
          The set of labels that are available to describe a specific log entry.
          Runtime requests that contain labels not specified here are
          considered invalid.
        items:
          type: LabelDescriptor
        type: array
        required: false
      name:
        description: |-
          The name of the log. It must be less than 512 characters long and can
          include the following characters: upper- and lower-case alphanumeric
          characters [A-Za-z0-9], and punctuation characters including
          slash, underscore, hyphen, period [/_-.].
        type: string
        required: false
  Logging:
    description: |-
      Logging configuration of the service.

      The following example shows how to configure logs to be sent to the
      producer and consumer projects. In the example, the `activity_history`
      log is sent to both the producer and consumer projects, whereas the
      `purchase_history` log is only sent to the producer project.

          monitored_resources:
          - type: library.googleapis.com/branch
            labels:
            - key: /city
              description: The city where the library branch is located in.
            - key: /name
              description: The name of the branch.
          logs:
          - name: activity_history
            labels:
            - key: /customer_id
          - name: purchase_history
          logging:
            producer_destinations:
            - monitored_resource: library.googleapis.com/branch
              logs:
              - activity_history
              - purchase_history
            consumer_destinations:
            - monitored_resource: library.googleapis.com/branch
              logs:
              - activity_history
    properties:
      consumerDestinations:
        description: |-
          Logging configurations for sending logs to the consumer project.
          There can be multiple consumer destinations, each one must have a
          different monitored resource type. A log can be used in at most
          one consumer destination.
        items:
          type: LoggingDestination
        type: array
        required: false
      producerDestinations:
        description: |-
          Logging configurations for sending logs to the producer project.
          There can be multiple producer destinations, each one must have a
          different monitored resource type. A log can be used in at most
          one producer destination.
        items:
          type: LoggingDestination
        type: array
        required: false
  LoggingDestination:
    description: |-
      Configuration of a specific logging destination (the producer project
      or the consumer project).
    properties:
      logs:
        description: |-
          Names of the logs to be sent to this destination. Each name must
          be defined in the Service.logs section. If the log name is
          not a domain scoped name, it will be automatically prefixed with
          the service name followed by "/".
        items:
          type: string
        type: array
        required: false
      monitoredResource:
        description: |-
          The monitored resource type. The type must be defined in the
          Service.monitored_resources section.
        type: string
        required: false
  ManagedService:
    description: |-
      The full representation of a Service that is managed by
      Google Service Management.
    properties:
      producerProjectId:
        description: ID of the project that produces and owns this service.
        type: string
        required: false
      serviceName:
        description: |-
          The name of the service. See the [overview](/service-management/overview)
          for naming requirements.
        type: string
        required: false
  MediaDownload:
    description: |-
      Do not use this. For media support, add instead
      [][google.bytestream.RestByteStream] as an API to your
      configuration.
    properties:
      enabled:
        description: Whether download is enabled.
        type: boolean
        required: false
  MediaUpload:
    description: |-
      Do not use this. For media support, add instead
      [][google.bytestream.RestByteStream] as an API to your
      configuration.
    properties:
      enabled:
        description: Whether upload is enabled.
        type: boolean
        required: false
  Method:
    description: Method represents a method of an api.
    properties:
      name:
        description: The simple name of this method.
        type: string
        required: false
      options:
        description: Any metadata attached to the method.
        items:
          type: Option
        type: array
        required: false
      requestStreaming:
        description: 'If true, the request is streamed.'
        type: boolean
        required: false
      requestTypeUrl:
        description: A URL of the input message type.
        type: string
        required: false
      responseStreaming:
        description: 'If true, the response is streamed.'
        type: boolean
        required: false
      responseTypeUrl:
        description: The URL of the output message type.
        type: string
        required: false
      syntax:
        description: The source syntax of this method.
        enum:
          - SYNTAX_PROTO2
          - SYNTAX_PROTO3
        type: string
        required: false
  MetricDescriptor:
    description: |-
      Defines a metric type and its schema. Once a metric descriptor is created,
      deleting or altering it stops data collection and makes the metric type's
      existing data unusable.
    properties:
      description:
        description: 'A detailed description of the metric, which can be used in documentation.'
        type: string
        required: false
      displayName:
        description: |-
          A concise name for the metric, which can be displayed in user interfaces.
          Use sentence case without an ending period, for example "Request count".
        type: string
        required: false
      labels:
        description: |-
          The set of labels that can be used to describe a specific
          instance of this metric type. For example, the
          `appengine.googleapis.com/http/server/response_latencies` metric
          type has a label for the HTTP response code, `response_code`, so
          you can look at latencies for successful responses or just
          for responses that failed.
        items:
          type: LabelDescriptor
        type: array
        required: false
      metricKind:
        description: |-
          Whether the metric records instantaneous values, changes to a value, etc.
          Some combinations of `metric_kind` and `value_type` might not be supported.
        enum:
          - METRIC_KIND_UNSPECIFIED
          - GAUGE
          - DELTA
          - CUMULATIVE
        type: string
        required: false
      name:
        description: |-
          The resource name of the metric descriptor. Depending on the
          implementation, the name typically includes: (1) the parent resource name
          that defines the scope of the metric type or of its data; and (2) the
          metric's URL-encoded type, which also appears in the `type` field of this
          descriptor. For example, following is the resource name of a custom
          metric within the GCP project 123456789:

              "projects/123456789/metricDescriptors/custom.googleapis.com%2Finvoice%2Fpaid%2Famount"
        type: string
        required: false
      type:
        description: |-
          The metric type, including its DNS name prefix. The type is not
          URL-encoded.  All user-defined metric types have the DNS name
          `custom.googleapis.com`.  Metric types should use a natural hierarchical
          grouping. For example:

              "custom.googleapis.com/invoice/paid/amount"
              "appengine.googleapis.com/http/server/response_latencies"
        type: string
        required: false
      unit:
        description: |-
          The unit in which the metric value is reported. It is only applicable
          if the `value_type` is `INT64`, `DOUBLE`, or `DISTRIBUTION`. The
          supported units are a subset of [The Unified Code for Units of
          Measure](http://unitsofmeasure.org/ucum.html) standard:

          **Basic units (UNIT)**

          * `bit`   bit
          * `By`    byte
          * `s`     second
          * `min`   minute
          * `h`     hour
          * `d`     day

          **Prefixes (PREFIX)**

          * `k`     kilo    (10**3)
          * `M`     mega    (10**6)
          * `G`     giga    (10**9)
          * `T`     tera    (10**12)
          * `P`     peta    (10**15)
          * `E`     exa     (10**18)
          * `Z`     zetta   (10**21)
          * `Y`     yotta   (10**24)
          * `m`     milli   (10**-3)
          * `u`     micro   (10**-6)
          * `n`     nano    (10**-9)
          * `p`     pico    (10**-12)
          * `f`     femto   (10**-15)
          * `a`     atto    (10**-18)
          * `z`     zepto   (10**-21)
          * `y`     yocto   (10**-24)
          * `Ki`    kibi    (2**10)
          * `Mi`    mebi    (2**20)
          * `Gi`    gibi    (2**30)
          * `Ti`    tebi    (2**40)

          **Grammar**

          The grammar includes the dimensionless unit `1`, such as `1/s`.

          The grammar also includes these connectors:

          * `/`    division (as an infix operator, e.g. `1/s`).
          * `.`    multiplication (as an infix operator, e.g. `GBy.d`)

          The grammar for a unit is as follows:

              Expression = Component { "." Component } { "/" Component } ;

              Component = [ PREFIX ] UNIT [ Annotation ]
                        | Annotation
                        | "1"
                        ;

              Annotation = "{" NAME "}" ;

          Notes:

          * `Annotation` is just a comment if it follows a `UNIT` and is
             equivalent to `1` if it is used alone. For examples,
             `{requests}/s == 1/s`, `By{transmitted}/s == By/s`.
          * `NAME` is a sequence of non-blank printable ASCII characters not
             containing '{' or '}'.
        type: string
        required: false
      valueType:
        description: |-
          Whether the measurement is an integer, a floating-point number, etc.
          Some combinations of `metric_kind` and `value_type` might not be supported.
        enum:
          - VALUE_TYPE_UNSPECIFIED
          - BOOL
          - INT64
          - DOUBLE
          - STRING
          - DISTRIBUTION
          - MONEY
        type: string
        required: false
  Mixin:
    description: |-
      Declares an API to be included in this API. The including API must
      redeclare all the methods from the included API, but documentation
      and options are inherited as follows:

      - If after comment and whitespace stripping, the documentation
        string of the redeclared method is empty, it will be inherited
        from the original method.

      - Each annotation belonging to the service config (http,
        visibility) which is not set in the redeclared method will be
        inherited.

      - If an http annotation is inherited, the path pattern will be
        modified as follows. Any version prefix will be replaced by the
        version of the including API plus the root path if specified.

      Example of a simple mixin:

          package google.acl.v1;
          service AccessControl {
            // Get the underlying ACL object.
            rpc GetAcl(GetAclRequest) returns (Acl) {
              option (google.api.http).get = "/v1/{resource=**}:getAcl";
            }
          }

          package google.storage.v2;
          service Storage {
            //       rpc GetAcl(GetAclRequest) returns (Acl);

            // Get a data record.
            rpc GetData(GetDataRequest) returns (Data) {
              option (google.api.http).get = "/v2/{resource=**}";
            }
          }

      Example of a mixin configuration:

          apis:
          - name: google.storage.v2.Storage
            mixins:
            - name: google.acl.v1.AccessControl

      The mixin construct implies that all methods in `AccessControl` are
      also declared with same name and request/response types in
      `Storage`. A documentation generator or annotation processor will
      see the effective `Storage.GetAcl` method after inherting
      documentation and annotations as follows:

          service Storage {
            // Get the underlying ACL object.
            rpc GetAcl(GetAclRequest) returns (Acl) {
              option (google.api.http).get = "/v2/{resource=**}:getAcl";
            }
            ...
          }

      Note how the version in the path pattern changed from `v1` to `v2`.

      If the `root` field in the mixin is specified, it should be a
      relative path under which inherited HTTP paths are placed. Example:

          apis:
          - name: google.storage.v2.Storage
            mixins:
            - name: google.acl.v1.AccessControl
              root: acls

      This implies the following inherited HTTP annotation:

          service Storage {
            // Get the underlying ACL object.
            rpc GetAcl(GetAclRequest) returns (Acl) {
              option (google.api.http).get = "/v2/acls/{resource=**}:getAcl";
            }
            ...
          }
    properties:
      name:
        description: The fully qualified name of the API which is included.
        type: string
        required: false
      root:
        description: |-
          If non-empty specifies a path under which inherited HTTP paths
          are rooted.
        type: string
        required: false
  MonitoredResourceDescriptor:
    description: |-
      An object that describes the schema of a MonitoredResource object using a
      type name and a set of labels.  For example, the monitored resource
      descriptor for Google Compute Engine VM instances has a type of
      `"gce_instance"` and specifies the use of the labels `"instance_id"` and
      `"zone"` to identify particular VM instances.

      Different APIs can support different monitored resource types. APIs generally
      provide a `list` method that returns the monitored resource descriptors used
      by the API.
    properties:
      description:
        description: |-
          Optional. A detailed description of the monitored resource type that might
          be used in documentation.
        type: string
        required: false
      displayName:
        description: |-
          Optional. A concise name for the monitored resource type that might be
          displayed in user interfaces. It should be a Title Cased Noun Phrase,
          without any article or other determiners. For example,
          `"Google Cloud SQL Database"`.
        type: string
        required: false
      labels:
        description: |-
          Required. A set of labels used to describe instances of this monitored
          resource type. For example, an individual Google Cloud SQL database is
          identified by values for the labels `"database_id"` and `"zone"`.
        items:
          type: LabelDescriptor
        type: array
        required: false
      name:
        description: |-
          Optional. The resource name of the monitored resource descriptor:
          `"projects/{project_id}/monitoredResourceDescriptors/{type}"` where
          {type} is the value of the `type` field in this object and
          {project_id} is a project ID that provides API-specific context for
          accessing the type.  APIs that do not use project information can use the
          resource name format `"monitoredResourceDescriptors/{type}"`.
        type: string
        required: false
      type:
        description: |-
          Required. The monitored resource type. For example, the type
          `"cloudsql_database"` represents databases in Google Cloud SQL.
          The maximum length of this value is 256 characters.
        type: string
        required: false
  Monitoring:
    description: |-
      Monitoring configuration of the service.

      The example below shows how to configure monitored resources and metrics
      for monitoring. In the example, a monitored resource and two metrics are
      defined. The `library.googleapis.com/book/returned_count` metric is sent
      to both producer and consumer projects, whereas the
      `library.googleapis.com/book/overdue_count` metric is only sent to the
      consumer project.

          monitored_resources:
          - type: library.googleapis.com/branch
            labels:
            - key: /city
              description: The city where the library branch is located in.
            - key: /name
              description: The name of the branch.
          metrics:
          - name: library.googleapis.com/book/returned_count
            metric_kind: DELTA
            value_type: INT64
            labels:
            - key: /customer_id
          - name: library.googleapis.com/book/overdue_count
            metric_kind: GAUGE
            value_type: INT64
            labels:
            - key: /customer_id
          monitoring:
            producer_destinations:
            - monitored_resource: library.googleapis.com/branch
              metrics:
              - library.googleapis.com/book/returned_count
            consumer_destinations:
            - monitored_resource: library.googleapis.com/branch
              metrics:
              - library.googleapis.com/book/returned_count
              - library.googleapis.com/book/overdue_count
    properties:
      consumerDestinations:
        description: |-
          Monitoring configurations for sending metrics to the consumer project.
          There can be multiple consumer destinations, each one must have a
          different monitored resource type. A metric can be used in at most
          one consumer destination.
        items:
          type: MonitoringDestination
        type: array
        required: false
      producerDestinations:
        description: |-
          Monitoring configurations for sending metrics to the producer project.
          There can be multiple producer destinations, each one must have a
          different monitored resource type. A metric can be used in at most
          one producer destination.
        items:
          type: MonitoringDestination
        type: array
        required: false
  MonitoringDestination:
    description: |-
      Configuration of a specific monitoring destination (the producer project
      or the consumer project).
    properties:
      metrics:
        description: |-
          Names of the metrics to report to this monitoring destination.
          Each name must be defined in Service.metrics section.
        items:
          type: string
        type: array
        required: false
      monitoredResource:
        description: |-
          The monitored resource type. The type must be defined in
          Service.monitored_resources section.
        type: string
        required: false
  OAuthRequirements:
    description: |-
      OAuth scopes are a way to define data and permissions on data. For example,
      there are scopes defined for "Read-only access to Google Calendar" and
      "Access to Cloud Platform". Users can consent to a scope for an application,
      giving it permission to access that data on their behalf.

      OAuth scope specifications should be fairly coarse grained; a user will need
      to see and understand the text description of what your scope means.

      In most cases: use one or at most two OAuth scopes for an entire family of
      products. If your product has multiple APIs, you should probably be sharing
      the OAuth scope across all of those APIs.

      When you need finer grained OAuth consent screens: talk with your product
      management about how developers will use them in practice.

      Please note that even though each of the canonical scopes is enough for a
      request to be accepted and passed to the backend, a request can still fail
      due to the backend requiring additional scopes or permissions.
    properties:
      canonicalScopes:
        description: |-
          The list of publicly documented OAuth scopes that are allowed access. An
          OAuth token containing any of these scopes will be accepted.

          Example:

               canonical_scopes: https://www.googleapis.com/auth/calendar,
                                 https://www.googleapis.com/auth/calendar.read
        type: string
        required: false
  Operation:
    description: |-
      This resource represents a long-running operation that is the result of a
      network API call.
    properties:
      done:
        description: |-
          If the value is `false`, it means the operation is still in progress.
          If true, the operation is completed, and either `error` or `response` is
          available.
        type: boolean
        required: false
      error:
        description: The error result of the operation in case of failure or cancellation.
        type: Status
        required: false
      metadata:
        additionalProperties:
          description: Properties of the object. Contains field @type with type URL.
        description: |-
          Service-specific metadata associated with the operation.  It typically
          contains progress information and common metadata such as create time.
          Some services might not provide such metadata.  Any method that returns a
          long-running operation should document the metadata type, if any.
        type: object
        required: false
      name:
        description: |-
          The server-assigned name, which is only unique within the same service that
          originally returns it. If you use the default HTTP mapping, the
          `name` should have the format of `operations/some/unique/name`.
        type: string
        required: false
      response:
        additionalProperties:
          description: Properties of the object. Contains field @type with type URL.
        description: |-
          The normal response of the operation in case of success.  If the original
          method returns no data on success, such as `Delete`, the response is
          `google.protobuf.Empty`.  If the original method is standard
          `Get`/`Create`/`Update`, the response should be the resource.  For other
          methods, the response should have the type `XxxResponse`, where `Xxx`
          is the original method name.  For example, if the original method name
          is `TakeSnapshot()`, the inferred response type is
          `TakeSnapshotResponse`.
        type: object
        required: false
  OperationMetadata:
    description: The metadata associated with a long running operation resource.
    properties:
      progressPercentage:
        description: 'Percentage of completion of this operation, ranging from 0 to 100.'
        format: int32
        type: integer
        required: false
      resourceNames:
        description: |-
          The full name of the resources that this operation is directly
          associated with.
        items:
          type: string
        type: array
        required: false
      startTime:
        description: The start time of the operation.
        format: google-datetime
        type: string
        facets:
          format: string
        required: false
      steps:
        description: Detailed status information for each step. The order is undetermined.
        items:
          type: Step
        type: array
        required: false
  Option:
    description: |-
      A protocol buffer option, which can be attached to a message, field,
      enumeration, etc.
    properties:
      name:
        description: 'The option''s name. For example, `"java_package"`.'
        type: string
        required: false
      value:
        additionalProperties:
          description: Properties of the object. Contains field @type with type URL.
        description: 'The option''s value. For example, `"com.google.protobuf"`.'
        type: object
        required: false
  Page:
    description: |-
      Represents a documentation page. A page can contain subpages to represent
      nested documentation set structure.
    properties:
      content:
        description: |-
          The Markdown content of the page. You can use <code>&#40;== include {path} ==&#41;</code>
          to include content from a Markdown file.
        type: string
        required: false
      name:
        description: |-
          The name of the page. It will be used as an identity of the page to
          generate URI of the page, text of the link to this page in navigation,
          etc. The full page name (start from the root page name to this page
          concatenated with `.`) can be used as reference to the page in your
          documentation. For example:
          <pre><code>pages:
          - name: Tutorial
            content: &#40;== include tutorial.md ==&#41;
            subpages:
            - name: Java
              content: &#40;== include tutorial_java.md ==&#41;
          </code></pre>
          You can reference `Java` page using Markdown reference link syntax:
          `Java`.
        type: string
        required: false
      subpages:
        description: |-
          Subpages of this page. The order of subpages specified here will be
          honored in the generated docset.
        items:
          type: Page
        type: array
        required: false
  Policy:
    description: |-
      Defines an Identity and Access Management (IAM) policy. It is used to
      specify access control policies for Cloud Platform resources.


      A `Policy` consists of a list of `bindings`. A `Binding` binds a list of
      `members` to a `role`, where the members can be user accounts, Google groups,
      Google domains, and service accounts. A `role` is a named list of permissions
      defined by IAM.

      **Example**

          {
            "bindings": [
              {
                "role": "roles/owner",
                "members": [
                  "user:mike@example.com",
                  "group:admins@example.com",
                  "domain:google.com",
                  "serviceAccount:my-other-app@appspot.gserviceaccount.com",
                ]
              },
              {
                "role": "roles/viewer",
                "members": ["user:sean@example.com"]
              }
            ]
          }

      For a description of IAM and its features, see the
      [IAM developer's guide](https://cloud.google.com/iam).
    properties:
      auditConfigs:
        description: |-
          Specifies audit logging configs for "data access".
          "data access": generally refers to data reads/writes and admin reads.
          "admin activity": generally refers to admin writes.

          Note: `AuditConfig` doesn't apply to "admin activity", which always
          enables audit logging.
        items:
          type: AuditConfig
        type: array
        required: false
      bindings:
        description: |-
          Associates a list of `members` to a `role`.
          Multiple `bindings` must not be specified for the same `role`.
          `bindings` with no members will result in an error.
        items:
          type: Binding
        type: array
        required: false
      etag:
        description: |-
          `etag` is used for optimistic concurrency control as a way to help
          prevent simultaneous updates of a policy from overwriting each other.
          It is strongly suggested that systems make use of the `etag` in the
          read-modify-write cycle to perform policy updates in order to avoid race
          conditions: An `etag` is returned in the response to `getIamPolicy`, and
          systems are expected to put that etag in the request to `setIamPolicy` to
          ensure that their change will be applied to the same version of the policy.

          If no `etag` is provided in the call to `setIamPolicy`, then the existing
          policy is overwritten blindly.
        format: byte
        type: string
        facets:
          format: string
        required: false
      iamOwned:
        type: boolean
        required: false
      rules:
        description: |-
          If more than one rule is specified, the rules are applied in the following
          manner:
          - All matching LOG rules are always applied.
          - If any DENY/DENY_WITH_LOG rule matches, permission is denied.
            Logging will be applied if one or more matching rule requires logging.
          - Otherwise, if any ALLOW/ALLOW_WITH_LOG rule matches, permission is
            granted.
            Logging will be applied if one or more matching rule requires logging.
          - Otherwise, if no rule applies, permission is denied.
        items:
          type: Rule
        type: array
        required: false
      version:
        description: Version of the `Policy`. The default version is 0.
        format: int32
        type: integer
        required: false
  Rollout:
    description: |-
      A rollout resource that defines how service configuration versions are pushed
      to control plane systems. Typically, you create a new version of the
      service config, and then create a Rollout to push the service config.
    properties:
      createTime:
        description: Creation time of the rollout. Readonly.
        format: google-datetime
        type: string
        facets:
          format: string
        required: false
      createdBy:
        description: The user who created the Rollout. Readonly.
        type: string
        required: false
      deleteServiceStrategy:
        description: |-
          The strategy associated with a rollout to delete a `ManagedService`.
          Readonly.
        type: DeleteServiceStrategy
        required: false
      rolloutId:
        description: |-
          Optional unique identifier of this Rollout. Only lower case letters, digits
           and '-' are allowed.

          If not specified by client, the server will generate one. The generated id
          will have the form of <date><revision number>, where "date" is the create
          date in ISO 8601 format.  "revision number" is a monotonically increasing
          positive number that is reset every day for each service.
          An example of the generated rollout_id is '2016-02-16r1'
        type: string
        required: false
      serviceName:
        description: The name of the service associated with this Rollout.
        type: string
        required: false
      status:
        description: |-
          The status of this rollout. Readonly. In case of a failed rollout,
          the system will automatically rollback to the current Rollout
          version. Readonly.
        enum:
          - ROLLOUT_STATUS_UNSPECIFIED
          - IN_PROGRESS
          - SUCCESS
          - CANCELLED
          - FAILED
          - PENDING
        type: string
        required: false
      trafficPercentStrategy:
        description: |-
          Google Service Control selects service configurations based on
          traffic percentage.
        type: TrafficPercentStrategy
        required: false
  Rule:
    description: A rule to be applied in a Policy.
    properties:
      action:
        description: Required
        enum:
          - NO_ACTION
          - ALLOW
          - ALLOW_WITH_LOG
          - DENY
          - DENY_WITH_LOG
          - LOG
        type: string
        required: false
      conditions:
        description: Additional restrictions that must be met
        items:
          type: Condition
        type: array
        required: false
      description:
        description: Human-readable description of the rule.
        type: string
        required: false
      in:
        description: |-
          If one or more 'in' clauses are specified, the rule matches if
          the PRINCIPAL/AUTHORITY_SELECTOR is in at least one of these entries.
        items:
          type: string
        type: array
        required: false
      logConfig:
        description: |-
          The config returned to callers of tech.iam.IAM.CheckPolicy for any entries
          that match the LOG action.
        items:
          type: LogConfig
        type: array
        required: false
      notIn:
        description: |-
          If one or more 'not_in' clauses are specified, the rule matches
          if the PRINCIPAL/AUTHORITY_SELECTOR is in none of the entries.
          The format for in and not_in entries is the same as for members in a
          Binding (see google/iam/v1/policy.proto).
        items:
          type: string
        type: array
        required: false
      permissions:
        description: |-
          A permission is a string of form '<service>.<resource type>.<verb>'
          (e.g., 'storage.buckets.list'). A value of '*' matches all permissions,
          and a verb part of '*' (e.g., 'storage.buckets.*') matches all verbs.
        items:
          type: string
        type: array
        required: false
  Service:
    description: |-
      `Service` is the root object of Google service configuration schema. It
      describes basic information about a service, such as the name and the
      title, and delegates other aspects to sub-sections. Each sub-section is
      either a proto message or a repeated proto message that configures a
      specific aspect, such as auth. See each proto message definition for details.

      Example:

          type: google.api.Service
          config_version: 3
          name: calendar.googleapis.com
          title: Google Calendar API
          apis:
          - name: google.calendar.v3.Calendar
          backend:
            rules:
            - selector: "google.calendar.v3.*"
              address: calendar.example.com
    properties:
      apis:
        description: |-
          A list of API interfaces exported by this service. Only the `name` field
          of the google.protobuf.Api needs to be provided by the configuration
          author, as the remaining fields will be derived from the IDL during the
          normalization process. It is an error to specify an API interface here
          which cannot be resolved against the associated IDL files.
        items:
          type: Api
        type: array
        required: false
      authentication:
        description: Auth configuration.
        type: Authentication
        required: false
      backend:
        description: API backend configuration.
        type: Backend
        required: false
      configVersion:
        description: |-
          The version of the service configuration. The config version may
          influence interpretation of the configuration, for example, to
          determine defaults. This is documented together with applicable
          options. The current default for the config version itself is `3`.
        type: integer
        required: false
      context:
        description: Context configuration.
        type: Context
        required: false
      control:
        description: Configuration for the service control plane.
        type: Control
        required: false
      customError:
        description: Custom error configuration.
        type: CustomError
        required: false
      documentation:
        description: Additional API documentation.
        type: Documentation
        required: false
      endpoints:
        description: |-
          Configuration for network endpoints.  If this is empty, then an endpoint
          with the same name as the service is automatically generated to service all
          defined APIs.
        items:
          type: Endpoint
        type: array
        required: false
      enums:
        description: |-
          A list of all enum types included in this API service.  Enums
          referenced directly or indirectly by the `apis` are automatically
          included.  Enums which are not referenced but shall be included
          should be listed here by name. Example:

              enums:
              - name: google.someapi.v1.SomeEnum
        items:
          type: Enum
        type: array
        required: false
      http:
        description: HTTP configuration.
        type: Http
        required: false
      id:
        description: |-
          A unique ID for a specific instance of this message, typically assigned
          by the client for tracking purpose. If empty, the server may choose to
          generate one instead.
        type: string
        required: false
      logging:
        description: Logging configuration.
        type: Logging
        required: false
      logs:
        description: Defines the logs used by this service.
        items:
          type: LogDescriptor
        type: array
        required: false
      metrics:
        description: Defines the metrics used by this service.
        items:
          type: MetricDescriptor
        type: array
        required: false
      monitoredResources:
        description: |-
          Defines the monitored resources used by this service. This is required
          by the Service.monitoring and Service.logging configurations.
        items:
          type: MonitoredResourceDescriptor
        type: array
        required: false
      monitoring:
        description: Monitoring configuration.
        type: Monitoring
        required: false
      name:
        description: |-
          The DNS address at which this service is available,
          e.g. `calendar.googleapis.com`.
        type: string
        required: false
      producerProjectId:
        description: |-
          The id of the Google developer project that owns the service.
          Members of this project can manage the service configuration,
          manage consumption of the service, etc.
        type: string
        required: false
      systemParameters:
        description: System parameter configuration.
        type: SystemParameters
        required: false
      systemTypes:
        description: |-
          A list of all proto message types included in this API service.
          It serves similar purpose as [google.api.Service.types], except that
          these types are not needed by user-defined APIs. Therefore, they will not
          show up in the generated discovery doc. This field should only be used
          to define system APIs in ESF.
        items:
          type: Type
        type: array
        required: false
      title:
        description: The product title associated with this service.
        type: string
        required: false
      types:
        description: |-
          A list of all proto message types included in this API service.
          Types referenced directly or indirectly by the `apis` are
          automatically included.  Messages which are not referenced but
          shall be included, such as types used by the `google.protobuf.Any` type,
          should be listed here by name. Example:

              types:
              - name: google.protobuf.Int32
        items:
          type: Type
        type: array
        required: false
      usage:
        description: Configuration controlling usage of this service.
        type: Usage
        required: false
      visibility:
        description: API visibility configuration.
        type: Visibility
        required: false
  SetIamPolicyRequest:
    description: Request message for `SetIamPolicy` method.
    properties:
      policy:
        description: |-
          REQUIRED: The complete policy to be applied to the `resource`. The size of
          the policy is limited to a few 10s of KB. An empty policy is a
          valid policy but certain Cloud Platform services (such as Projects)
          might reject them.
        type: Policy
        required: false
  SourceContext:
    description: |-
      `SourceContext` represents information about the source of a
      protobuf element, like the file in which it is defined.
    properties:
      fileName:
        description: |-
          The path-qualified name of the .proto file that contained the associated
          protobuf element.  For example: `"google/protobuf/source_context.proto"`.
        type: string
        required: false
  Status:
    description: |-
      The `Status` type defines a logical error model that is suitable for different
      programming environments, including REST APIs and RPC APIs. It is used by
      [gRPC](https://github.com/grpc). The error model is designed to be:

      - Simple to use and understand for most users
      - Flexible enough to meet unexpected needs

      # Overview

      The `Status` message contains three pieces of data: error code, error message,
      and error details. The error code should be an enum value of
      google.rpc.Code, but it may accept additional error codes if needed.  The
      error message should be a developer-facing English message that helps
      developers *understand* and *resolve* the error. If a localized user-facing
      error message is needed, put the localized message in the error details or
      localize it in the client. The optional error details may contain arbitrary
      information about the error. There is a predefined set of error detail types
      in the package `google.rpc` which can be used for common error conditions.

      # Language mapping

      The `Status` message is the logical representation of the error model, but it
      is not necessarily the actual wire format. When the `Status` message is
      exposed in different client libraries and different wire protocols, it can be
      mapped differently. For example, it will likely be mapped to some exceptions
      in Java, but more likely mapped to some error codes in C.

      # Other uses

      The error model and the `Status` message can be used in a variety of
      environments, either with or without APIs, to provide a
      consistent developer experience across different environments.

      Example uses of this error model include:

      - Partial errors. If a service needs to return partial errors to the client,
          it may embed the `Status` in the normal response to indicate the partial
          errors.

      - Workflow errors. A typical workflow has multiple steps. Each step may
          have a `Status` message for error reporting purpose.

      - Batch operations. If a client uses batch request and batch response, the
          `Status` message should be used directly inside batch response, one for
          each error sub-response.

      - Asynchronous operations. If an API call embeds asynchronous operation
          results in its response, the status of those operations should be
          represented directly using the `Status` message.

      - Logging. If some API errors are stored in logs, the message `Status` could
          be used directly after any stripping needed for security/privacy reasons.
    properties:
      code:
        description: 'The status code, which should be an enum value of google.rpc.Code.'
        format: int32
        type: integer
        required: false
      details:
        description: |-
          A list of messages that carry the error details.  There will be a
          common set of message types for APIs to use.
        items:
          additionalProperties:
            description: Properties of the object. Contains field @type with type URL.
          type: object
        type: array
        required: false
      message:
        description: |-
          A developer-facing error message, which should be in English. Any
          user-facing error message should be localized and sent in the
          google.rpc.Status.details field, or localized by the client.
        type: string
        required: false
  Step:
    description: Represents the status of one operation step.
    properties:
      description:
        description: The short description of the step.
        type: string
        required: false
      status:
        description: The status code.
        enum:
          - STATUS_UNSPECIFIED
          - DONE
          - NOT_STARTED
          - IN_PROGRESS
          - FAILED
          - CANCELLED
        type: string
        required: false
  SubmitConfigSourceRequest:
    description: Request message for SubmitConfigSource method.
    properties:
      configSource:
        description: The source configuration for the service.
        type: ConfigSource
        required: false
      validateOnly:
        description: |-
          Optional. If set, this will result in the generation of a
          `google.api.Service` configuration based on the `ConfigSource` provided,
          but the generated config and the sources will NOT be persisted.
        type: boolean
        required: false
  SubmitConfigSourceResponse:
    description: Response message for SubmitConfigSource method.
    properties:
      serviceConfig:
        description: The generated service configuration.
        type: Service
        required: false
  SystemParameter:
    description: |-
      Define a parameter's name and location. The parameter may be passed as either
      an HTTP header or a URL query parameter, and if both are passed the behavior
      is implementation-dependent.
    properties:
      httpHeader:
        description: |-
          Define the HTTP header name to use for the parameter. It is case
          insensitive.
        type: string
        required: false
      name:
        description: |-
          Define the name of the parameter, such as "api_key", "alt", "callback",
          and etc. It is case sensitive.
        type: string
        required: false
      urlQueryParameter:
        description: |-
          Define the URL query parameter name to use for the parameter. It is case
          sensitive.
        type: string
        required: false
  SystemParameterRule:
    description: |-
      Define a system parameter rule mapping system parameter definitions to
      methods.
    properties:
      parameters:
        description: |-
          Define parameters. Multiple names may be defined for a parameter.
          For a given method call, only one of them should be used. If multiple
          names are used the behavior is implementation-dependent.
          If none of the specified names are present the behavior is
          parameter-dependent.
        items:
          type: SystemParameter
        type: array
        required: false
      selector:
        description: |-
          Selects the methods to which this rule applies. Use '*' to indicate all
          methods in all APIs.

          Refer to selector for syntax details.
        type: string
        required: false
  SystemParameters:
    description: |-
      ### System parameter configuration

      A system parameter is a special kind of parameter defined by the API
      system, not by an individual API. It is typically mapped to an HTTP header
      and/or a URL query parameter. This configuration specifies which methods
      change the names of the system parameters.
    properties:
      rules:
        description: |-
          Define system parameters.

          The parameters defined here will override the default parameters
          implemented by the system. If this field is missing from the service
          config, default system parameters will be used. Default system parameters
          and names is implementation-dependent.

          Example: define api key and alt name for all methods

          system_parameters
            rules:
              - selector: "*"
                parameters:
                  - name: api_key
                    url_query_parameter: api_key
                  - name: alt
                    http_header: Response-Content-Type

          Example: define 2 api key names for a specific method.

          system_parameters
            rules:
              - selector: "/ListShelves"
                parameters:
                  - name: api_key
                    http_header: Api-Key1
                  - name: api_key
                    http_header: Api-Key2

          **NOTE:** All service configuration rules follow "last one wins" order.
        items:
          type: SystemParameterRule
        type: array
        required: false
  TestIamPermissionsRequest:
    description: Request message for `TestIamPermissions` method.
    properties:
      permissions:
        description: |-
          The set of permissions to check for the `resource`. Permissions with
          wildcards (such as '*' or 'storage.*') are not allowed. For more
          information see
          [IAM Overview](https://cloud.google.com/iam/docs/overview#permissions).
        items:
          type: string
        type: array
        required: false
  TestIamPermissionsResponse:
    description: Response message for `TestIamPermissions` method.
    properties:
      permissions:
        description: |-
          A subset of `TestPermissionsRequest.permissions` that the caller is
          allowed.
        items:
          type: string
        type: array
        required: false
  TrafficPercentStrategy:
    description: |-
      Strategy that specifies how Google Service Control should select
      different
      versions of service configurations based on traffic percentage.

      One example of how to gradually rollout a new service configuration using
      this
      strategy:
      Day 1

          Rollout {
            id: "example.googleapis.com/rollout_20160206"
            traffic_percent_strategy {
              percentages: {
                "example.googleapis.com/20160201": 70.00
                "example.googleapis.com/20160206": 30.00
              }
            }
          }

      Day 2

          Rollout {
            id: "example.googleapis.com/rollout_20160207"
            traffic_percent_strategy: {
              percentages: {
                "example.googleapis.com/20160206": 100.00
              }
            }
          }
    properties:
      percentages:
        additionalProperties:
          format: double
          type: number
        description: |-
          Maps service configuration IDs to their corresponding traffic percentage.
          Key is the service configuration ID, Value is the traffic percentage
          which must be greater than 0.0 and the sum must equal to 100.0.
        type: object
        required: false
  Type:
    description: A protocol buffer message type.
    properties:
      fields:
        description: The list of fields.
        items:
          type: Field
        type: array
        required: false
      name:
        description: The fully qualified message name.
        type: string
        required: false
      oneofs:
        description: The list of types appearing in `oneof` definitions in this type.
        items:
          type: string
        type: array
        required: false
      options:
        description: The protocol buffer options.
        items:
          type: Option
        type: array
        required: false
      sourceContext:
        description: The source context.
        type: SourceContext
        required: false
      syntax:
        description: The source syntax.
        enum:
          - SYNTAX_PROTO2
          - SYNTAX_PROTO3
        type: string
        required: false
  UndeleteServiceResponse:
    description: Response message for UndeleteService method.
    properties:
      service:
        description: Revived service resource.
        type: ManagedService
        required: false
  Usage:
    description: Configuration controlling usage of a service.
    properties:
      requirements:
        description: |-
          Requirements that must be satisfied before a consumer project can use the
          service. Each requirement is of the form <service.name>/<requirement-id>;
          for example 'serviceusage.googleapis.com/billing-enabled'.
        items:
          type: string
        type: array
        required: false
      rules:
        description: |-
          A list of usage rules that apply to individual API methods.

          **NOTE:** All service configuration rules follow "last one wins" order.
        items:
          type: UsageRule
        type: array
        required: false
  UsageRule:
    description: |-
      Usage configuration rules for the service.

      NOTE: Under development.


      Use this rule to configure unregistered calls for the service. Unregistered
      calls are calls that do not contain consumer project identity.
      (Example: calls that do not contain an API key).
      By default, API methods do not allow unregistered calls, and each method call
      must be identified by a consumer project identity. Use this rule to
      allow/disallow unregistered calls.

      Example of an API that wants to allow unregistered calls for entire service.

          usage:
            rules:
            - selector: "*"
              allow_unregistered_calls: true

      Example of a method that wants to allow unregistered calls.

          usage:
            rules:
            - selector: "google.example.library.v1.LibraryService.CreateBook"
              allow_unregistered_calls: true
    properties:
      allowUnregisteredCalls:
        description: 'True, if the method allows unregistered calls; false otherwise.'
        type: boolean
        required: false
      selector:
        description: |-
          Selects the methods to which this rule applies. Use '*' to indicate all
          methods in all APIs.

          Refer to selector for syntax details.
        type: string
        required: false
  Visibility:
    description: |-
      `Visibility` defines restrictions for the visibility of service
      elements.  Restrictions are specified using visibility labels
      (e.g., TRUSTED_TESTER) that are elsewhere linked to users and projects.

      Users and projects can have access to more than one visibility label. The
      effective visibility for multiple labels is the union of each label's
      elements, plus any unrestricted elements.

      If an element and its parents have no restrictions, visibility is
      unconditionally granted.

      Example:

          visibility:
            rules:
            - selector: google.calendar.Calendar.EnhancedSearch
              restriction: TRUSTED_TESTER
            - selector: google.calendar.Calendar.Delegate
              restriction: GOOGLE_INTERNAL

      Here, all methods are publicly visible except for the restricted methods
      EnhancedSearch and Delegate.
    properties:
      rules:
        description: |-
          A list of visibility rules that apply to individual API elements.

          **NOTE:** All service configuration rules follow "last one wins" order.
        items:
          type: VisibilityRule
        type: array
        required: false
  VisibilityRule:
    description: |-
      A visibility rule provides visibility configuration for an individual API
      element.
    properties:
      restriction:
        description: |-
          A comma-separated list of visibility labels that apply to the `selector`.
          Any of the listed labels can be used to grant the visibility.

          If a rule has multiple labels, removing one of the labels but not all of
          them can break clients.

          Example:

              visibility:
                rules:
                - selector: google.calendar.Calendar.EnhancedSearch
                  restriction: GOOGLE_INTERNAL, TRUSTED_TESTER

          Removing GOOGLE_INTERNAL from this restriction will break clients that
          rely on this method and only had access to it through GOOGLE_INTERNAL.
        type: string
        required: false
      selector:
        description: |-
          Selects methods, messages, fields, enums, etc. to which this rule applies.

          Refer to selector for syntax details.
        type: string
        required: false
traits:
  xgafv:
    queryParameters:
      $.xgafv:
        type: string
        description: V1 error format.
        enum:
          - '1'
          - '2'
  accessToken:
    queryParameters:
      access_token:
        type: string
        description: OAuth access token.
  alt:
    queryParameters:
      alt:
        type: string
        description: Data format for response.
        default: json
        enum:
          - json
          - media
          - proto
  bearerToken:
    queryParameters:
      bearer_token:
        type: string
        description: OAuth bearer token.
  callback:
    queryParameters:
      callback:
        type: string
        description: JSONP
  fields:
    queryParameters:
      fields:
        type: string
        description: Selector specifying which fields to include in a partial response.
  key:
    queryParameters:
      key:
        type: string
        description: 'API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.'
  oauthToken:
    queryParameters:
      oauth_token:
        type: string
        description: OAuth 2.0 token for the current user.
  pp:
    queryParameters:
      pp:
        type: boolean
        description: Pretty-print response.
        default: true
  prettyPrint:
    queryParameters:
      prettyPrint:
        type: boolean
        description: Returns response with indentations and line breaks.
        default: true
  quotaUser:
    queryParameters:
      quotaUser:
        type: string
        description: 'Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.'
  uploadType:
    queryParameters:
      uploadType:
        type: string
        description: 'Legacy upload protocol for media (e.g. "media", "multipart").'
  uploadProtocol:
    queryParameters:
      upload_protocol:
        type: string
        description: 'Upload protocol for media (e.g. "raw", "multipart").'
