#%RAML 1.0
title: Firebase Rules
version: v1
baseUri: 'https://firebaserules.googleapis.com/'
protocols:
  - HTTPS
description: |
  Creates and manages rules that determine when a Firebase Rules-enabled service should permit a request.
(oas-tags-definition):
  - name: projects
annotationTypes:
  oas-tags-definition:
    type: array
    items:
      properties:
        name: string
        description?: string
        externalDocs?:
          properties:
            url: string
            description?: string
    allowedTargets: API
  oas-x-apiClientRegistration: any
  oas-x-logo: any
  oas-x-origin: any
  oas-x-preferred: any
  oas-x-providerName: any
  oas-x-serviceName: any
  oas-tags:
    type: 'string[]'
    allowedTargets: Method
  oas-externalDocs:
    properties:
      description?: string
      url: string
    allowedTargets:
      - API
      - Method
      - TypeDeclaration
  oas-info:
    properties:
      termsOfService?: string
      contact?:
        properties:
          name?: string
          url?: string
          email?: string
      license?:
        properties:
          name?: string
          url?: string
    allowedTargets: API
  oas-body-name:
    type: string
    allowedTargets: TypeDeclaration
(oas-info):
  (oas-x-apiClientRegistration):
    url: 'https://console.developers.google.com'
  (oas-x-logo):
    url: 'https://api.apis.guru/v2/cache/logo/https_www.google.com_images_branding_googlelogo_2x_googlelogo_color_272x92dp.png'
  (oas-x-origin):
    format: google
    url: 'https://firebaserules.googleapis.com/$discovery/rest?version=v1'
    version: v1
  (oas-x-preferred): true
  (oas-x-providerName): googleapis.com
  (oas-x-serviceName): firebaserules
  contact:
    name: Google
    url: 'https://google.com'
(oas-externalDocs):
  url: 'https://firebase.google.com/docs/storage/security'
securitySchemes:
  Oauth2:
    type: OAuth 2.0
    settings:
      authorizationUri: 'https://accounts.google.com/o/oauth2/auth'
      accessTokenUri: ''
      authorizationGrants:
        - implicit
      scopes:
        - 'https://www.googleapis.com/auth/cloud-platform'
        - 'https://www.googleapis.com/auth/firebase'
        - 'https://www.googleapis.com/auth/firebase.readonly'
    description: Oauth 2.0 authentication
/v1:
  displayName: v1
  '/{name}:test':
    displayName: '{name}:test'
    uriParameters:
      name:
        description: |-
          Name of the project.

          Format: `projects/{project_id}`
        required: true
        type: string
    post:
      displayName: firebaserules.projects.test
      description: |-
        Test `Source` for syntactic and semantic correctness. Issues present in the
        rules, if any, will be returned to the caller with a description, severity,
        and source location.

        The test method will typically be executed with a developer provided
        `Source`, but if regression testing is desired, this method may be
        executed against a `Ruleset` resource name and the `Source` will be
        retrieved from the persisted `Ruleset`.

        The following is an example of `Source` that permits users to upload images
        to a bucket bearing their user id and matching the correct metadata:

        _*Example*_

            // Users are allowed to subscribe and unsubscribe to the blog.
            service firebase.storage {
              match /users/{userId}/images/{imageName} {
                  allow write: if userId == request.userId
                      && (imageName.endsWith('.png') || imageName.endsWith('.jpg'))
                      && resource.mimeType.startsWith('image/')
              }
            }
      body:
        application/json:
          type: TestRulesetRequest
          (oas-body-name): body
      responses:
        '200':
          body:
            application/json:
              type: TestRulesetResponse
          description: Successful response
      securedBy:
        - Oauth2:
            scopes:
              - 'https://www.googleapis.com/auth/firebase.readonly'
      (oas-tags):
        - projects
    is:
      - accessToken
      - prettyPrint
      - key
      - quotaUser
      - pp
      - fields
      - alt
      - xgafv
      - callback
      - oauthToken
      - uploadType
      - bearerToken
      - uploadProtocol
  '/{name}':
    displayName: '{name}'
    /rulesets:
      displayName: rulesets
      post:
        displayName: firebaserules.projects.rulesets.create
        description: |-
          Create a `Ruleset` from `Source`.

          The `Ruleset` is given a unique generated name which is returned to the
          caller. `Source` containing syntactic or semantics errors will result in an
          error response indicating the first error encountered. For a detailed view
          of `Source` issues, use TestRuleset.
        body:
          application/json:
            type: Ruleset
            (oas-body-name): body
        responses:
          '200':
            body:
              application/json:
                type: Ruleset
            description: Successful response
        securedBy:
          - Oauth2:
              scopes:
                - 'https://www.googleapis.com/auth/firebase'
        (oas-tags):
          - projects
      is:
        - accessToken
        - prettyPrint
        - key
        - quotaUser
        - pp
        - fields
        - alt
        - xgafv
        - callback
        - oauthToken
        - uploadType
        - bearerToken
        - uploadProtocol
      get:
        displayName: firebaserules.projects.rulesets.list
        description: |-
          List `Ruleset` metadata only and optionally filter the results by Ruleset
          name.

          The full `Source` contents of a `Ruleset` may be retrieved with
          GetRuleset.
        responses:
          '200':
            body:
              application/json:
                type: ListRulesetsResponse
            description: Successful response
        queryParameters:
          pageSize:
            description: |-
              Page size to load. Maximum of 100. Defaults to 10.
              Note: `page_size` is just a hint and the service may choose to load less
              than `page_size` due to the size of the output. To traverse all of the
              releases, caller should iterate until the `page_token` is empty.
            type: integer
          pageToken:
            description: Next page token for loading the next batch of `Ruleset` instances.
            type: string
        securedBy:
          - Oauth2:
              scopes:
                - 'https://www.googleapis.com/auth/firebase.readonly'
        (oas-tags):
          - projects
    /releases:
      displayName: releases
      post:
        displayName: firebaserules.projects.releases.create
        description: |-
          Create a `Release`.

          Release names should reflect the developer's deployment practices. For
          example, the release name may include the environment name, application
          name, application version, or any other name meaningful to the developer.
          Once a `Release` refers to a `Ruleset`, the rules can be enforced by
          Firebase Rules-enabled services.

          More than one `Release` may be 'live' concurrently. Consider the following
          three `Release` names for `projects/foo` and the `Ruleset` to which they
          refer.

          Release Name                    | Ruleset Name
          --------------------------------|-------------
          projects/foo/releases/prod      | projects/foo/rulesets/uuid123
          projects/foo/releases/prod/beta | projects/foo/rulesets/uuid123
          projects/foo/releases/prod/v23  | projects/foo/rulesets/uuid456

          The table reflects the `Ruleset` rollout in progress. The `prod` and
          `prod/beta` releases refer to the same `Ruleset`. However, `prod/v23`
          refers to a new `Ruleset`. The `Ruleset` reference for a `Release` may be
          updated using the UpdateRelease method, and the custom `Release` name
          may be referenced by specifying the `X-Firebase-Rules-Release-Name` header.
        body:
          application/json:
            type: Release
            (oas-body-name): body
        responses:
          '200':
            body:
              application/json:
                type: Release
            description: Successful response
        securedBy:
          - Oauth2:
              scopes:
                - 'https://www.googleapis.com/auth/firebase'
        (oas-tags):
          - projects
      is:
        - accessToken
        - prettyPrint
        - key
        - quotaUser
        - pp
        - fields
        - alt
        - xgafv
        - callback
        - oauthToken
        - uploadType
        - bearerToken
        - uploadProtocol
      get:
        displayName: firebaserules.projects.releases.list
        description: |-
          List the `Release` values for a project. This list may optionally be
          filtered by `Release` name or `Ruleset` id or both.
        responses:
          '200':
            body:
              application/json:
                type: ListReleasesResponse
            description: Successful response
        queryParameters:
          pageSize:
            description: |-
              Page size to load. Maximum of 100. Defaults to 10.
              Note: `page_size` is just a hint and the service may choose to load less
              than `page_size` due to the size of the output. To traverse all of the
              releases, caller should iterate until the `page_token` is empty.
            type: integer
          filter:
            description: |-
              `Release` filter. The list method supports filters with restrictions on the
              `Release` `name` and also on the `Ruleset` `ruleset_name`.

              Example 1) A filter of 'name=prod*' might return `Release`s with names
              within 'projects/foo' prefixed with 'prod':

              Name                          | Ruleset Name
              ------------------------------|-------------
              projects/foo/releases/prod    | projects/foo/rulesets/uuid1234
              projects/foo/releases/prod/v1 | projects/foo/rulesets/uuid1234
              projects/foo/releases/prod/v2 | projects/foo/rulesets/uuid8888

              Example 2) A filter of `name=prod* ruleset_name=uuid1234` would return only
              `Release` instances for 'projects/foo' with names prefixed with 'prod'
              referring to the same `Ruleset` name of 'uuid1234':

              Name                          | Ruleset Name
              ------------------------------|-------------
              projects/foo/releases/prod    | projects/foo/rulesets/1234
              projects/foo/releases/prod/v1 | projects/foo/rulesets/1234

              In the examples, the filter parameters refer to the search filters for
              release and ruleset names are relative to the project releases and rulesets
              collections. Fully qualified prefixed may also be used. e.g.
              `name=projects/foo/releases/prod* ruleset_name=projects/foo/rulesets/uuid1`
            type: string
          pageToken:
            description: Next page token for the next batch of `Release` instances.
            type: string
        securedBy:
          - Oauth2:
              scopes:
                - 'https://www.googleapis.com/auth/firebase.readonly'
        (oas-tags):
          - projects
    uriParameters:
      name:
        description: |-
          Resource name for the `Release` to delete.

          Format: `projects/{project_id}/releases/{release_id}`
        required: true
        type: string
    put:
      displayName: firebaserules.projects.releases.update
      description: |-
        Update a `Release`.

        Only updates to the `ruleset_name` field will be honored. `Release` rename
        is not supported. To create a `Release` use the CreateRelease method
        instead.
      body:
        application/json:
          type: Release
          (oas-body-name): body
      responses:
        '200':
          body:
            application/json:
              type: Release
          description: Successful response
      securedBy:
        - Oauth2:
            scopes:
              - 'https://www.googleapis.com/auth/firebase'
      (oas-tags):
        - projects
    is:
      - accessToken
      - prettyPrint
      - key
      - quotaUser
      - pp
      - fields
      - alt
      - xgafv
      - callback
      - oauthToken
      - uploadType
      - bearerToken
      - uploadProtocol
    get:
      displayName: firebaserules.projects.releases.get
      description: Get a `Release` by name.
      responses:
        '200':
          body:
            application/json:
              type: Release
          description: Successful response
      securedBy:
        - Oauth2:
            scopes:
              - 'https://www.googleapis.com/auth/firebase.readonly'
      (oas-tags):
        - projects
    delete:
      displayName: firebaserules.projects.releases.delete
      description: Delete a `Release` by resource name.
      responses:
        '200':
          body:
            application/json:
              type: Empty
          description: Successful response
      securedBy:
        - Oauth2:
            scopes:
              - 'https://www.googleapis.com/auth/firebase'
      (oas-tags):
        - projects
types:
  Empty:
    description: |-
      A generic empty message that you can re-use to avoid defining duplicated
      empty messages in your APIs. A typical example is to use it as the request
      or the response type of an API method. For instance:

          service Foo {
            rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty);
          }

      The JSON representation for `Empty` is empty JSON object `{}`.
    properties: {}
  File:
    description: '`File` containing source content.'
    properties:
      content:
        description: Textual Content.
        type: string
        required: false
      fingerprint:
        description: Fingerprint (e.g. github sha) associated with the `File`.
        format: byte
        type: string
        facets:
          format: string
        required: false
      name:
        description: File name.
        type: string
        required: false
  Issue:
    description: 'Issues include warnings, errors, and deprecation notices.'
    properties:
      description:
        description: Short error description.
        type: string
        required: false
      severity:
        description: The severity of the issue.
        enum:
          - SEVERITY_UNSPECIFIED
          - DEPRECATION
          - WARNING
          - ERROR
        type: string
        required: false
      sourcePosition:
        description: Position of the issue in the `Source`.
        type: SourcePosition
        required: false
  ListReleasesResponse:
    description: The response for FirebaseRulesService.ListReleases.
    properties:
      nextPageToken:
        description: |-
          The pagination token to retrieve the next page of results. If the value is
          empty, no further results remain.
        type: string
        required: false
      releases:
        description: List of `Release` instances.
        items:
          type: Release
        type: array
        required: false
  ListRulesetsResponse:
    description: The response for FirebaseRulesService.ListRulesets
    properties:
      nextPageToken:
        description: |-
          The pagination token to retrieve the next page of results. If the value is
          empty, no further results remain.
        type: string
        required: false
      rulesets:
        description: List of `Ruleset` instances.
        items:
          type: Ruleset
        type: array
        required: false
  Release:
    description: |-
      `Release` is a named reference to a `Ruleset`. Once a `Release` refers to a
      `Ruleset`, rules-enabled services will be able to enforce the `Ruleset`.
    properties:
      createTime:
        description: |-
          Time the release was created.
          @OutputOnly
        format: google-datetime
        type: string
        facets:
          format: string
        required: false
      name:
        description: |-
          Resource name for the `Release`.

          `Release` names may be structured `app1/prod/v2` or flat `app1_prod_v2`
          which affords developers a great deal of flexibility in mapping the name
          to the style that best fits their existing development practices. For
          example, a name could refer to an environment, an app, a version, or some
          combination of three.

          In the table below, for the project name `projects/foo`, the following
          relative release paths show how flat and structured names might be chosen
          to match a desired development / deployment strategy.

          Use Case     | Flat Name           | Structured Name
          -------------|---------------------|----------------
          Environments | releases/qa         | releases/qa
          Apps         | releases/app1_qa    | releases/app1/qa
          Versions     | releases/app1_v2_qa | releases/app1/v2/qa

          The delimiter between the release name path elements can be almost anything
          and it should work equally well with the release name list filter, but in
          many ways the structured paths provide a clearer picture of the
          relationship between `Release` instances.

          Format: `projects/{project_id}/releases/{release_id}`
        type: string
        required: false
      rulesetName:
        description: |-
          Name of the `Ruleset` referred to by this `Release`. The `Ruleset` must
          exist the `Release` to be created.
        type: string
        required: false
      updateTime:
        description: |-
          Time the release was updated.
          @OutputOnly
        format: google-datetime
        type: string
        facets:
          format: string
        required: false
  Ruleset:
    description: |-
      `Ruleset` is an immutable copy of `Source` with a globally unique identifier
      and a creation time.
    properties:
      createTime:
        description: |-
          Time the `Ruleset` was created.
          @OutputOnly
        format: google-datetime
        type: string
        facets:
          format: string
        required: false
      name:
        description: |-
          Name of the `Ruleset`. The ruleset_id is auto generated by the service.
          Format: `projects/{project_id}/rulesets/{ruleset_id}`
          @OutputOnly
        type: string
        required: false
      source:
        description: '`Source` for the `Ruleset`.'
        type: Source
        required: false
  Source:
    description: '`Source` is one or more `File` messages comprising a logical set of rules.'
    properties:
      files:
        description: '`File` set constituting the `Source` bundle.'
        items:
          type: File
        type: array
        required: false
  SourcePosition:
    description: |-
      Position in the `Source` content including its line, column number, and an
      index of the `File` in the `Source` message. Used for debug purposes.
    properties:
      column:
        description: First column on the source line associated with the source fragment.
        format: int32
        type: integer
        required: false
      fileName:
        description: Name of the `File`.
        type: string
        required: false
      line:
        description: Line number of the source fragment. 1-based.
        format: int32
        type: integer
        required: false
  TestRulesetRequest:
    description: The request for FirebaseRulesService.TestRuleset.
    properties:
      source:
        description: '`Source` to be checked for correctness.'
        type: Source
        required: false
  TestRulesetResponse:
    description: The response for FirebaseRulesService.TestRuleset.
    properties:
      issues:
        description: |-
          Syntactic and semantic `Source` issues of varying severity. Issues of
          `ERROR` severity will prevent tests from executing.
        items:
          type: Issue
        type: array
        required: false
traits:
  xgafv:
    queryParameters:
      $.xgafv:
        type: string
        description: V1 error format.
        enum:
          - '1'
          - '2'
  accessToken:
    queryParameters:
      access_token:
        type: string
        description: OAuth access token.
  alt:
    queryParameters:
      alt:
        type: string
        description: Data format for response.
        default: json
        enum:
          - json
          - media
          - proto
  bearerToken:
    queryParameters:
      bearer_token:
        type: string
        description: OAuth bearer token.
  callback:
    queryParameters:
      callback:
        type: string
        description: JSONP
  fields:
    queryParameters:
      fields:
        type: string
        description: Selector specifying which fields to include in a partial response.
  key:
    queryParameters:
      key:
        type: string
        description: 'API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.'
  oauthToken:
    queryParameters:
      oauth_token:
        type: string
        description: OAuth 2.0 token for the current user.
  pp:
    queryParameters:
      pp:
        type: boolean
        description: Pretty-print response.
        default: true
  prettyPrint:
    queryParameters:
      prettyPrint:
        type: boolean
        description: Returns response with indentations and line breaks.
        default: true
  quotaUser:
    queryParameters:
      quotaUser:
        type: string
        description: 'Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.'
  uploadType:
    queryParameters:
      uploadType:
        type: string
        description: 'Legacy upload protocol for media (e.g. "media", "multipart").'
  uploadProtocol:
    queryParameters:
      upload_protocol:
        type: string
        description: 'Upload protocol for media (e.g. "raw", "multipart").'
