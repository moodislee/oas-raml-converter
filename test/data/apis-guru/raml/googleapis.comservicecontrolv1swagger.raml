#%RAML 1.0
title: Google Service Control
version: v1
baseUri: 'https://servicecontrol.googleapis.com/'
protocols:
  - HTTPS
description: 'Google Service Control provides control plane functionality to managed services, such as logging, monitoring, and status checks.'
(oas-tags-definition):
  - name: services
annotationTypes:
  oas-tags-definition:
    type: array
    items:
      properties:
        name: string
        description?: string
        externalDocs?:
          properties:
            url: string
            description?: string
    allowedTargets: API
  oas-x-apiClientRegistration: any
  oas-x-logo: any
  oas-x-origin: any
  oas-x-preferred: any
  oas-x-providerName: any
  oas-x-serviceName: any
  oas-tags:
    type: 'string[]'
    allowedTargets: Method
  oas-externalDocs:
    properties:
      description?: string
      url: string
    allowedTargets:
      - API
      - Method
      - TypeDeclaration
  oas-info:
    properties:
      termsOfService?: string
      contact?:
        properties:
          name?: string
          url?: string
          email?: string
      license?:
        properties:
          name?: string
          url?: string
    allowedTargets: API
  oas-body-name:
    type: string
    allowedTargets: TypeDeclaration
(oas-info):
  (oas-x-apiClientRegistration):
    url: 'https://console.developers.google.com'
  (oas-x-logo):
    url: 'https://api.apis.guru/v2/cache/logo/https_www.google.com_images_branding_googlelogo_2x_googlelogo_color_272x92dp.png'
  (oas-x-origin):
    format: google
    url: 'https://servicecontrol.googleapis.com/$discovery/rest?version=v1'
    version: v1
  (oas-x-preferred): true
  (oas-x-providerName): googleapis.com
  (oas-x-serviceName): servicecontrol
  contact:
    name: Google
    url: 'https://google.com'
(oas-externalDocs):
  url: 'https://cloud.google.com/service-control/'
securitySchemes:
  Oauth2:
    type: OAuth 2.0
    settings:
      authorizationUri: 'https://accounts.google.com/o/oauth2/auth'
      accessTokenUri: ''
      authorizationGrants:
        - implicit
      scopes:
        - 'https://www.googleapis.com/auth/cloud-platform'
        - 'https://www.googleapis.com/auth/servicecontrol'
    description: Oauth 2.0 authentication
/v1:
  displayName: v1
  /services:
    displayName: services
    '/{serviceName}:report':
      displayName: '{serviceName}:report'
      uriParameters:
        serviceName:
          description: |-
            The service name as specified in its service configuration. For example,
            `"pubsub.googleapis.com"`.

            See google.api.Service for the definition of a service name.
          required: true
          type: string
      post:
        displayName: servicecontrol.services.report
        description: |-
          Reports operations to Google Service Control. It should be called
          after the operation is completed.

          If feasible, the client should aggregate reporting data for up to 5s to
          reduce API traffic. Limiting aggregation to 5s is to reduce data loss
          during client crashes. Clients should carefully choose the aggregation
          window to avoid data loss risk more than 0.01% for business and
          compliance reasons.

          This method requires the `servicemanagement.services.report` permission
          on the specified service. For more information, see
          [Google Cloud IAM](https://cloud.google.com/iam).
        body:
          application/json:
            type: ReportRequest
            (oas-body-name): body
        responses:
          '200':
            body:
              application/json:
                type: ReportResponse
            description: Successful response
        securedBy:
          - Oauth2:
              scopes:
                - 'https://www.googleapis.com/auth/servicecontrol'
        (oas-tags):
          - services
      is:
        - accessToken
        - prettyPrint
        - key
        - quotaUser
        - pp
        - fields
        - alt
        - xgafv
        - callback
        - oauthToken
        - uploadType
        - bearerToken
        - uploadProtocol
    '/{serviceName}:check':
      displayName: '{serviceName}:check'
      uriParameters:
        serviceName:
          description: |-
            The service name as specified in its service configuration. For example,
            `"pubsub.googleapis.com"`.

            See google.api.Service for the definition of a service name.
          required: true
          type: string
      post:
        displayName: servicecontrol.services.check
        description: |-
          Checks an operation with Google Service Control to decide whether
          the given operation should proceed. It should be called before the
          operation is executed.

          If feasible, the client should cache the check results and reuse them for
          up to 60s. In case of server errors, the client may rely on the cached
          results for longer time.

          This method requires the `servicemanagement.services.check` permission
          on the specified service. For more information, see
          [Google Cloud IAM](https://cloud.google.com/iam).
        body:
          application/json:
            type: CheckRequest
            (oas-body-name): body
        responses:
          '200':
            body:
              application/json:
                type: CheckResponse
            description: Successful response
        securedBy:
          - Oauth2:
              scopes:
                - 'https://www.googleapis.com/auth/servicecontrol'
        (oas-tags):
          - services
      is:
        - accessToken
        - prettyPrint
        - key
        - quotaUser
        - pp
        - fields
        - alt
        - xgafv
        - callback
        - oauthToken
        - uploadType
        - bearerToken
        - uploadProtocol
types:
  CheckError:
    description: |-
      Defines the errors to be returned in
      google.api.servicecontrol.v1.CheckResponse.check_errors.
    properties:
      code:
        description: The error code.
        enum:
          - ERROR_CODE_UNSPECIFIED
          - NOT_FOUND
          - PERMISSION_DENIED
          - RESOURCE_EXHAUSTED
          - SERVICE_NOT_ACTIVATED
          - BILLING_DISABLED
          - PROJECT_DELETED
          - PROJECT_INVALID
          - IP_ADDRESS_BLOCKED
          - REFERER_BLOCKED
          - CLIENT_APP_BLOCKED
          - API_KEY_INVALID
          - API_KEY_EXPIRED
          - API_KEY_NOT_FOUND
          - NAMESPACE_LOOKUP_UNAVAILABLE
          - SERVICE_STATUS_UNAVAILABLE
          - BILLING_STATUS_UNAVAILABLE
        type: string
        required: false
      detail:
        description: Free-form text providing details on the error cause of the error.
        type: string
        required: false
  CheckRequest:
    description: Request message for the Check method.
    properties:
      operation:
        description: The operation to be checked.
        type: Operation
        required: false
      serviceConfigId:
        description: |-
          Specifies which version of service configuration should be used to process
          the request.

          If unspecified or no matching version can be found, the
          latest one will be used.
        type: string
        required: false
  CheckResponse:
    description: Response message for the Check method.
    properties:
      checkErrors:
        description: |-
          Indicate the decision of the check.

          If no check errors are present, the service should process the operation.
          Otherwise the service should use the list of errors to determine the
          appropriate action.
        items:
          type: CheckError
        type: array
        required: false
      operationId:
        description: |-
          The same operation_id value used in the CheckRequest.
          Used for logging and diagnostics purposes.
        type: string
        required: false
      serviceConfigId:
        description: The actual config id used to process the request.
        type: string
        required: false
  Distribution:
    description: |-
      Distribution represents a frequency distribution of double-valued sample
      points. It contains the size of the population of sample points plus
      additional optional information:

        - the arithmetic mean of the samples
        - the minimum and maximum of the samples
        - the sum-squared-deviation of the samples, used to compute variance
        - a histogram of the values of the sample points
    properties:
      bucketCounts:
        description: |-
          The number of samples in each histogram bucket. `bucket_counts` are
          optional. If present, they must sum to the `count` value.

          The buckets are defined below in `bucket_option`. There are N buckets.
          `bucket_counts[0]` is the number of samples in the underflow bucket.
          `bucket_counts[1]` to `bucket_counts[N-1]` are the numbers of samples
          in each of the finite buckets. And `bucket_counts[N] is the number
          of samples in the overflow bucket. See the comments of `bucket_option`
          below for more details.

          Any suffix of trailing zeros may be omitted.
        items:
          format: int64
          type: string
          facets:
            format: string
        type: array
        required: false
      count:
        description: The total number of samples in the distribution. Must be >= 0.
        format: int64
        type: string
        facets:
          format: string
        required: false
      explicitBuckets:
        description: Buckets with arbitrary user-provided width.
        type: ExplicitBuckets
        required: false
      exponentialBuckets:
        description: Buckets with exponentially growing width.
        type: ExponentialBuckets
        required: false
      linearBuckets:
        description: Buckets with constant width.
        type: LinearBuckets
        required: false
      maximum:
        description: The maximum of the population of values. Ignored if `count` is zero.
        format: double
        type: number
        required: false
      mean:
        description: |-
          The arithmetic mean of the samples in the distribution. If `count` is
          zero then this field must be zero.
        format: double
        type: number
        required: false
      minimum:
        description: The minimum of the population of values. Ignored if `count` is zero.
        format: double
        type: number
        required: false
      sumOfSquaredDeviation:
        description: |-
          The sum of squared deviations from the mean:
            Sum[i=1..count]((x_i - mean)^2)
          where each x_i is a sample values. If `count` is zero then this field
          must be zero, otherwise validation of the request fails.
        format: double
        type: number
        required: false
  ExplicitBuckets:
    description: Describing buckets with arbitrary user-provided width.
    properties:
      bounds:
        description: |-
          'bound' is a list of strictly increasing boundaries between
          buckets. Note that a list of length N-1 defines N buckets because
          of fenceposting. See comments on `bucket_options` for details.

          The i'th finite bucket covers the interval
            [bound[i-1], bound[i])
          where i ranges from 1 to bound_size() - 1. Note that there are no
          finite buckets at all if 'bound' only contains a single element; in
          that special case the single bound defines the boundary between the
          underflow and overflow buckets.

          bucket number                   lower bound    upper bound
           i == 0 (underflow)              -inf           bound[i]
           0 < i < bound_size()            bound[i-1]     bound[i]
           i == bound_size() (overflow)    bound[i-1]     +inf
        items:
          format: double
          type: number
        type: array
        required: false
  ExponentialBuckets:
    description: Describing buckets with exponentially growing width.
    properties:
      growthFactor:
        description: |-
          The i'th exponential bucket covers the interval
            [scale * growth_factor^(i-1), scale * growth_factor^i)
          where i ranges from 1 to num_finite_buckets inclusive.
          Must be larger than 1.0.
        format: double
        type: number
        required: false
      numFiniteBuckets:
        description: |-
          The number of finite buckets. With the underflow and overflow buckets,
          the total number of buckets is `num_finite_buckets` + 2.
          See comments on `bucket_options` for details.
        format: int32
        type: integer
        required: false
      scale:
        description: |-
          The i'th exponential bucket covers the interval
            [scale * growth_factor^(i-1), scale * growth_factor^i)
          where i ranges from 1 to num_finite_buckets inclusive.
          Must be > 0.
        format: double
        type: number
        required: false
  LinearBuckets:
    description: Describing buckets with constant width.
    properties:
      numFiniteBuckets:
        description: |-
          The number of finite buckets. With the underflow and overflow buckets,
          the total number of buckets is `num_finite_buckets` + 2.
          See comments on `bucket_options` for details.
        format: int32
        type: integer
        required: false
      offset:
        description: |-
          The i'th linear bucket covers the interval
            [offset + (i-1) * width, offset + i * width)
          where i ranges from 1 to num_finite_buckets, inclusive.
        format: double
        type: number
        required: false
      width:
        description: |-
          The i'th linear bucket covers the interval
            [offset + (i-1) * width, offset + i * width)
          where i ranges from 1 to num_finite_buckets, inclusive.
          Must be strictly positive.
        format: double
        type: number
        required: false
  LogEntry:
    description: An individual log entry.
    properties:
      insertId:
        description: |-
          A unique ID for the log entry used for deduplication. If omitted,
          the implementation will generate one based on operation_id.
        type: string
        required: false
      labels:
        additionalProperties:
          type: string
        description: |-
          A set of user-defined (key, value) data that provides additional
          information about the log entry.
        type: object
        required: false
      name:
        description: |-
          Required. The log to which this log entry belongs. Examples: `"syslog"`,
          `"book_log"`.
        type: string
        required: false
      protoPayload:
        additionalProperties:
          description: Properties of the object. Contains field @type with type URL.
        description: |-
          The log entry payload, represented as a protocol buffer that is
          expressed as a JSON object. You can only pass `protoPayload`
          values that belong to a set of approved types.
        type: object
        required: false
      severity:
        description: |-
          The severity of the log entry. The default value is
          `LogSeverity.DEFAULT`.
        enum:
          - DEFAULT
          - DEBUG
          - INFO
          - NOTICE
          - WARNING
          - ERROR
          - CRITICAL
          - ALERT
          - EMERGENCY
        type: string
        required: false
      structPayload:
        additionalProperties:
          description: Properties of the object.
        description: |-
          The log entry payload, represented as a structure that
          is expressed as a JSON object.
        type: object
        required: false
      textPayload:
        description: 'The log entry payload, represented as a Unicode string (UTF-8).'
        type: string
        required: false
      timestamp:
        description: |-
          The time the event described by the log entry occurred. If
          omitted, defaults to operation start time.
        format: google-datetime
        type: string
        facets:
          format: string
        required: false
  MetricValue:
    description: Represents a single metric value.
    properties:
      boolValue:
        description: A boolean value.
        type: boolean
        required: false
      distributionValue:
        description: A distribution value.
        type: Distribution
        required: false
      doubleValue:
        description: A double precision floating point value.
        format: double
        type: number
        required: false
      endTime:
        description: |-
          The end of the time period over which this metric value's measurement
          applies.
        format: google-datetime
        type: string
        facets:
          format: string
        required: false
      int64Value:
        description: A signed 64-bit integer value.
        format: int64
        type: string
        facets:
          format: string
        required: false
      labels:
        additionalProperties:
          type: string
        description: |-
          The labels describing the metric value.
          See comments on google.api.servicecontrol.v1.Operation.labels for
          the overriding relationship.
        type: object
        required: false
      startTime:
        description: |-
          The start of the time period over which this metric value's measurement
          applies. The time period has different semantics for different metric
          types (cumulative, delta, and gauge). See the metric definition
          documentation in the service configuration for details.
        format: google-datetime
        type: string
        facets:
          format: string
        required: false
      stringValue:
        description: A text string value.
        type: string
        required: false
  MetricValueSet:
    description: |-
      Represents a set of metric values in the same metric.
      Each metric value in the set should have a unique combination of start time,
      end time, and label values.
    properties:
      metricName:
        description: The metric name defined in the service configuration.
        type: string
        required: false
      metricValues:
        description: The values in this metric.
        items:
          type: MetricValue
        type: array
        required: false
  Operation:
    description: Represents information regarding an operation.
    properties:
      consumerId:
        description: |-
          Identity of the consumer who is using the service.
          This field should be filled in for the operations initiated by a
          consumer, but not for service-initiated operations that are
          not related to a specific consumer.

          This can be in one of the following formats:
            project:<project_id>,
            project_number:<project_number>,
            api_key:<api_key>.
        type: string
        required: false
      endTime:
        description: |-
          End time of the operation.
          Required when the operation is used in ServiceController.Report,
          but optional when the operation is used in ServiceController.Check.
        format: google-datetime
        type: string
        facets:
          format: string
        required: false
      importance:
        description: DO NOT USE. This is an experimental field.
        enum:
          - LOW
          - HIGH
        type: string
        required: false
      labels:
        additionalProperties:
          type: string
        description: |-
          Labels describing the operation. Only the following labels are allowed:

          - Labels describing monitored resources as defined in
            the service configuration.
          - Default labels of metric values. When specified, labels defined in the
            metric value override these default.
          - The following labels defined by Google Cloud Platform:
              - `cloud.googleapis.com/location` describing the location where the
                 operation happened,
              - `servicecontrol.googleapis.com/user_agent` describing the user agent
                 of the API request,
              - `servicecontrol.googleapis.com/service_agent` describing the service
                 used to handle the API request (e.g. ESP),
              - `servicecontrol.googleapis.com/platform` describing the platform
                 where the API is served (e.g. GAE, GCE, GKE).
        type: object
        required: false
      logEntries:
        description: Represents information to be logged.
        items:
          type: LogEntry
        type: array
        required: false
      metricValueSets:
        description: |-
          Represents information about this operation. Each MetricValueSet
          corresponds to a metric defined in the service configuration.
          The data type used in the MetricValueSet must agree with
          the data type specified in the metric definition.

          Within a single operation, it is not allowed to have more than one
          MetricValue instances that have the same metric names and identical
          label value combinations. If a request has such duplicated MetricValue
          instances, the entire request is rejected with
          an invalid argument error.
        items:
          type: MetricValueSet
        type: array
        required: false
      operationId:
        description: |-
          Identity of the operation. This must be unique within the scope of the
          service that generated the operation. If the service calls
          Check() and Report() on the same operation, the two calls should carry
          the same id.

          UUID version 4 is recommended, though not required.
          In scenarios where an operation is computed from existing information
          and an idempotent id is desirable for deduplication purpose, UUID version 5
          is recommended. See RFC 4122 for details.
        type: string
        required: false
      operationName:
        description: Fully qualified name of the operation. Reserved for future use.
        type: string
        required: false
      startTime:
        description: Required. Start time of the operation.
        format: google-datetime
        type: string
        facets:
          format: string
        required: false
  ReportError:
    description: Represents the processing error of one `Operation` in the request.
    properties:
      operationId:
        description: The Operation.operation_id value from the request.
        type: string
        required: false
      status:
        description: Details of the error when processing the `Operation`.
        type: Status
        required: false
  ReportRequest:
    description: Request message for the Report method.
    properties:
      operations:
        description: |-
          Operations to be reported.

          Typically the service should report one operation per request.
          Putting multiple operations into a single request is allowed, but should
          be used only when multiple operations are natually available at the time
          of the report.

          If multiple operations are in a single request, the total request size
          should be no larger than 1MB. See ReportResponse.report_errors for
          partial failure behavior.
        items:
          type: Operation
        type: array
        required: false
      serviceConfigId:
        description: |-
          Specifies which version of service config should be used to process the
          request.

          If unspecified or no matching version can be found, the
          latest one will be used.
        type: string
        required: false
  ReportResponse:
    description: Response message for the Report method.
    properties:
      reportErrors:
        description: |-
          Partial failures, one for each `Operation` in the request that failed
          processing. There are three possible combinations of the RPC status:

          1. The combination of a successful RPC status and an empty `report_errors`
             list indicates a complete success where all `Operations` in the
             request are processed successfully.
          2. The combination of a successful RPC status and a non-empty
             `report_errors` list indicates a partial success where some
             `Operations` in the request succeeded. Each
             `Operation` that failed processing has a corresponding item
             in this list.
          3. A failed RPC status indicates a general non-deterministic failure.
             When this happens, it's impossible to know which of the
             'Operations' in the request succeeded or failed.
        items:
          type: ReportError
        type: array
        required: false
      serviceConfigId:
        description: The actual config id used to process the request.
        type: string
        required: false
  Status:
    description: |-
      The `Status` type defines a logical error model that is suitable for different
      programming environments, including REST APIs and RPC APIs. It is used by
      [gRPC](https://github.com/grpc). The error model is designed to be:

      - Simple to use and understand for most users
      - Flexible enough to meet unexpected needs

      # Overview

      The `Status` message contains three pieces of data: error code, error message,
      and error details. The error code should be an enum value of
      google.rpc.Code, but it may accept additional error codes if needed.  The
      error message should be a developer-facing English message that helps
      developers *understand* and *resolve* the error. If a localized user-facing
      error message is needed, put the localized message in the error details or
      localize it in the client. The optional error details may contain arbitrary
      information about the error. There is a predefined set of error detail types
      in the package `google.rpc` which can be used for common error conditions.

      # Language mapping

      The `Status` message is the logical representation of the error model, but it
      is not necessarily the actual wire format. When the `Status` message is
      exposed in different client libraries and different wire protocols, it can be
      mapped differently. For example, it will likely be mapped to some exceptions
      in Java, but more likely mapped to some error codes in C.

      # Other uses

      The error model and the `Status` message can be used in a variety of
      environments, either with or without APIs, to provide a
      consistent developer experience across different environments.

      Example uses of this error model include:

      - Partial errors. If a service needs to return partial errors to the client,
          it may embed the `Status` in the normal response to indicate the partial
          errors.

      - Workflow errors. A typical workflow has multiple steps. Each step may
          have a `Status` message for error reporting purpose.

      - Batch operations. If a client uses batch request and batch response, the
          `Status` message should be used directly inside batch response, one for
          each error sub-response.

      - Asynchronous operations. If an API call embeds asynchronous operation
          results in its response, the status of those operations should be
          represented directly using the `Status` message.

      - Logging. If some API errors are stored in logs, the message `Status` could
          be used directly after any stripping needed for security/privacy reasons.
    properties:
      code:
        description: 'The status code, which should be an enum value of google.rpc.Code.'
        format: int32
        type: integer
        required: false
      details:
        description: |-
          A list of messages that carry the error details.  There will be a
          common set of message types for APIs to use.
        items:
          additionalProperties:
            description: Properties of the object. Contains field @type with type URL.
          type: object
        type: array
        required: false
      message:
        description: |-
          A developer-facing error message, which should be in English. Any
          user-facing error message should be localized and sent in the
          google.rpc.Status.details field, or localized by the client.
        type: string
        required: false
traits:
  xgafv:
    queryParameters:
      $.xgafv:
        type: string
        description: V1 error format.
        enum:
          - '1'
          - '2'
  accessToken:
    queryParameters:
      access_token:
        type: string
        description: OAuth access token.
  alt:
    queryParameters:
      alt:
        type: string
        description: Data format for response.
        default: json
        enum:
          - json
          - media
          - proto
  bearerToken:
    queryParameters:
      bearer_token:
        type: string
        description: OAuth bearer token.
  callback:
    queryParameters:
      callback:
        type: string
        description: JSONP
  fields:
    queryParameters:
      fields:
        type: string
        description: Selector specifying which fields to include in a partial response.
  key:
    queryParameters:
      key:
        type: string
        description: 'API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.'
  oauthToken:
    queryParameters:
      oauth_token:
        type: string
        description: OAuth 2.0 token for the current user.
  pp:
    queryParameters:
      pp:
        type: boolean
        description: Pretty-print response.
        default: true
  prettyPrint:
    queryParameters:
      prettyPrint:
        type: boolean
        description: Returns response with indentations and line breaks.
        default: true
  quotaUser:
    queryParameters:
      quotaUser:
        type: string
        description: 'Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.'
  uploadType:
    queryParameters:
      uploadType:
        type: string
        description: 'Legacy upload protocol for media (e.g. "media", "multipart").'
  uploadProtocol:
    queryParameters:
      upload_protocol:
        type: string
        description: 'Upload protocol for media (e.g. "raw", "multipart").'
