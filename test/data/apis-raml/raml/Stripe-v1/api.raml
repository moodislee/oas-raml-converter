#%RAML 0.8
title: Stripe
version: v1
baseUri: https://api.stripe.com/{version}
mediaType: application/json
securitySchemes:
  - oauth_2_0: !include securitySchemes/oauth_2_0.raml
  - basic: !include securitySchemes/basic.raml
schemas:
  - charge: !include schemas/charge-schema.json
  - charges: !include schemas/charges-schema.json
  - dispute: !include schemas/dispute-schema.json
  - customer: !include schemas/customer-schema.json
  - customers: !include schemas/customers-schema.json
  - delete: !include schemas/delete-schema.json
  - card: !include schemas/card-schema.json
  - cards: !include schemas/cards-schema.json
  - subscription: !include schemas/subscription-schema.json
  - plan: !include schemas/plan-schema.json
  - plans: !include schemas/plans-schema.json
  - coupon: !include schemas/coupon-schema.json
  - coupons: !include schemas/coupons-schema.json
  - invoice: !include schemas/invoice-schema.json
  - invoices: !include schemas/invoices-schema.json
  - invoice-line_items: !include schemas/invoice-line_items-schema.json
  - invoice_item: !include schemas/invoice_item-schema.json
  - invoice_items: !include schemas/invoice_items-schema.json
  - transfer: !include schemas/transfer-schema.json
  - transfers: !include schemas/transfers-schema.json
  - recipient: !include schemas/recipient-schema.json
  - recipients: !include schemas/recipients-schema.json
  - account: !include schemas/account-schema.json
  - balance: !include schemas/balance-schema.json
  - balance_transactions: !include schemas/balance_transactions-schema.json
  - balance_transaction: !include schemas/balance_transaction-schema.json
  - events: !include schemas/events-schema.json
  - event: !include schemas/event-schema.json
  - token: !include schemas/token-schema.json
  - application_fee: !include schemas/application_fee-schema.json
  - application_fees: !include schemas/application_fees-schema.json
resourceTypes:
  - baseResource: !include resourceTypes/baseResource.raml
  - collection: !include resourceTypes/collection.raml
  - collectionItem: !include resourceTypes/collectionItem.raml
traits:
  - objectUpdate: !include traits/objectUpdate.raml
  - pageable: !include traits/pageable.raml
securedBy: [ oauth_2_0 , basic ]
/charges: 
  displayName: Charges
  type: { collection: { itemPathName: charge } }
  description: |
    Charges operations:
    * Creating a new charge
    * Retrieving a Charge
    * Refunding a Charge
    * Capture a charge
    * List all Charges
  post: 
    is: [ objectUpdate ]
    description: |
      Creating a new charge (charging a credit card).
      To charge a credit card, you create a new charge object. If your API key is in test mode, the supplied card won'
      actually be charged, though everything else will occur as if in live mode. (Stripe assumes that the charge would have
      completed successfully).
    body: 
      application/x-www-form-urlencoded: 
        formParameters: 
          amount: 
            description: |
              A positive integer in cents representing how much to charge the card.
            type: integer
            required: true
            minimum: 50
          currency: 
            description: |
              3-letter ISO code for currency.
            required: true
            minLength: 3
            maxLength: 3
          customer: 
            description: |
              The ID of an existing customer that will be charged in this request.
              optional, either card or customer is required
          card: 
            description: |
              A card to be charged. If you also pass a customer ID, the card must be the ID of a card belonging to the customer.
              Otherwise, if you do not pass a customer ID, the card you provide must either be a token, like the ones returned by
              Stripe.js, or a dictionary containing a user's credit card details, with the options described below. Although no
              all information is required, the extra info helps prevent fraud.
              optional, either card or customer is required
          capture: 
            description: |
              Whether or not to immediately capture the charge. When false, the charge issues an authorization (or pre-authorization),
              and will need to be captured later. Uncaptured charges expire in 7 days.
            type: boolean
            default: true
          statement_description: 
            description: |
              An arbitrary string to be displayed alongside your company name on your customer's credit card statement.
              This may be up to 15 characters. As an example, if your website is RunClub and you specify 5K Race Ticket,
              the user will see RUNCLUB 5K RACE TICKET. The statement description may not include <>"' characters.
              While most banks display this information consistently, some may display it incorrectly or not at all.            
          application_fee: 
            description: |
              A fee in cents that will be applied to the charge and transferred to the application owner's Stripe account. The reques
              must be made with an OAuth key in order to take an application fee.
            type: integer
    responses: 
      200: 
        body: 
          application/json:
            example: !include examples/charge.json
  get: 
    description: |
      Returns a list of charges you've previously created. The charges are returned in sorted order, with the most recent charges appearing first.
    queryParameters: 
      created: 
        description: |
          A filter on the list based on the object created field. The value can be a string with an exact UTC timestamp
      customer: 
        description: |
          Only return charges for the customer specified by this customer ID.
    responses: 
      200: 
        body: 
          application/json: 
            schema: charges
            example: !include examples/charges.json
  /{CHARGE_ID}: 
    type: { collectionItem: { item: charge } }
    uriParameters: 
      CHARGE_ID: 
        displayName: Charge ID
        description: The identifier of the charge to be retrieved.
        required: true
    get: 
      description: |
        Retrieves the details of a charge that has previously been created. Supply the unique charge ID that was returned
        from your previous request, and Stripe will return the corresponding charge information. The same information is
        returned when creating or refunding the charge.
      responses: 
        200: 
          body: 
            application/json:
              example: !include examples/charge.json
    post: 
      is: [ objectUpdate ]
      description: Updates the specified charge by setting the values of the parameters passed. Any parameters not provided will be left unchanged.
      body: 
        application/x-www-form-urlencoded: 
          formParameters: 
            descripttion: 
      responses: 
        200: 
          body: 
            application/json:
              example: !include examples/charge.json
    /capture: 
      type: baseResource
      post: 
        description: |
          Capture the payment of an existing, uncaptured, charge. This is the second half of the two-step payment flow, where first you created
          a charge with the capture option set to false.
          
          Uncaptured payments expire exactly seven days after they are created. If they are not captured by that point in time, they will be
          marked as refunded and will no longer be capturable.
        body: 
          application/x-www-form-urlencoded: 
            formParameters: 
              amount: 
                description: |
                  The amount to capture, which must be less than or equal to the original amount. Any additional amount will be automatically refunded.
                type: integer
              refund_application_fee: 
        responses: 
          200: 
            body: 
              application/json: 
                schema: charge
                example: !include examples/charge.json
    /refund: 
      type: baseResource
      post: 
        description: |
          Refunds a charge that has previously been created but not yet refunded. Funds will be refunded to the credit or
          debit card that was originally charged. The fees you were originally charged are also refunded.
          
          You can optionally refund only part of a charge. You can do so as many times as you wish until the entire charge has been refunded.
          
          Once entirely refunded, a charge can't be refunded again. This method will return an error when called on an already-refunded charge,
          or when trying to refund more money than is left on a charge.
        body: 
          application/x-www-form-urlencoded: 
            formParameters: 
              amount: 
                description: A positive integer in cents representing how much of this charge to refund. Can only refund up to the unrefunded amount remaining of the charge.  Default is entire charge.
                type: integer
        responses: 
          200: 
            body: 
              application/json: 
                schema: charge
                example: !include examples/charge.json
    /dispute: 
      type: baseResource
      post: 
        description: |
          Contacting your customer is always the best first step, but if that doesn'
          work, you can submit (text-only) evidence in order to help us resolve the
          dispute in your favor. You can do this in your dashboard, but if you prefer,
          you can use the API to submit evidence programmatically.
        body: 
          application/x-www-form-urlencoded: 
            formParameters: 
              evidence: 
        responses: 
          200: 
            body: 
              application/json: 
                schema: dispute
                example: !include examples/dispute.json
      /close: 
        type: baseResource
        post: 
          description: |
            Closing the dispute for a charge indicates that you do not have any evidence
            to submit and are essentially 'dismissing' the dispute, acknowledging it as
            lost.
            The status of the dispute will change from under_review to lost. Closing
            a dispute is irreversible.
          responses: 
            200: 
              body: 
                application/json: 
                  schema: dispute
                  example: !include examples/dispute.json
/customers: 
  displayName: Customers
  type: { collection: { itemPathName: customer } }
  description: |
    Customers operations:
    * Creating a New Customer
    * Retrieving a Customer
    * Updating a Customer
    * Deleting a Customer
    * List all Customers
  post: 
    is: [ objectUpdate ]
    description: |
      Creates a new customer object.
    body: 
      application/x-www-form-urlencoded: 
        formParameters: 
          account_balance: 
            description: |
              An integer amount in cents that is the starting account balance for your customer. A negative amount represents a
              credit that will be used before attempting any charges to the customers card; a positive amount will be added to
              the next invoice.
            type: integer
          card: 
            description: |
              The card can either be a token, like the ones returned by our Stripe.js, or a dictionary containing a users credi
              card details (with the options shown below). Passing card will create a new card, make it the new customer defaul
              card, and delete the old customer default if one exists. If you want to add additional cards instead of replacing the
              existing default, use the card creation API. Whenever you attach a card to a customer, Stripe will automatically
              validate the card.
          coupon: 
            description: |
              If you provide a coupon code, the customer will have a discount applied on all recurring charges. Charges you create
              through the API will not have the discount.
          email: 
            description: |
              Customer's email address. Its displayed alongside the customer in your dashboard and can be useful for searching and
              tracking. This will be unset if you POST an empty value.
          plan: 
            description: |
              The identifier of the plan to subscribe the customer to. If provided, the returned customer object has a 'subscription'
              attribute describing the state of the customers subscription
          quantity: 
            description: |
              The quantity youd like to apply to the subscription youre creating. For example, if your plan is 10 cents/user/month,
              and your customer has 5 users, you could pass 5 as the quantity to have the customer charged 50 cents (5 x 10 cents) monthly.
              Defaults to 1 if not set.
            type: integer
            default: 1
          trial_end: 
            description: |
              UTC integer timestamp representing the end of the trial period the customer will get before being charged for the first time.
              If set, trial_end will override the default trial period of the plan the customer is being subscribed to. The special value
              now can be provided to end the customers trial immediately. Only applies when the plan parameter is also provided.
            type: integer
    responses: 
      200: 
        body: 
          application/json:
            example: !include examples/customer.json
  get: 
    description: |
      Returns a list of your customers. The customers are returned sorted by creation date, with the most recently created customers appearing first.
    queryParameters: 
      created: 
        description: |
          A filter on the list based on the object created field. The value can be a string with an exact UTC timestamp
    responses: 
      200: 
        body: 
          application/json: 
            schema: customers
            example: !include examples/customers.json
  /{CUSTOMER_ID}: 
    type: { collectionItem: { item: customer } }
    uriParameters: 
      CUSTOMER_ID: 
        displayName: Customer ID
        description: The identifier of the customer to be retrieved.
        required: true
    get: 
      description: |
        Retrieves the details of an existing customer.
      responses: 
        200: 
          body: 
            application/json:
              example: !include examples/customer.json
    post: 
      is: [ objectUpdate ]
      description: |
        Updates the specified customer by setting the values of the parameters passed. Any parameters not provided will
        be left unchanged. For example, if you pass the card parameter, that becomes the customer's active card to be
        used for all charges in future. When you update a customer to a new valid card, the last unpaid invoice (if one exists)
        will be retried automatically.
      body: 
        application/x-www-form-urlencoded: 
          formParameters: 
            account_balance: 
              description: |
                An integer amount in cents that is the starting account balance for your customer. A negative amount represents a
                credit that will be used before attempting any charges to the customer's card; a positive amount will be added to
                the next invoice.
              type: integer
            card: 
              description: |
                The card can either be a token, like the ones returned by our Stripe.js, or a dictionary containing a user's credi
                card details (with the options shown below). Passing card will create a new card, make it the new customer defaul
                card, and delete the old customer default if one exists. If you want to add additional cards instead of replacing the
                existing default, use the card creation API. Whenever you attach a card to a customer, Stripe will automatically
                validate the card.
            coupon: 
              description: |
                If you provide a coupon code, the customer will have a discount applied on all recurring charges. Charges you create
                through the API will not have the discount.
            default_card: 
              description: |
                ID of card to make the customer's new default for invoice payments
            email: 
              description: |
                Customer's email address. It's displayed alongside the customer in your dashboard and can be useful for searching and
                tracking. This will be unset if you POST an empty value.
      responses: 
        200: 
          body: 
            application/json:
              example: !include examples/customer.json
    delete: 
      description: |
        Permanently deletes a customer. It cannot be undone.
    /cards: 
      displayName: Cards
      type: { collection: { itemPathName: card } }
      description: |
        Cards operations:
        * Creating a new card
        * Retrieving a customer's card
        * Updating a card
        * Deleting cards
        * Listing cards
      post: 
        description: |
          Creating a new card.
          When you create a new credit card, you must specify a customer.
          
          Creating a new credit card will not change the customer's default credit card automatically;
          you should update the customer with a new default_card for that.
        body: 
          application/x-www-form-urlencoded: 
            formParameters: 
              card: 
                description: |
                  The card can either be a token, like the ones returned by our Stripe.js, or a dictionary containing a users credit card details
                  (with the options shown below). Whenever you create a new card for a customer, Stripe will automatically validate the card.
                  Card details:
                  **number**: required The card number, as a string without any separators.
                  **exp_month**: required Two digit number representing the card's expiration month.
                  **exp_year**: required Two or four digit number representing the card's expiration year.
                  **cvc**: optional, highly recommended Card security code.
                  **name**: optional, Cardholder's full name.
                  **address_line1**: optional
                  **address_line2**: optional
                  **address_zip**: optional
                  **address_state**: optional
                  **address_country**: optional
                required: true
        responses: 
          200: 
            body: 
              application/json:
                example: !include examples/card.json
      get: 
        description: |
          You can see a list of the customer's cards. Note that the 10 most recent cards are always available by default on the customer object.
          If you need more than 10, you can use the listing API to page through the additional cards.
        responses: 
          200: 
            body: 
              application/json: 
                schema: cards
                example: !include examples/cards.json
      /{CARD_ID}: 
        type: { collectionItem: { item: card } }
        uriParameters: 
          CARD_ID: 
            displayName: Card ID
            description: ID of card to retrieve
            required: true
        get: 
          description: |
            Retrieving a customer's card.
            By default, you can see the 10 most recent cards stored on a customer directly on the customer object,
            but you can also retrieve details about a specific card stored on the customer.
          responses: 
            200: 
              body: 
                application/json:
                  example: !include examples/card.json
        post: 
          description: |
            Updating a card.
            If you need to update only some card details, like the billing address or expiration date, you can do so withou
            having to re-enter the full card details.
            
            When you update a card, Stripe will automatically validate the card.
          body: 
            application/x-www-form-urlencoded: 
              formParameters: 
                address_city: 
                address_country: 
                address_line1: 
                address_line2: 
                address_state: 
                address_zip: 
                exp_month: 
                  type: integer
                exp_year: 
                  type: integer
                name: 
          responses: 
            200: 
              body: 
                application/json:
                  example: !include examples/card.json
        delete: 
          description: |
            You can delete cards from a customer. If you delete a card that is currently a customer's default, the most recently
            added card will be used as the new default. If you delete the customer's last remaining card, the default_card
            attribute on the customer will become null.
            
            Note that you may want to prevent customers on paid subscriptions from deleting all cards on file so that there
            is at least one default card for the next invoice payment attempt.
    /subscriptions: 
      type: baseResource
      post: 
        description: |
          Subscribes a customer to a plan, meaning the customer will be billed monthly
          starting from signup. If the customer already has an active subscription,
          we'll update it to the new plan and optionally prorate the price we charge
          next month to make up for any price changes.
        body: 
          application/x-www-form-urlencoded: 
            formParameters: 
              plan: 
                description: The identifier of the plan to subscribe the customer to.
                required: true
              coupon: 
                description: |
                  The code of the coupon to apply to the customer if you would like to
                  apply it at the same time as creating the subscription.
              prorate: 
              trial_end: 
                description: |
                  UTC integer timestamp representing the end of the trial period the
                  customer will get before being charged for the first time. If set,
                  trial_end will override the default trial period of the plan the
                  customer is being subscribed to. The special value now can be
                  provided to end the customer's trial immediately.
                default: null
              card: 
                description: |
                  The card can either be a token, like the ones returned by our Stripe.js,
                  or a dictionary containing a user's credit card details (with the
                  options shown below). You must provide a card if the customer does
                  not already have a valid card attached, and you are subscribing the
                  customer for a plan that is not free. Passing card will create a new
                  card, make it the customer default card, and delete the old customer
                  default if one exists. If you want to add an additional card to use
                  with subscriptions, instead use the card creation API to add the card
                  and then the customer update API to set it as the default. Whenever
                  you attach a card to a customer, Stripe will automatically validate
                  the card.
                  Card details:
                  **number**: required The card number, as a string without any separators.
                  **exp_month**: required Two digit number representing the card's expiration month.
                  **exp_year**: required Two or four digit number representing the card's expiration year.
                  **cvc**: optional, highly recommended Card security code.
                  **name**: optional, Cardholder's full name.
                  **address_line1**: optional
                  **address_line2**: optional
                  **address_zip**: optional
                  **address_state**: optional
                  **address_country**: optional
              quantity: 
                description: |
                  The quantity you'd like to apply to the subscription you're creating.
                  For example, if your plan is $10/user/month, and your customer has 5
                  users, you could pass 5 as the quantity to have the customer charged
                  $50 (5 x $10) monthly. If you update a subscription but don't change
                  the plan ID (e.g. changing only the trial_end), the subscription will
                  inherit the old subscription's quantity attribute unless you pass a
                  new quantity parameter. If you update a subscription and change the
                  plan ID, the new subscription will not inherit the quantity attribute
                  and will default to 1 unless you pass a quantity parameter.
                type: integer
                default: 1
              application_fee_percent: 
                description: |
                  A positive integer between 1 and 100 that represents the percentage
                  of the subscription invoice amount due each billing period (including
                  any bundled invoice items) that will be transferred to the application
                  owners Stripe account. The request must be made with an OAuth key
                  in order to set an application fee percentage . For more information,
                  see the application fees documentation.
                default: null
        responses: 
          200: 
            body: 
              application/json: 
                schema: subscription
                example: !include examples/subscription.json
      get: 
        description: "You can see a list of the customer's active subscriptions. Note that the 10 most recent active subscriptions are always available by default on the customer object. If you need more than those 10, you can use the 'limit' and 'starting_after' parameters to page through additional subscriptions."
      /{SUBSCRIPTION_ID}: 
        type: { collectionItem: { item: subscription } }
        get: 
          description: |
            Retrieving a customer's subscription
            By default, you can see the 10 most recent active subscriptions stored on a customer directly on the customer object, but you can also retrieve details about a specific active subscription for a customer.
          responses:
            200:
              body:
                application/json:
                  example: !include examples/subscription.json
        post: 
          description: Updates an existing subscription on a customer to match the specified parameters. When changing plans or quantities, we will optionally prorate the price we charge next month to make up for any price changes.
          body: 
            application/x-www-form-urlencoded: 
              formParameters: 
                plan: 
                  description: The identifier of the plan to subscribe the customer to.
                coupon: 
                  description: |
                    The code of the coupon to apply to the customer if you would like to
                    apply it at the same time as creating the subscription.
                  default: null
                prorate: 
                  description: |
                    Flag telling us whether to prorate switching plans during a billing
                    cycle.
                  type: boolean
                  default: true
                trial_end: 
                  description: |
                    UTC integer timestamp representing the end of the trial period the
                    customer will get before being charged for the first time. If set,
                    trial_end will override the default trial period of the plan the
                    customer is being subscribed to. The special value now can be
                    provided to end the customer's trial immediately.
                  default: null
                card: 
                  description: |
                    The card can either be a token, like the ones returned by our Stripe.js,
                    or a dictionary containing a user's credit card details (with the
                    options shown below). You must provide a card if the customer does
                    not already have a valid card attached, and you are subscribing the
                    customer for a plan that is not free. Passing card will create a new
                    card, make it the customer default card, and delete the old customer
                    default if one exists. If you want to add an additional card to use
                    with subscriptions, instead use the card creation API to add the card
                    and then the customer update API to set it as the default. Whenever
                    you attach a card to a customer, Stripe will automatically validate
                    the card.
                    Card details:
                    **number**: required The card number, as a string without any separators.
                    **exp_month**: required Two digit number representing the card's expiration month.
                    **exp_year**: required Two or four digit number representing the card's expiration year.
                    **cvc**: optional, highly recommended Card security code.
                    **name**: optional, Cardholder's full name.
                    **address_line1**: optional
                    **address_line2**: optional
                    **address_zip**: optional
                    **address_state**: optional
                    **address_country**: optional
                quantity: 
                  description: |
                    The quantity you'd like to apply to the subscription you're creating.
                    For example, if your plan is $10/user/month, and your customer has 5
                    users, you could pass 5 as the quantity to have the customer charged
                    $50 (5 x $10) monthly. If you update a subscription but don't change
                    the plan ID (e.g. changing only the trial_end), the subscription will
                    inherit the old subscription's quantity attribute unless you pass a
                    new quantity parameter. If you update a subscription and change the
                    plan ID, the new subscription will not inherit the quantity attribute
                    and will default to 1 unless you pass a quantity parameter.
                  type: integer
                  default: 1
                application_fee_percent: 
                  description: |
                    A positive integer between 1 and 100 that represents the percentage
                    of the subscription invoice amount due each billing period (including
                    any bundled invoice items) that will be transferred to the application
                    owners Stripe account. The request must be made with an OAuth key
                    in order to set an application fee percentage . For more information,
                    see the application fees documentation.
          responses:
            200:
              body:
                application/json:
                  example: !include examples/subscription.json
        delete: 
          description: |
            Cancels the subscription if it exists. If you set the at_period_end parameter
            to true, the subscription will remain active until the end of the period, a
            which point it will be cancelled and not renewed. By default, the subscription
            is terminated immediately. In either case, the customer will not be charged
            again for the subscription. Note, however, that any pending invoice items
            that you've created will still be charged for at the end of the period unless
            manually deleted.If you've set the subscription to cancel at period end, any
            pending prorations will also be left in place and collected at the end of the
            period, but if the subscription is set to cancel immediately, pending prorations
            will be removed.
            By default, all unpaid invoices for the customer will be closed upon subscription
            cancellation. We do this in order to prevent unexpected payment retries once
            the customer has canceled a subscription. However, you can reopen the invoices
            manually after subscription cancellation to have us proceed with automatic
            retries, or you could even re-attempt payment yourself on all unpaid invoices
            before allowing the customer to cancel the subscription at all.
          body: 
            application/x-www-form-urlencoded: 
              formParameters: 
                at_period_end: 
                  description: A flag that if set to true will delay the cancellation of the subscription until the end of the current period.
                  type: boolean
                  default: false
        /discount: 
          type: baseResource
          delete: 
            description: Removes the currently applied discount on a subscription.
            responses: 
              200: 
                body: 
                  application/json: 
                    schema: delete
                    example: !include examples/delete.json
    /discount: 
      type: baseResource
      delete: 
        description: Removes the currently applied discount on a customer.
        responses: 
          200: 
            body: 
              application/json: 
                schema: delete
                example: !include examples/delete.json
/plans: 
  type: { collection: { itemPathName: plan } }
  post: 
    description: |
      You can create plans easily via the plan management page of the Stripe dashboard.
      Plan creation is also accessible via the API if you need to create plans on
      the fly.
    body: 
      application/x-www-form-urlencoded: 
        formParameters: 
          id: 
            description: |
              Unique string of your choice that will be used to identify this plan
              when subscribing a customer. This could be an identifier like "gold"
              or a primary key from your own database.
            required: true
          amount: 
            description: |
              A positive integer in cents (or 0 for a free plan) representing how
              much to charge (on a recurring basis).
            type: integer
            required: true
          currency: 
            description: 3-letter ISO code for currency.
            required: true
            minLength: 3
            maxLength: 3
          interval: 
            description: Specifies billing frequency. Either week, month or year.
            required: true
            enum: 
              - week
              - month
              - year
          interval_count: 
            description: |
              The number of the unit specified in the interval parameter. For
              example, you could specify an interval_count of 3 and an interval of
              'month' for quarterly billing (every 3 months).
            type: integer
            default: 1
          name: 
            description: |
              Name of the plan, to be displayed on invoices and in the web interface.
            required: true
          trial_period_days: 
            description: |
              Specifies a trial period in (an integer number of) days. If you
              include a trial period, the customer won't be billed for the firs
              time until the trial period ends. If the customer cancels before the
              trial period is over, she'll never be billed at all.
          metadata: 
            description: A set of key/value pairs that you can attach to a plan object. It can be useful for storing additional information about the plan in a structured format.
          statement_description: 
            description: |
              An arbitrary string to be displayed on your customers' credit card statements (alongside your company name) for charges created by this plan. This may be up to 15 characters. As an example, if your website is RunClub and you specify Silver Plan, the user will see RUNCLUB SILVER PLAN. The statement description may not include <>"' characters. While most banks display this information consistently, some may display it incorrectly or not at all.
    responses: 
      200: 
        body: 
          application/json:
            example: !include examples/plan.json
  get: 
    description: Returns a list of your plans.
    responses: 
      200: 
        body: 
          application/json: 
            schema: plans
            example: !include examples/plans.json
  /{PLAN_ID}: 
    type: { collectionItem: { item: plan } }
    uriParameters: 
      PLAN_ID: 
        description: The ID of the desired plan.
    get: 
      description: Retrieves the plan with the given ID.
      responses: 
        200: 
          body: 
            application/json:
              example: !include examples/plan.json
    post: 
      description: |
        Updates the name of a plan. Other plan details (price, interval, etc.) are,
        by design, not editable.
      body: 
        application/x-www-form-urlencoded: 
          formParameters: 
            name: 
              description: |
                Name of the plan, to be displayed on invoices and in the web interface.
            metadata: 
              description: A set of key/value pairs that you can attach to a plan object. It can be useful for storing additional information about the plan in a structured format. You can unset individual keys if you POST an empty value for that key. You can clear all keys if you POST an empty value for metadata.
            statement_description: 
              description: |
                An arbitrary string to be displayed on your customers' credit card statements (alongside your company name) for charges created by this plan. This may be up to 15 characters. As an example, if your website is RunClub and you specify Silver Plan, the user will see RUNCLUB SILVER PLAN. The statement description may not include <>"' characters. While most banks display this information consistently, some may display it incorrectly or not at all. This will be unset if you POST an empty value.
      responses: 
        200: 
          body: 
            application/json:
              example: !include examples/plan.json
    delete: 
      description: |
        You can delete plans via the plan management page of the Stripe dashboard.
        However, deleting a plan does not affect any current subscribers to the plan;
        it merely means that new subscribers can't be added to that plan. You can
        also delete plans via the API.
/coupons: 
  type: { collection: { itemPathName: coupon } }
  post: 
    description: |
      You can create coupons easily via the coupon management page of the Stripe
      dashboard. Coupon creation is also accessible via the API if you need to
      create coupons on the fly.
      A coupon has either a percent_off or an amount_off and currency. If you se
      an amount_off, that amount will be subtracted from any invoice's subtotal.
      For example, an invoice with a subtotal $10 will have a final total of -$10
      if a coupon with an amount_off of 2000 is applied to it.
    body: 
      application/x-www-form-urlencoded: 
        formParameters: 
          id: 
            description: |
              Unique string of your choice that will be used to identify this coupon
              when applying it a customer. This is often a specific code youll
              give to your customer to use when signing up (e.g. FALL25OFF). If
              you dont want to specify a particular code, you can leave the ID
              blank and well generate a random code for you.
          duration: 
            description: |
              Specifies how long the discount will be in effect. Can be forever,
              once, or repeating.
            required: true
            enum: 
              - forever
              - once
              - repeating
          amount_off: 
            description: |
              A positive integer representing the amount to subtract from an invoice
              total (if percent_off is not passed).
            type: integer
          currency: 
            description: |
              Currency of the amount_off parameter (if percent_off is not passed)
          duration_in_months: 
            description: |
              Required only if duration is repeating If duration is repeating, a
              positive integer that specifies the number of months the discoun
              will be in effect.
            type: integer
          max_redemptions: 
            description: |
              A positive integer specifying the number of times the coupon can be
              redeemed before its no longer valid. For example, you might have a
              50% off coupon that the first 20 readers of your blog can use.
            type: integer
          percent_off: 
            description: |
              A positive integer between 1 and 100 that represents the discoun
              the coupon will apply (if amount_off is not passed).
            type: integer
            minimum: 1
            maximum: 100
          redeem_by: 
            description: |
              UTC timestamp specifying the last time at which the coupon can be
              redeemed. After the redeem_by date, the coupon can no longer be
              applied to new customers.
          metadata: 
            description: A set of key/value pairs that you can attach to a coupon object. It can be useful for storing additional information about the coupon in a structured format. This will be unset if you POST an empty value.
    responses: 
      200: 
        body: 
          application/json:
            example: !include examples/coupon.json
  get: 
    description: Returns a list of your coupons.
    responses: 
      200: 
        body: 
          application/json: 
            schema: coupons
            example: !include examples/coupons.json
  /{COUPON_ID}: 
    type: { collectionItem: { item: coupon } }
    uriParameters: 
      COUPON_ID: 
        description: The ID of the desired coupon.
    get: 
      description: Retrieves the coupon with the given ID.
      responses: 
        200: 
          body: 
            application/json:
              example: !include examples/coupon.json
    delete: 
      description: |
        You can delete coupons via the coupon management page of the Stripe dashboard.
        However, deleting a coupon does not affect any customers who have already
        applied the coupon; it means that new customers can't redeem the coupon. You
        can also delete coupons via the API.
/invoices: 
  type: { collection: { itemPathName: invoice } }
  post: 
    is: [ objectUpdate ]
    description: |
      If you need to invoice your customer outside the regular billing cycle, you
      can create an invoice that pulls in all pending invoice items, including
      prorations. The customer's billing cycle and regular subscription won't be
      affected.
      Once you create the invoice, it'll be picked up and paid automatically,
      though you can choose to pay it right away.
    body: 
      application/x-www-form-urlencoded: 
        formParameters: 
          customer: 
            required: true
          application_fee: 
            description: |
              A fee in cents that will be applied to the invoice and transferred
              to the application owners Stripe account. The request must be made
              with an OAuth key in order to take an application fee. For more
              information, see the application fees documentation.
            type: integer
          subscription: 
            description: The ID of the subscription to invoice. If not set, the created invoice will include all pending invoice items for the customer. If set, the created invoice will exclude pending invoice items that pertain to a subscription other than the specified subscription.
    responses: 
      200: 
        body: 
          application/json:
            example: !include examples/invoice.json
  get: 
    description: You can list all invoices, or list the invoices for a specific customer. The invoices are returned sorted by creation date, with the most recently created invoices appearing first.
    queryParameters: 
      customer: 
        description: The identifier of the customer whose invoices to return. If none is provided, all invoices will be returned.
        example: customer=cus_3WhXSePhVmrgra
      date: 
        description: A filter on the list based on the object date field. The value can be a string with an exact UTC timestamp, or it can be a dictionary with the following options
        example: 1392830054
    responses: 
      200: 
        body: 
          application/json: 
            schema: invoices
            example: !include examples/invoices.json
  /upcoming: 
    type: baseResource
    get: 
      description: |
        At any time, you can view the upcoming invoice for a customer. This will
        show you all the charges that are pending, including subscription renewal
        charges, invoice item charges, etc. It will also show you any discoun
        that is applicable to the customer.
      queryParameters: 
        customer: 
          description: |
            The identifier of the customer whose upcoming invoice you'd like to retrieve.
          required: true
        subscription: 
          description: "The identifier of the subscription for which you'd like to retrieve the upcoming invoice. If not provided, you will retrieve the next upcoming invoice from among the customer's subscriptions."
      responses: 
        200: 
          body: 
            application/json: 
              schema: invoice
              example: !include examples/invoice.json
  /{INVOICE_ID}: 
    type: { collectionItem: { item: invoice } }
    uriParameters: 
      INVOICE_ID: 
        description: The identifier of the desired invoice.
    get: 
      description: |
        Retrieves the invoice with the given ID.
        Returns an invoice object if a valid invoice ID was provided. Returns an
        error otherwise.
        The invoice object contains a lines hash that contains information about the
        subscriptions and invoice items that have been applied to the invoice, as
        well as any prorations that Stripe has automatically calculated. Each line
        on the invoice has an amount attribute that represents the amount actually
        contributed to the invoice's total. For invoice items and prorations, the
        amount attribute is the same as for the invoice item or proration respectively.
        For subscriptions, the amount may be different from the plan's regular price
        depending on whether the invoice covers a trial period or the invoice period
        differs from the plan's usual interval.
        The invoice object has both a subtotal and a total. The subtotal represents
        the total before any discounts, while the total is the final amount to be
        charged to the customer after all coupons have been applied.
        The invoice also has a next_payment_attempt attribute that tells you the nex
        time (as a UTC timestamp) payment for the invoice will be automatically
        attempted. For invoices that have been closed or that have reached the maximum
        number of retries (specified in your retry settings) , the next_payment_attemp
        will be null.
      responses: 
        200: 
          body: 
            application/json:
              example: !include examples/invoice.json
    post: 
      is: [ objectUpdate ]
      description: |
        Until an invoice is paid, it is marked as open (closed=false). If you'd like to
        stop Stripe from automatically attempting payment on an invoice or would simply
        like to close the invoice out as no longer owed by the customer, you can update
        the closed parameter.
      body: 
        application/x-www-form-urlencoded: 
          formParameters: 
            application_fee: 
              description: |
                A fee in cents that will be applied to the invoice and transferred to
                the application owners Stripe account. The request must be made with
                an OAuth key in order to take an application fee. For more information,
                see the application fees documentation.
              type: integer
            closed: 
              description: |
                Boolean representing whether an invoice is closed or not. To close an
                invoice, pass true.
              type: boolean
      responses: 
        200: 
          body: 
            application/json:
              example: !include examples/invoice.json
    /pay: 
      type: baseResource
      post: 
        description: |
          Stripe automatically creates and then attempts to pay invoices for customers
          on subscriptions. We'll also retry unpaid invoices according to your retry
          settings. However, if you'd like to attempt to collect payment on an invoice
          out of the normal retry schedule or for some other reason, you can do so.
        responses: 
          200: 
            body: 
              application/json: 
                schema: invoice
                example: !include examples/invoice.json
    /lines: 
      type: { collection: { itemPathName: invoiceLine } }
      get: 
        description: |
          When retrieving an invoice, you'll get a lines property containing the total
          count of line items and the first handful of those items. There is also a URL
          where you can retrieve the full (paginated) list of line items.
        queryParameters: 
          id: 
            description: |
              The id of the invoice containing the lines to be retrieved
            required: true
          customer: 
            description: |
              In the case of upcoming invoices, the customer of the upcoming invoice
              is required. In other cases it is ignored.
          subscription: 
            description: In the case of upcoming invoices, the subscription of the upcoming invoice is optional. In other cases it is ignored.
        responses: 
          200: 
            body: 
              application/json: 
                schema: invoice-line_items
                example: !include examples/invoice-line_items.json
/invoiceitems: 
  type: { collection: { itemPathName: invoice_item } }
  post: 
    is: [ objectUpdate ]
    description: |
      Adds an arbitrary charge or credit to the customer's upcoming invoice.
    body: 
      application/x-www-form-urlencoded: 
        formParameters: 
          customer: 
            description: |
              The ID of the customer who will be billed when this invoice item is
              billed.
            required: true
          amount: 
            description: |
              The integer amount in cents of the charge to be applied to the upcoming
              invoice. If you want to apply a credit to the customer's account,
              pass a negative amount.
            type: integer
            required: true
          currency: 
            description: 3-letter ISO code for currency.
            required: true
            minLength: 3
            maxLength: 3
          invoice: 
            description: |
              The ID of an existing invoice to add this invoice item to. When lef
              blank, the invoice item will be added to the next upcoming scheduled
              invoice. Use this when adding invoice items in response to an
              invoice.created webhook. You cannot add an invoice item to an invoice
              that has already been paid or closed.
          subscription: 
            description: The ID of a subscription to add this invoice item to. When left blank, the invoice item will be be added to the next upcoming scheduled invoice. When set, scheduled invoices for subscriptions other than the specified subscription will ignore the invoice item. Use this when you want to express that an invoice item has been accrued within the context of a particular subscription.
    responses: 
      200: 
        body: 
          application/json:
            example: !include examples/invoice_item.json
  get: 
    description: |
      Returns a list of your invoice items. Invoice Items are returned sorted by
      creation date, with the most recently created invoice items appearing first.
    queryParameters: 
      created: 
        description: |
          A filter on the list based on the object created field. The value can be
          a string with an exact UTC timestamp, or it can be a dictionary with the
          following options:
            **gt**: optional Return values where the created field is after this timestamp.
            **gte**: optional Return values where the created field is after or equal to this timestamp.
            **lt**: optional Return values where the created field is before this timestamp.
            **lte**: optional Return values where the created field is before or equal to this timestamp.
            **customer**: optional The identifier of the customer whose invoice items to return. If none is provided, all invoice items will be returned.
            **offset**: optional  default is 0 An offset into the list of returned items. The API will return the requested number of items starting at that offset.
      customer: 
        description: |
          The identifier of the customer whose invoice items to return. If none is
          provided, all invoice items will be returned.
    responses: 
      200: 
        body: 
          application/json: 
            schema: invoice_items
            example: !include examples/invoice_items.json
  /{ID}: 
    type: { collectionItem: { item: invoice_item } }
    uriParameters: 
      ID: 
        description: The identifier of the invoice item.
    get: 
      description: Retrieves the invoice item with the given ID.
      responses: 
        200: 
          body: 
            application/json:
              example: !include examples/invoice_item.json
    delete: 
      description: |
        Removes an invoice item from the upcoming invoice. Removing an invoice item
        is only possible before the invoice it's attached to is closed.
    post: 
      is: [ objectUpdate ]
      description: "Updates the amount or description of an invoice item on an upcoming invoice. Updating an invoice item is only possible before the invoice it's attached to is closed."
      body: 
        application/x-www-form-urlencoded: 
          formParameters: 
            amount: 
              description: "The integer amount in cents of the charge to be applied to the upcoming invoice. If you want to apply a credit to the customer's account, pass a negative amount."
      responses: 
        200: 
          body: 
            application/json:
              example: !include examples/invoice_item.json
/transfers: 
  type: { collection: { itemPathName: transfer } }
  post: 
    is: [ objectUpdate ]
    description: |
      To send funds from your Stripe account to a third-party bank account, you
      create a new transfer object. Your Stripe balance must be able to cover
      the transfer amount, or you'll receive an "Insufficient Funds" error.
      If your API key is in test mode, money won't actually be sent, though
      everything else will occur as if in live mode.
    body: 
      application/x-www-form-urlencoded: 
        formParameters: 
          amount: 
            description: |
              A positive integer in cents representing how much to transfer.
            type: integer
            required: true
          currency: 
            description: 3-letter ISO code for currency.
            required: true
            minLength: 3
            maxLength: 3
          recipient: 
            description: |
              The ID of an existing, verified recipient that the money will
              be transferred to in this request. If self, the money will be
              transferred to the bank account associated with your account.
            required: true
          statement_descriptor: 
            description: |
              An arbitrary string which will be displayed on the recipient's bank
              statement. This should not include your company name, as that will
              already be part of the descriptor. The maximum length of this string
              is 15 characters; longer strings will be truncated.
              For example, if your website is EXAMPLE.COM and you pass in
              `INVOICE 1234`, the user will see
              `EXAMPLE.COM INVOICE 1234`.
              Note: While most banks display this information consistently, some
              may display it incorrectly or not at all.
            default: null
    responses: 
      200: 
        body: 
          application/json:
            example: !include examples/transfer.json
  get: 
    description: |
      Returns a list of existing transfers sent to third-party bank accounts or
      that Stripe has sent you. The transfers are returned in sorted order, with
      the most recent transfers appearing first.
    queryParameters: 
      date: 
        description: |
          A filter on the list based on the object date field. The value can be a
          string with an exact UTC timestamp, or it can be a dictionary with the
          following options:
            **gt**: optional Return values where the date field is after this timestamp.
            **gte**: optional Return values where the date field is after or equal to this timestamp.
            **lt**: optional Return values where the date field is before this timestamp.
            **lte**: optional Return values where the date field is before or equal to this timestamp.
      recipient: 
        description: |
          Only return transfers for the recipient specified by this recipient ID.
      status: 
        description: |
          Only return transfers that have the given status: pending, paid, or failed.
        enum: 
          - pending
          - paid
          - failed
      created: 
        description: |
          A filter on the list based on the object created field. The value can be a string with an exact UTC timestamp, or it can be a dictionary with the following options:
          
          **gt** optional Return values where the created field is after this timestamp.
          **gte** optional Return values where the created field is after or equal to this timestamp.
          **lt** optional Return values where the created field is before this timestamp.
          **lte** optional Return values where the created field is before or equal to this timestamp.
    responses: 
      200: 
        body: 
          application/json: 
            schema: transfers
            example: !include examples/transfers.json
  /{transfer_ID}: 
    type: { collectionItem: { item: transfer } }
    uriParameters: 
      transfer_ID: 
        description: The identifier of the transfer.
    get: 
      description: |
        Retrieves the details of an existing transfer. Supply the unique transfer ID
        from either a transfer creation request or the transfer list, and Stripe will
        return the corresponding transfer information.
      responses: 
        200: 
          body: 
            application/json:
              example: !include examples/transfer.json
    post: 
      is: [ objectUpdate ]
      description: Updates the specified transfer by setting the values of the parameters passed. Any parameters not provided will be left unchanged.
    /cancel: 
      type: baseResource
      post: 
        description: |
          Cancels a transfer that has previously been created. Funds will be refunded
          to your available balance, and the fees you were originally charged on the
          transfer will be refunded. You may not cancel transfers that have already
          been paid out, or automatic Stripe transfers.
        responses: 
          200: 
            body: 
              application/json:
                example: !include examples/transfer.json
/recipients: 
  type: { collection: { itemPathName: recipient } }
  post: 
    is: [ objectUpdate ]
    description: |
      Creates a new recipient object and verifies both the recipient identity and
      bank account information.
    body: 
      application/x-www-form-urlencoded: 
        formParameters: 
          name: 
            description: |
              The recipient's full, legal name. For type individual, should be in
              the format "First Last", "First Middle Last", or "First M Last" (no
              prefixes or suffixes). For corporation, the full incorporated name.
            required: true
          type: 
            description: |
              Type of the recipient: either individual or corporation.
            required: true
            enum: [ individual , corporation ]
          tax_id: 
            description: |
              The recipient's tax ID, as a string. For type individual, the full SSN;
              for type corporation, the full EIN.
          bank_account: 
            description: |
              A bank account to attach to the recipient.
              **country**: required The country the bank account is in. Currently, only US is supported.
              **routing_number**: required The routing number for the bank account in string form. This should be the ACH routing number, not the wire routing number.
              **account_number**: required The account number for the bank account in string form. Must be a checking account.
          email: 
            description: |
              The recipient's email address. It is displayed alongside the recipien
              in the web interface and can be useful for searching and tracking.
    responses: 
      200: 
        body: 
          application/json:
            example: !include examples/recipient.json
  get: 
    description: |
      Returns a list of your recipients. The recipients are returned sorted by
      creation date, with the most recently created recipient appearing first.
    queryParameters: 
      verified: 
        description: Only return recipients that are verified or unverified.
        type: boolean
    responses: 
      200: 
        body: 
          application/json: 
            schema: recipients
            example: !include examples/recipients.json
  /{recipient_ID}: 
    type: { collectionItem: { item: recipient } }
    uriParameters: 
      recipient_ID: 
        description: The identifier of the recipient to be retrieved.
    get: 
      description: |
        Retrieves the details of an existing recipient. You need only supply the
        unique recipient identifier that was returned upon recipient creation.
      responses: 
        200: 
          body: 
            application/json:
              example: !include examples/recipient.json
    post: 
      is: [ objectUpdate ]
      description: |
        Updates the specified recipient by setting the values of the parameters
        passed. Any parameters not provided will be left unchanged.
        If you update the name or tax ID, the identity verification will automatically
        be rerun. If you update the bank account, the bank account validation will
        automatically be rerun.
      body: 
        application/x-www-form-urlencoded: 
          formParameters: 
            name: 
              description: |
                The recipient's full, legal name. For type individual, should be in
                the format "First Last", "First Middle Last", or "First M Last" (no
                prefixes or suffixes). For corporation, the full incorporated name.
              default: null
            tax_id: 
              description: |
                The recipient's tax ID, as a string. For type individual, the full
                SSN; for type corporation, the full EIN.
            bank_account: 
              description: |
                A new bank account to attach to the recipient.
                  **country**: required The country the bank account is in. Currently, only US is supported.
                  **routing_number**: required The routing number for the bank account in string form. This should be the ACH routing number, not the wire routing number.
                  **account_number**: required The account number for the bank account in string form. Must be a checking account.
            email: 
              description: |
                The recipient's email address. It is displayed alongside the recipien
                in the web interface and can be useful for searching and tracking.
                This will be unset if you POST an empty value.
              default: null
      responses: 
        200: 
          body: 
            application/json:
              example: !include examples/recipient.json
    delete: 
      description: |
        Permanently deletes a recipient. It cannot be undone.
/account: 
  type: baseResource
  get: 
    description: |
      Retrieves the details of the account, based on the API key that was used to
      make the request.
    responses: 
      200: 
        body: 
          application/json: 
            schema: account
            example: !include examples/account.json
/balance: 
  type: baseResource
  get: 
    description: |
      Retrieves the current account balance, based on the API key that was used to
      make the request.
    responses: 
      200: 
        body: 
          application/json: 
            schema: balance
            example: !include examples/balance.json
  /history: 
    type: { collection: { itemPathName: balance_transaction } }
    get: 
      description: |
        Returns a list of transactions that have contributed to the Stripe accoun
        balance (includes charges, refunds, transfers, and so on). The transactions
        are returned in sorted order, with the most recent transactions appearing
        first.
      queryParameters: 
        available_on: 
          description: |
            A filter on the list based on the object available_on field. The value
            can be a string with an exact UTC timestamp, or it can be a dictionary
            with the following options:
              **gt**: optional Return values where the available_on field is after this timestamp.
              **gte**: optional Return values where the available_on field is after or equal to this timestamp.
              **lt**: optional Return values where the available_on field is before this timestamp.
              **lte**: optional Return values where the available_on field is before or equal to this timestamp.
        created: 
          description: |
            A filter on the list based on the object created field. The value can be
            a string with an exact UTC timestamp, or it can be a dictionary with the
            following options:
              **gt**: optional Return values where the created field is after this timestamp.
              **gte**: optional Return values where the created field is after or equal to this timestamp.
              **lt**: optional Return values where the created field is before this timestamp.
              **lte**: optional Return values where the created field is before or equal to this timestamp.
        currency: 
        source: 
        transfer: 
          description: |
            For automatic Stripe transfers only, only returns transactions tha
            were transferred out on the specified transfer ID.
        type: 
          description: |
            Only returns transactions of the given type. One of: charge, refund,
            adjustment, application_fee, application_fee_refund, transfer, or transfer_failure.
          enum: 
            - charge
            - refund
            - adjustment
            - application_fee
            - application_fee_refund
            - transfer
            - transfer_failure
      responses: 
        200: 
          body: 
            application/json: 
              schema: balance_transactions
              example: !include examples/balance_transactions.json
    /{TRANSACTION_ID}: 
      type: { collectionItem: { item: balance_transaction } }
      uriParameters: 
        TRANSACTION_ID: 
          description: |
            The ID of the desired balance transaction (as found on any API objec
            that affects the balance, e.g. a charge or transfer).
      get: 
        description: Retrieves the balance transaction with the given ID.
        body:
          application/json:
            example: !include examples/balance_transaction.json
/events: 
  type: { collection: { itemPathName: event } }
  get: 
    description: List events, going back (at least) up to 30 days.
    queryParameters: 
      created: 
        description: |
          A filter on the list based on the object created field. The value can be
          a string with an exact UTC timestamp, or it can be a dictionary with the
          following options:
            **gt**: optional Return values where the created field is after this timestamp.
            **gte**: optional Return values where the created field is after or equal to this timestamp.
            **lt**: optional Return values where the created field is before this timestamp.
            **lte**: optional Return values where the created field is before or equal to this timestamp.
      type: 
        description: |
          A string containing a specific event name, or group of events using * as
          a wildcard. The list will be filtered to include only events with a
          matching event property
    responses: 
      200: 
        body: 
          application/json: 
            schema: events
            example: !include examples/events.json
  /{EVENT_ID}: 
    type: { collectionItem: { item: event } }
    uriParameters: 
      EVENT_ID: 
        description: The identifier of the event.
    get: 
      description: |
        Retrieves the details of an event. Supply the unique identifier of the
        event, which you might have received in a webhook.
      body:
        application/json:
          example: !include examples/event.json 
/tokens: 
  type: { collection: { itemPathName: token } }
  post: 
    description: |
      Creates a single use token that wraps the details of a credit card. This
      token can be used in place of a credit card dictionary with any API method.
      These tokens can only be used once: by creating a new charge object, or
      attaching them to a customer.
    body: 
      application/x-www-form-urlencoded: 
        formParameters: 
          card: 
            description: |
              optional, either customer or card is required, but not both
              The card details this token will represent.
                **number**: required The card number, as a string without any separators.
                **exp_month**: required Two digit number representing the card's expiration month.
                **exp_year**: required Two or four digit number representing the card's expiration year.
                **cvc**: optional, highly recommended Card security code.
                **name**: optional Cardholder's full name.
                **address_line1**: optional
                **address_line2**: optional
                **address_city**: optional
                **address_zip**: optional
                **address_state**: optional
                **address_country**: optional
          customer: 
            description: |
              optional, either customer or card is required, but not both
              For use with Stripe Connect only; the API key used for the reques
              must be an OAuth access token. For more details, see the shared
              customers documentation.
              A customer (owned by the application's account) to create a token for.
          bank_account: 
            description: |
              A bank account to attach to the recipient.
              
              **country** required The country the bank account is in. Currently, only US is supported.
              **routing_number** required The routing number for the bank account in string form. This should be the ACH routing number, not the wire routing number.
              **account_number** required The account number for the bank account in string form. Must be a checking account.
    responses: 
      200: 
        body: 
          application/json:
            example: !include examples/token.json
  /{ID}: 
    type: { collectionItem: { item: token } }
    uriParameters: 
      ID: 
        description: ID of a token.
    get: 
      description: Retrieves the token with the given ID.
      body:
        application/json:
          example: !include examples/token.json
/application_fees: 
  type: { collection: { itemPathName: application_fee } }
  get: 
    description: "Returns a list of application fees you've previously collected. The application fees are returned in sorted order, with the most recent fees appearing first."
    queryParameters: 
      charge: 
        description: Only return application fees for the charge specified by this charge ID.
      created: 
        description: A filter on the list based on the object created field. The value can be a string with an exact UTC timestamp, or it can be a dictionary with the following options
    responses: 
      200: 
        body: 
          application/json: 
            schema: application_fees
            example: !include examples/application_fees.json
  /{FEE_ID}: 
    type: { collectionItem: { item: application_fee } }
    get: 
      description: Retrieves the details of an application fee that your account has collected. The same information is returned when refunding the application fee.
      body:
        application/json:
          example: !include examples/application_fee.json
    /refund: 
      type: baseResource
      post: 
        description: |
          Refunds an application fee that has previously been collected but not yet refunded. Funds will be refunded to the Stripe account that the fee was originally collected from.
          You can optionally refund only part of an application fee. You can do so as many times as you wish until the entire fee has been refunded.
          Once entirely refunded, an application fee can't be refunded again. This method will return an error when called on an already-refunded application fee, or when trying to refund more money than is left on an application fee.
        body: 
          application/x-www-form-urlencoded: 
            formParameters: 
              amount: 
                description: A positive integer in cents representing how much of this fee to refund. Can only refund up to the unrefunded amount remaining of the fee.
        responses: 
          200: 
            body: 
              application/json: 
                schema: application_fee
                example: !include examples/application_fee.json
documentation: 
  - title: Headline
    content: !include docs/headline.md